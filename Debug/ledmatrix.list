
ledmatrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c8c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee0  08008e28  08008e28  00018e28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d08  08009d08  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009d08  08009d08  00019d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d10  08009d10  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d14  08009d14  00019d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e048  20000090  08009da8  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e0d8  08009da8  0002e0d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0c9  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000023a5  00000000  00000000  0002f189  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a50  00000000  00000000  00031530  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  00031f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002fc0  00000000  00000000  000328a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b9d6  00000000  00000000  00035868  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084cc2  00000000  00000000  0004123e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c5f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c5c  00000000  00000000  000c5f7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008e0c 	.word	0x08008e0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	08008e0c 	.word	0x08008e0c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <SELECT>:
#define SD_CS_GPIO_Port GPIOB
#define SD_CS_Pin GPIO_PIN_0

/* SPI Chip Select */
static void SELECT(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2101      	movs	r1, #1
 8000e18:	4802      	ldr	r0, [pc, #8]	; (8000e24 <SELECT+0x14>)
 8000e1a:	f002 ff8f 	bl	8003d3c <HAL_GPIO_WritePin>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40020400 	.word	0x40020400

08000e28 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4802      	ldr	r0, [pc, #8]	; (8000e3c <DESELECT+0x14>)
 8000e32:	f002 ff83 	bl	8003d3c <HAL_GPIO_WritePin>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40020400 	.word	0x40020400

08000e40 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000e4a:	bf00      	nop
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <SPI_TxByte+0x30>)
 8000e4e:	f003 fed1 	bl	8004bf4 <HAL_SPI_GetState>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d1f9      	bne.n	8000e4c <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000e58:	1df9      	adds	r1, r7, #7
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <SPI_TxByte+0x30>)
 8000e62:	f003 fbf1 	bl	8004648 <HAL_SPI_Transmit>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000c008 	.word	0x2000c008

08000e74 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000e82:	bf00      	nop
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <SPI_RxByte+0x38>)
 8000e86:	f003 feb5 	bl	8004bf4 <HAL_SPI_GetState>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d1f9      	bne.n	8000e84 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000e90:	1dba      	adds	r2, r7, #6
 8000e92:	1df9      	adds	r1, r7, #7
 8000e94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <SPI_RxByte+0x38>)
 8000e9e:	f003 fd07 	bl	80048b0 <HAL_SPI_TransmitReceive>

  return data;
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	2000c008 	.word	0x2000c008

08000eb0 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000eb8:	f7ff ffdc 	bl	8000e74 <SPI_RxByte>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	701a      	strb	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <SD_ReadyWait+0x34>)
 8000ed4:	2232      	movs	r2, #50	; 0x32
 8000ed6:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000ed8:	f7ff ffcc 	bl	8000e74 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000edc:	f7ff ffca 	bl	8000e74 <SPI_RxByte>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2bff      	cmp	r3, #255	; 0xff
 8000ee8:	d004      	beq.n	8000ef4 <SD_ReadyWait+0x28>
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <SD_ReadyWait+0x34>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d1f3      	bne.n	8000edc <SD_ReadyWait+0x10>

  return res;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000c060 	.word	0x2000c060

08000f04 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000f0a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000f0e:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000f10:	f7ff ff8a 	bl	8000e28 <DESELECT>

  for(int i = 0; i < 10; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	e005      	b.n	8000f26 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	f7ff ff90 	bl	8000e40 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	3301      	adds	r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	2b09      	cmp	r3, #9
 8000f2a:	ddf6      	ble.n	8000f1a <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000f2c:	f7ff ff70 	bl	8000e10 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000f30:	2340      	movs	r3, #64	; 0x40
 8000f32:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000f44:	2395      	movs	r3, #149	; 0x95
 8000f46:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e009      	b.n	8000f62 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000f4e:	1d3a      	adds	r2, r7, #4
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff72 	bl	8000e40 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	ddf2      	ble.n	8000f4e <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000f68:	e002      	b.n	8000f70 <SD_PowerOn+0x6c>
  {
    Count--;
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000f70:	f7ff ff80 	bl	8000e74 <SPI_RxByte>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d002      	beq.n	8000f80 <SD_PowerOn+0x7c>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1f4      	bne.n	8000f6a <SD_PowerOn+0x66>
  }

  DESELECT();
 8000f80:	f7ff ff52 	bl	8000e28 <DESELECT>
  SPI_TxByte(0XFF);
 8000f84:	20ff      	movs	r0, #255	; 0xff
 8000f86:	f7ff ff5b 	bl	8000e40 <SPI_TxByte>

  PowerFlag = 1;
 8000f8a:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <SD_PowerOn+0x94>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000ad 	.word	0x200000ad

08000f9c <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <SD_PowerOff+0x14>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	200000ad 	.word	0x200000ad

08000fb4 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <SD_CheckPower+0x14>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200000ad 	.word	0x200000ad

08000fcc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <SD_RxDataBlock+0x68>)
 8000fd8:	220a      	movs	r2, #10
 8000fda:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000fdc:	f7ff ff4a 	bl	8000e74 <SPI_RxByte>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2bff      	cmp	r3, #255	; 0xff
 8000fe8:	d104      	bne.n	8000ff4 <SD_RxDataBlock+0x28>
 8000fea:	4b12      	ldr	r3, [pc, #72]	; (8001034 <SD_RxDataBlock+0x68>)
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f3      	bne.n	8000fdc <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	2bfe      	cmp	r3, #254	; 0xfe
 8000ff8:	d001      	beq.n	8000ffe <SD_RxDataBlock+0x32>
    return FALSE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e016      	b.n	800102c <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	1c5a      	adds	r2, r3, #1
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff53 	bl	8000eb0 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	1c5a      	adds	r2, r3, #1
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff4d 	bl	8000eb0 <SPI_RxBytePtr>
  } while(btr -= 2);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	3b02      	subs	r3, #2
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1ed      	bne.n	8000ffe <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8001022:	f7ff ff27 	bl	8000e74 <SPI_RxByte>
  SPI_RxByte();
 8001026:	f7ff ff25 	bl	8000e74 <SPI_RxByte>

  return TRUE;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	2000c061 	.word	0x2000c061

08001038 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001048:	f7ff ff40 	bl	8000ecc <SD_ReadyWait>
 800104c:	4603      	mov	r3, r0
 800104e:	2bff      	cmp	r3, #255	; 0xff
 8001050:	d001      	beq.n	8001056 <SD_TxDataBlock+0x1e>
    return FALSE;
 8001052:	2300      	movs	r3, #0
 8001054:	e040      	b.n	80010d8 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fef1 	bl	8000e40 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800105e:	78fb      	ldrb	r3, [r7, #3]
 8001060:	2bfd      	cmp	r3, #253	; 0xfd
 8001062:	d031      	beq.n	80010c8 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	1c5a      	adds	r2, r3, #1
 800106c:	607a      	str	r2, [r7, #4]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fee5 	bl	8000e40 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	1c5a      	adds	r2, r3, #1
 800107a:	607a      	str	r2, [r7, #4]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fede 	bl	8000e40 <SPI_TxByte>
    } while (--wc);
 8001084:	7bbb      	ldrb	r3, [r7, #14]
 8001086:	3b01      	subs	r3, #1
 8001088:	73bb      	strb	r3, [r7, #14]
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d1eb      	bne.n	8001068 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8001090:	f7ff fef0 	bl	8000e74 <SPI_RxByte>
    SPI_RxByte();
 8001094:	f7ff feee 	bl	8000e74 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8001098:	e00b      	b.n	80010b2 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 800109a:	f7ff feeb 	bl	8000e74 <SPI_RxByte>
 800109e:	4603      	mov	r3, r0
 80010a0:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	f003 031f 	and.w	r3, r3, #31
 80010a8:	2b05      	cmp	r3, #5
 80010aa:	d006      	beq.n	80010ba <SD_TxDataBlock+0x82>
        break;

      i++;
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	3301      	adds	r3, #1
 80010b0:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	2b40      	cmp	r3, #64	; 0x40
 80010b6:	d9f0      	bls.n	800109a <SD_TxDataBlock+0x62>
 80010b8:	e000      	b.n	80010bc <SD_TxDataBlock+0x84>
        break;
 80010ba:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80010bc:	bf00      	nop
 80010be:	f7ff fed9 	bl	8000e74 <SPI_RxByte>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0fa      	beq.n	80010be <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f003 031f 	and.w	r3, r3, #31
 80010ce:	2b05      	cmp	r3, #5
 80010d0:	d101      	bne.n	80010d6 <SD_TxDataBlock+0x9e>
    return TRUE;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e000      	b.n	80010d8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80010ec:	f7ff feee 	bl	8000ecc <SD_ReadyWait>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d001      	beq.n	80010fa <SD_SendCmd+0x1a>
    return 0xFF;
 80010f6:	23ff      	movs	r3, #255	; 0xff
 80010f8:	e040      	b.n	800117c <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff fe9f 	bl	8000e40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	0e1b      	lsrs	r3, r3, #24
 8001106:	b2db      	uxtb	r3, r3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fe99 	bl	8000e40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	0c1b      	lsrs	r3, r3, #16
 8001112:	b2db      	uxtb	r3, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fe93 	bl	8000e40 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	b2db      	uxtb	r3, r3
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fe8d 	bl	8000e40 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2db      	uxtb	r3, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe88 	bl	8000e40 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b40      	cmp	r3, #64	; 0x40
 8001138:	d101      	bne.n	800113e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800113a:	2395      	movs	r3, #149	; 0x95
 800113c:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b48      	cmp	r3, #72	; 0x48
 8001142:	d101      	bne.n	8001148 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001144:	2387      	movs	r3, #135	; 0x87
 8001146:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe78 	bl	8000e40 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b4c      	cmp	r3, #76	; 0x4c
 8001154:	d101      	bne.n	800115a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001156:	f7ff fe8d 	bl	8000e74 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 800115a:	230a      	movs	r3, #10
 800115c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800115e:	f7ff fe89 	bl	8000e74 <SPI_RxByte>
 8001162:	4603      	mov	r3, r0
 8001164:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001166:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800116a:	2b00      	cmp	r3, #0
 800116c:	da05      	bge.n	800117a <SD_SendCmd+0x9a>
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	3b01      	subs	r3, #1
 8001172:	73bb      	strb	r3, [r7, #14]
 8001174:	7bbb      	ldrb	r3, [r7, #14]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f1      	bne.n	800115e <SD_SendCmd+0x7e>

  return res;
 800117a:	7b7b      	ldrb	r3, [r7, #13]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001184:	b590      	push	{r4, r7, lr}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001194:	2301      	movs	r3, #1
 8001196:	e0d5      	b.n	8001344 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001198:	4b6c      	ldr	r3, [pc, #432]	; (800134c <SD_disk_initialize+0x1c8>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <SD_disk_initialize+0x2a>
    return Stat;
 80011a6:	4b69      	ldr	r3, [pc, #420]	; (800134c <SD_disk_initialize+0x1c8>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	e0ca      	b.n	8001344 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 80011ae:	f7ff fea9 	bl	8000f04 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 80011b2:	f7ff fe2d 	bl	8000e10 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 80011ba:	2100      	movs	r1, #0
 80011bc:	2040      	movs	r0, #64	; 0x40
 80011be:	f7ff ff8f 	bl	80010e0 <SD_SendCmd>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	f040 80a5 	bne.w	8001314 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80011ca:	4b61      	ldr	r3, [pc, #388]	; (8001350 <SD_disk_initialize+0x1cc>)
 80011cc:	2264      	movs	r2, #100	; 0x64
 80011ce:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80011d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80011d4:	2048      	movs	r0, #72	; 0x48
 80011d6:	f7ff ff83 	bl	80010e0 <SD_SendCmd>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d158      	bne.n	8001292 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e00c      	b.n	8001200 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 80011e6:	7bfc      	ldrb	r4, [r7, #15]
 80011e8:	f7ff fe44 	bl	8000e74 <SPI_RxByte>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4423      	add	r3, r4
 80011f6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3301      	adds	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d9ef      	bls.n	80011e6 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001206:	7abb      	ldrb	r3, [r7, #10]
 8001208:	2b01      	cmp	r3, #1
 800120a:	f040 8083 	bne.w	8001314 <SD_disk_initialize+0x190>
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	2baa      	cmp	r3, #170	; 0xaa
 8001212:	d17f      	bne.n	8001314 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001214:	2100      	movs	r1, #0
 8001216:	2077      	movs	r0, #119	; 0x77
 8001218:	f7ff ff62 	bl	80010e0 <SD_SendCmd>
 800121c:	4603      	mov	r3, r0
 800121e:	2b01      	cmp	r3, #1
 8001220:	d807      	bhi.n	8001232 <SD_disk_initialize+0xae>
 8001222:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001226:	2069      	movs	r0, #105	; 0x69
 8001228:	f7ff ff5a 	bl	80010e0 <SD_SendCmd>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d005      	beq.n	800123e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <SD_disk_initialize+0x1cc>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1eb      	bne.n	8001214 <SD_disk_initialize+0x90>
 800123c:	e000      	b.n	8001240 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800123e:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001240:	4b43      	ldr	r3, [pc, #268]	; (8001350 <SD_disk_initialize+0x1cc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d064      	beq.n	8001314 <SD_disk_initialize+0x190>
 800124a:	2100      	movs	r1, #0
 800124c:	207a      	movs	r0, #122	; 0x7a
 800124e:	f7ff ff47 	bl	80010e0 <SD_SendCmd>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d15d      	bne.n	8001314 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001258:	2300      	movs	r3, #0
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	e00c      	b.n	8001278 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800125e:	7bfc      	ldrb	r4, [r7, #15]
 8001260:	f7ff fe08 	bl	8000e74 <SPI_RxByte>
 8001264:	4603      	mov	r3, r0
 8001266:	461a      	mov	r2, r3
 8001268:	f107 0310 	add.w	r3, r7, #16
 800126c:	4423      	add	r3, r4
 800126e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	3301      	adds	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d9ef      	bls.n	800125e <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 800127e:	7a3b      	ldrb	r3, [r7, #8]
 8001280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SD_disk_initialize+0x108>
 8001288:	2306      	movs	r3, #6
 800128a:	e000      	b.n	800128e <SD_disk_initialize+0x10a>
 800128c:	2302      	movs	r3, #2
 800128e:	73bb      	strb	r3, [r7, #14]
 8001290:	e040      	b.n	8001314 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001292:	2100      	movs	r1, #0
 8001294:	2077      	movs	r0, #119	; 0x77
 8001296:	f7ff ff23 	bl	80010e0 <SD_SendCmd>
 800129a:	4603      	mov	r3, r0
 800129c:	2b01      	cmp	r3, #1
 800129e:	d808      	bhi.n	80012b2 <SD_disk_initialize+0x12e>
 80012a0:	2100      	movs	r1, #0
 80012a2:	2069      	movs	r0, #105	; 0x69
 80012a4:	f7ff ff1c 	bl	80010e0 <SD_SendCmd>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d801      	bhi.n	80012b2 <SD_disk_initialize+0x12e>
 80012ae:	2302      	movs	r3, #2
 80012b0:	e000      	b.n	80012b4 <SD_disk_initialize+0x130>
 80012b2:	2301      	movs	r3, #1
 80012b4:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 80012b6:	7bbb      	ldrb	r3, [r7, #14]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d10e      	bne.n	80012da <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80012bc:	2100      	movs	r1, #0
 80012be:	2077      	movs	r0, #119	; 0x77
 80012c0:	f7ff ff0e 	bl	80010e0 <SD_SendCmd>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d80e      	bhi.n	80012e8 <SD_disk_initialize+0x164>
 80012ca:	2100      	movs	r1, #0
 80012cc:	2069      	movs	r0, #105	; 0x69
 80012ce:	f7ff ff07 	bl	80010e0 <SD_SendCmd>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80012d8:	e00d      	b.n	80012f6 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80012da:	2100      	movs	r1, #0
 80012dc:	2041      	movs	r0, #65	; 0x41
 80012de:	f7ff feff 	bl	80010e0 <SD_SendCmd>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <SD_disk_initialize+0x1cc>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1e1      	bne.n	80012b6 <SD_disk_initialize+0x132>
 80012f2:	e000      	b.n	80012f6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80012f4:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <SD_disk_initialize+0x1cc>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <SD_disk_initialize+0x18c>
 8001300:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001304:	2050      	movs	r0, #80	; 0x50
 8001306:	f7ff feeb 	bl	80010e0 <SD_SendCmd>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001314:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <SD_disk_initialize+0x1d0>)
 8001316:	7bbb      	ldrb	r3, [r7, #14]
 8001318:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800131a:	f7ff fd85 	bl	8000e28 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800131e:	f7ff fda9 	bl	8000e74 <SPI_RxByte>

  if (type)
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <SD_disk_initialize+0x1c8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f023 0301 	bic.w	r3, r3, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SD_disk_initialize+0x1c8>)
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e001      	b.n	800133e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800133a:	f7ff fe2f 	bl	8000f9c <SD_PowerOff>
  }

  return Stat;
 800133e:	4b03      	ldr	r3, [pc, #12]	; (800134c <SD_disk_initialize+0x1c8>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	b2db      	uxtb	r3, r3
}
 8001344:	4618      	mov	r0, r3
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	2000c061 	.word	0x2000c061
 8001354:	200000ac 	.word	0x200000ac

08001358 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <SD_disk_status+0x14>
    return STA_NOINIT;
 8001368:	2301      	movs	r3, #1
 800136a:	e002      	b.n	8001372 <SD_disk_status+0x1a>

  return Stat;
 800136c:	4b04      	ldr	r3, [pc, #16]	; (8001380 <SD_disk_status+0x28>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000000 	.word	0x20000000

08001384 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	603b      	str	r3, [r7, #0]
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <SD_disk_read+0x1c>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <SD_disk_read+0x20>
    return RES_PARERR;
 80013a0:	2304      	movs	r3, #4
 80013a2:	e051      	b.n	8001448 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 80013a4:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <SD_disk_read+0xcc>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e048      	b.n	8001448 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 80013b6:	4b27      	ldr	r3, [pc, #156]	; (8001454 <SD_disk_read+0xd0>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	f003 0304 	and.w	r3, r3, #4
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	607b      	str	r3, [r7, #4]

  SELECT();
 80013c8:	f7ff fd22 	bl	8000e10 <SELECT>

  if (count == 1)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d111      	bne.n	80013f6 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	2051      	movs	r0, #81	; 0x51
 80013d6:	f7ff fe83 	bl	80010e0 <SD_SendCmd>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d129      	bne.n	8001434 <SD_disk_read+0xb0>
 80013e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013e4:	68b8      	ldr	r0, [r7, #8]
 80013e6:	f7ff fdf1 	bl	8000fcc <SD_RxDataBlock>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d021      	beq.n	8001434 <SD_disk_read+0xb0>
      count = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	e01e      	b.n	8001434 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	2052      	movs	r0, #82	; 0x52
 80013fa:	f7ff fe71 	bl	80010e0 <SD_SendCmd>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d117      	bne.n	8001434 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001404:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001408:	68b8      	ldr	r0, [r7, #8]
 800140a:	f7ff fddf 	bl	8000fcc <SD_RxDataBlock>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d00a      	beq.n	800142a <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800141a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ed      	bne.n	8001404 <SD_disk_read+0x80>
 8001428:	e000      	b.n	800142c <SD_disk_read+0xa8>
          break;
 800142a:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 800142c:	2100      	movs	r1, #0
 800142e:	204c      	movs	r0, #76	; 0x4c
 8001430:	f7ff fe56 	bl	80010e0 <SD_SendCmd>
    }
  }

  DESELECT();
 8001434:	f7ff fcf8 	bl	8000e28 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001438:	f7ff fd1c 	bl	8000e74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	2b00      	cmp	r3, #0
 8001440:	bf14      	ite	ne
 8001442:	2301      	movne	r3, #1
 8001444:	2300      	moveq	r3, #0
 8001446:	b2db      	uxtb	r3, r3
}
 8001448:	4618      	mov	r0, r3
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	200000ac 	.word	0x200000ac

08001458 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	4603      	mov	r3, r0
 8001466:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <SD_disk_write+0x1c>
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <SD_disk_write+0x20>
    return RES_PARERR;
 8001474:	2304      	movs	r3, #4
 8001476:	e06b      	b.n	8001550 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <SD_disk_write+0x100>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b2db      	uxtb	r3, r3
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001486:	2303      	movs	r3, #3
 8001488:	e062      	b.n	8001550 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <SD_disk_write+0x100>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SD_disk_write+0x44>
    return RES_WRPRT;
 8001498:	2302      	movs	r3, #2
 800149a:	e059      	b.n	8001550 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 800149c:	4b2f      	ldr	r3, [pc, #188]	; (800155c <SD_disk_write+0x104>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	025b      	lsls	r3, r3, #9
 80014ac:	607b      	str	r3, [r7, #4]

  SELECT();
 80014ae:	f7ff fcaf 	bl	8000e10 <SELECT>

  if (count == 1)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d110      	bne.n	80014da <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	2058      	movs	r0, #88	; 0x58
 80014bc:	f7ff fe10 	bl	80010e0 <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d13a      	bne.n	800153c <SD_disk_write+0xe4>
 80014c6:	21fe      	movs	r1, #254	; 0xfe
 80014c8:	68b8      	ldr	r0, [r7, #8]
 80014ca:	f7ff fdb5 	bl	8001038 <SD_TxDataBlock>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d033      	beq.n	800153c <SD_disk_write+0xe4>
      count = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	e030      	b.n	800153c <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <SD_disk_write+0x104>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80014e6:	2100      	movs	r1, #0
 80014e8:	2077      	movs	r0, #119	; 0x77
 80014ea:	f7ff fdf9 	bl	80010e0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	2057      	movs	r0, #87	; 0x57
 80014f2:	f7ff fdf5 	bl	80010e0 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	2059      	movs	r0, #89	; 0x59
 80014fa:	f7ff fdf1 	bl	80010e0 <SD_SendCmd>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d11b      	bne.n	800153c <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001504:	21fc      	movs	r1, #252	; 0xfc
 8001506:	68b8      	ldr	r0, [r7, #8]
 8001508:	f7ff fd96 	bl	8001038 <SD_TxDataBlock>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d00a      	beq.n	8001528 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001518:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	3b01      	subs	r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1ee      	bne.n	8001504 <SD_disk_write+0xac>
 8001526:	e000      	b.n	800152a <SD_disk_write+0xd2>
          break;
 8001528:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 800152a:	21fd      	movs	r1, #253	; 0xfd
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff fd83 	bl	8001038 <SD_TxDataBlock>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d101      	bne.n	800153c <SD_disk_write+0xe4>
      {
        count = 1;
 8001538:	2301      	movs	r3, #1
 800153a:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 800153c:	f7ff fc74 	bl	8000e28 <DESELECT>
  SPI_RxByte();
 8001540:	f7ff fc98 	bl	8000e74 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	bf14      	ite	ne
 800154a:	2301      	movne	r3, #1
 800154c:	2300      	moveq	r3, #0
 800154e:	b2db      	uxtb	r3, r3
}
 8001550:	4618      	mov	r0, r3
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000000 	.word	0x20000000
 800155c:	200000ac 	.word	0x200000ac

08001560 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	603a      	str	r2, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	460b      	mov	r3, r1
 800156e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001574:	79fb      	ldrb	r3, [r7, #7]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 800157a:	2304      	movs	r3, #4
 800157c:	e117      	b.n	80017ae <SD_disk_ioctl+0x24e>

  res = RES_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001584:	79bb      	ldrb	r3, [r7, #6]
 8001586:	2b05      	cmp	r3, #5
 8001588:	d126      	bne.n	80015d8 <SD_disk_ioctl+0x78>
  {
    switch (*ptr)
 800158a:	6a3b      	ldr	r3, [r7, #32]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d00e      	beq.n	80015b0 <SD_disk_ioctl+0x50>
 8001592:	2b02      	cmp	r3, #2
 8001594:	d012      	beq.n	80015bc <SD_disk_ioctl+0x5c>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11a      	bne.n	80015d0 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 800159a:	f7ff fd0b 	bl	8000fb4 <SD_CheckPower>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 80015a4:	f7ff fcfa 	bl	8000f9c <SD_PowerOff>
      res = RES_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015ae:	e0fc      	b.n	80017aa <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 80015b0:	f7ff fca8 	bl	8000f04 <SD_PowerOn>
      res = RES_OK;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015ba:	e0f6      	b.n	80017aa <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	1c5c      	adds	r4, r3, #1
 80015c0:	f7ff fcf8 	bl	8000fb4 <SD_CheckPower>
 80015c4:	4603      	mov	r3, r0
 80015c6:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80015c8:	2300      	movs	r3, #0
 80015ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80015ce:	e0ec      	b.n	80017aa <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 80015d0:	2304      	movs	r3, #4
 80015d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80015d6:	e0e8      	b.n	80017aa <SD_disk_ioctl+0x24a>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 80015d8:	4b77      	ldr	r3, [pc, #476]	; (80017b8 <SD_disk_ioctl+0x258>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0e1      	b.n	80017ae <SD_disk_ioctl+0x24e>

    SELECT();
 80015ea:	f7ff fc11 	bl	8000e10 <SELECT>

    switch (ctrl)
 80015ee:	79bb      	ldrb	r3, [r7, #6]
 80015f0:	2b0d      	cmp	r3, #13
 80015f2:	f200 80cb 	bhi.w	800178c <SD_disk_ioctl+0x22c>
 80015f6:	a201      	add	r2, pc, #4	; (adr r2, 80015fc <SD_disk_ioctl+0x9c>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	080016f7 	.word	0x080016f7
 8001600:	08001635 	.word	0x08001635
 8001604:	080016e7 	.word	0x080016e7
 8001608:	0800178d 	.word	0x0800178d
 800160c:	0800178d 	.word	0x0800178d
 8001610:	0800178d 	.word	0x0800178d
 8001614:	0800178d 	.word	0x0800178d
 8001618:	0800178d 	.word	0x0800178d
 800161c:	0800178d 	.word	0x0800178d
 8001620:	0800178d 	.word	0x0800178d
 8001624:	0800178d 	.word	0x0800178d
 8001628:	08001709 	.word	0x08001709
 800162c:	0800172d 	.word	0x0800172d
 8001630:	08001751 	.word	0x08001751
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001634:	2100      	movs	r1, #0
 8001636:	2049      	movs	r0, #73	; 0x49
 8001638:	f7ff fd52 	bl	80010e0 <SD_SendCmd>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	f040 80a8 	bne.w	8001794 <SD_disk_ioctl+0x234>
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	2110      	movs	r1, #16
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fcbe 	bl	8000fcc <SD_RxDataBlock>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 809e 	beq.w	8001794 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1)
 8001658:	7b3b      	ldrb	r3, [r7, #12]
 800165a:	099b      	lsrs	r3, r3, #6
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10e      	bne.n	8001680 <SD_disk_ioctl+0x120>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001662:	7d7b      	ldrb	r3, [r7, #21]
 8001664:	b29a      	uxth	r2, r3
 8001666:	7d3b      	ldrb	r3, [r7, #20]
 8001668:	b29b      	uxth	r3, r3
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	4413      	add	r3, r2
 8001670:	b29b      	uxth	r3, r3
 8001672:	3301      	adds	r3, #1
 8001674:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001676:	8bfb      	ldrh	r3, [r7, #30]
 8001678:	029a      	lsls	r2, r3, #10
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e02e      	b.n	80016de <SD_disk_ioctl+0x17e>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001680:	7c7b      	ldrb	r3, [r7, #17]
 8001682:	f003 030f 	and.w	r3, r3, #15
 8001686:	b2da      	uxtb	r2, r3
 8001688:	7dbb      	ldrb	r3, [r7, #22]
 800168a:	09db      	lsrs	r3, r3, #7
 800168c:	b2db      	uxtb	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b2da      	uxtb	r2, r3
 8001692:	7d7b      	ldrb	r3, [r7, #21]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0306 	and.w	r3, r3, #6
 800169c:	b2db      	uxtb	r3, r3
 800169e:	4413      	add	r3, r2
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3302      	adds	r3, #2
 80016a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80016a8:	7d3b      	ldrb	r3, [r7, #20]
 80016aa:	099b      	lsrs	r3, r3, #6
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4413      	add	r3, r2
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	7cbb      	ldrb	r3, [r7, #18]
 80016be:	029b      	lsls	r3, r3, #10
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	4413      	add	r3, r2
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3301      	adds	r3, #1
 80016ce:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80016d0:	8bfa      	ldrh	r2, [r7, #30]
 80016d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80016d6:	3b09      	subs	r3, #9
 80016d8:	409a      	lsls	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 80016e4:	e056      	b.n	8001794 <SD_disk_ioctl+0x234>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ec:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80016f4:	e055      	b.n	80017a2 <SD_disk_ioctl+0x242>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80016f6:	f7ff fbe9 	bl	8000ecc <SD_ReadyWait>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2bff      	cmp	r3, #255	; 0xff
 80016fe:	d14b      	bne.n	8001798 <SD_disk_ioctl+0x238>
        res = RES_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001706:	e047      	b.n	8001798 <SD_disk_ioctl+0x238>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001708:	2100      	movs	r1, #0
 800170a:	2049      	movs	r0, #73	; 0x49
 800170c:	f7ff fce8 	bl	80010e0 <SD_SendCmd>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d142      	bne.n	800179c <SD_disk_ioctl+0x23c>
 8001716:	2110      	movs	r1, #16
 8001718:	6a38      	ldr	r0, [r7, #32]
 800171a:	f7ff fc57 	bl	8000fcc <SD_RxDataBlock>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d03b      	beq.n	800179c <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800172a:	e037      	b.n	800179c <SD_disk_ioctl+0x23c>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800172c:	2100      	movs	r1, #0
 800172e:	204a      	movs	r0, #74	; 0x4a
 8001730:	f7ff fcd6 	bl	80010e0 <SD_SendCmd>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d132      	bne.n	80017a0 <SD_disk_ioctl+0x240>
 800173a:	2110      	movs	r1, #16
 800173c:	6a38      	ldr	r0, [r7, #32]
 800173e:	f7ff fc45 	bl	8000fcc <SD_RxDataBlock>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d02b      	beq.n	80017a0 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800174e:	e027      	b.n	80017a0 <SD_disk_ioctl+0x240>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8001750:	2100      	movs	r1, #0
 8001752:	207a      	movs	r0, #122	; 0x7a
 8001754:	f7ff fcc4 	bl	80010e0 <SD_SendCmd>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d116      	bne.n	800178c <SD_disk_ioctl+0x22c>
      {
        for (n = 0; n < 4; n++)
 800175e:	2300      	movs	r3, #0
 8001760:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001764:	e00b      	b.n	800177e <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8001766:	6a3c      	ldr	r4, [r7, #32]
 8001768:	1c63      	adds	r3, r4, #1
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	f7ff fb82 	bl	8000e74 <SPI_RxByte>
 8001770:	4603      	mov	r3, r0
 8001772:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001774:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001778:	3301      	adds	r3, #1
 800177a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800177e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001782:	2b03      	cmp	r3, #3
 8001784:	d9ef      	bls.n	8001766 <SD_disk_ioctl+0x206>
        }

        res = RES_OK;
 8001786:	2300      	movs	r3, #0
 8001788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 800178c:	2304      	movs	r3, #4
 800178e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001792:	e006      	b.n	80017a2 <SD_disk_ioctl+0x242>
      break;
 8001794:	bf00      	nop
 8001796:	e004      	b.n	80017a2 <SD_disk_ioctl+0x242>
      break;
 8001798:	bf00      	nop
 800179a:	e002      	b.n	80017a2 <SD_disk_ioctl+0x242>
      break;
 800179c:	bf00      	nop
 800179e:	e000      	b.n	80017a2 <SD_disk_ioctl+0x242>
      break;
 80017a0:	bf00      	nop
    }

    DESELECT();
 80017a2:	f7ff fb41 	bl	8000e28 <DESELECT>
    SPI_RxByte();
 80017a6:	f7ff fb65 	bl	8000e74 <SPI_RxByte>
  }

  return res;
 80017aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	372c      	adds	r7, #44	; 0x2c
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd90      	pop	{r4, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000

080017bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_GPIO_Init+0xc0>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a28      	ldr	r2, [pc, #160]	; (800187c <MX_GPIO_Init+0xc0>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <MX_GPIO_Init+0xc0>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <MX_GPIO_Init+0xc0>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <MX_GPIO_Init+0xc0>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_GPIO_Init+0xc0>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	607b      	str	r3, [r7, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	603b      	str	r3, [r7, #0]
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_GPIO_Init+0xc0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a1a      	ldr	r2, [pc, #104]	; (800187c <MX_GPIO_Init+0xc0>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_GPIO_Init+0xc0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, clk_Pin|cs_Pin|data_in_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	21e0      	movs	r1, #224	; 0xe0
 800182a:	4815      	ldr	r0, [pc, #84]	; (8001880 <MX_GPIO_Init+0xc4>)
 800182c:	f002 fa86 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(cs_sd_card_GPIO_Port, cs_sd_card_Pin, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	2110      	movs	r1, #16
 8001834:	4813      	ldr	r0, [pc, #76]	; (8001884 <MX_GPIO_Init+0xc8>)
 8001836:	f002 fa81 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = clk_Pin|cs_Pin|data_in_Pin;
 800183a:	23e0      	movs	r3, #224	; 0xe0
 800183c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184a:	f107 030c 	add.w	r3, r7, #12
 800184e:	4619      	mov	r1, r3
 8001850:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_GPIO_Init+0xc4>)
 8001852:	f002 f8f1 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = cs_sd_card_Pin;
 8001856:	2310      	movs	r3, #16
 8001858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(cs_sd_card_GPIO_Port, &GPIO_InitStruct);
 8001866:	f107 030c 	add.w	r3, r7, #12
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <MX_GPIO_Init+0xc8>)
 800186e:	f002 f8e3 	bl	8003a38 <HAL_GPIO_Init>

}
 8001872:	bf00      	nop
 8001874:	3720      	adds	r7, #32
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400

08001888 <przepiszPlik>:
	}

	return counter-1;
}*/

void przepiszPlik(int dlugosc){
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
   for(int i=0;i<dlugosc;i++){
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e00b      	b.n	80018ae <przepiszPlik+0x26>
   tekst[i]=buffer[i];
 8001896:	4a0b      	ldr	r2, [pc, #44]	; (80018c4 <przepiszPlik+0x3c>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	4413      	add	r3, r2
 800189c:	7819      	ldrb	r1, [r3, #0]
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <przepiszPlik+0x40>)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	4413      	add	r3, r2
 80018a4:	460a      	mov	r2, r1
 80018a6:	701a      	strb	r2, [r3, #0]
   for(int i=0;i<dlugosc;i++){
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	dbef      	blt.n	8001896 <przepiszPlik+0xe>
   }

}
 80018b6:	bf00      	nop
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000a034 	.word	0x2000a034
 80018c8:	200002f8 	.word	0x200002f8

080018cc <otworzPlikZTekstem>:
//////////////////////////////////////////////////////
void otworzPlikZTekstem(){
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	  fresult = f_mount(&fs, "", 0);
 80018d0:	2200      	movs	r2, #0
 80018d2:	4911      	ldr	r1, [pc, #68]	; (8001918 <otworzPlikZTekstem+0x4c>)
 80018d4:	4811      	ldr	r0, [pc, #68]	; (800191c <otworzPlikZTekstem+0x50>)
 80018d6:	f005 fc8d 	bl	80071f4 <f_mount>
 80018da:	4603      	mov	r3, r0
 80018dc:	461a      	mov	r2, r3
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <otworzPlikZTekstem+0x54>)
 80018e0:	701a      	strb	r2, [r3, #0]
	  fresult = f_open(&fil, "tekst.txt", FA_READ);
 80018e2:	2201      	movs	r2, #1
 80018e4:	490f      	ldr	r1, [pc, #60]	; (8001924 <otworzPlikZTekstem+0x58>)
 80018e6:	4810      	ldr	r0, [pc, #64]	; (8001928 <otworzPlikZTekstem+0x5c>)
 80018e8:	f005 fcca 	bl	8007280 <f_open>
 80018ec:	4603      	mov	r3, r0
 80018ee:	461a      	mov	r2, r3
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <otworzPlikZTekstem+0x54>)
 80018f2:	701a      	strb	r2, [r3, #0]
	  f_gets(buffer,4096, &fil);
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <otworzPlikZTekstem+0x5c>)
 80018f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018fa:	480c      	ldr	r0, [pc, #48]	; (800192c <otworzPlikZTekstem+0x60>)
 80018fc:	f006 f893 	bl	8007a26 <f_gets>
	  f_close(&fil);
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <otworzPlikZTekstem+0x5c>)
 8001902:	f006 f866 	bl	80079d2 <f_close>

	 przepiszPlik(strlen(buffer));
 8001906:	4809      	ldr	r0, [pc, #36]	; (800192c <otworzPlikZTekstem+0x60>)
 8001908:	f7fe fc66 	bl	80001d8 <strlen>
 800190c:	4603      	mov	r3, r0
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ffba 	bl	8001888 <przepiszPlik>
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	08008e28 	.word	0x08008e28
 800191c:	20001298 	.word	0x20001298
 8001920:	2000afd4 	.word	0x2000afd4
 8001924:	08008e2c 	.word	0x08008e2c
 8001928:	2000afd8 	.word	0x2000afd8
 800192c:	2000a034 	.word	0x2000a034

08001930 <otworzPlikZParametrami>:
//////////////////////////////////////////////////////////
bool otworzPlikZParametrami(){
 8001930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
	  bool control=true;
 8001936:	2301      	movs	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
	  fresult = f_mount(&fs, "", 0);
 800193a:	2200      	movs	r2, #0
 800193c:	4955      	ldr	r1, [pc, #340]	; (8001a94 <otworzPlikZParametrami+0x164>)
 800193e:	4856      	ldr	r0, [pc, #344]	; (8001a98 <otworzPlikZParametrami+0x168>)
 8001940:	f005 fc58 	bl	80071f4 <f_mount>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	4b54      	ldr	r3, [pc, #336]	; (8001a9c <otworzPlikZParametrami+0x16c>)
 800194a:	701a      	strb	r2, [r3, #0]
	  fresult = f_open(&fil, "config.txt", FA_READ);
 800194c:	2201      	movs	r2, #1
 800194e:	4954      	ldr	r1, [pc, #336]	; (8001aa0 <otworzPlikZParametrami+0x170>)
 8001950:	4854      	ldr	r0, [pc, #336]	; (8001aa4 <otworzPlikZParametrami+0x174>)
 8001952:	f005 fc95 	bl	8007280 <f_open>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b50      	ldr	r3, [pc, #320]	; (8001a9c <otworzPlikZParametrami+0x16c>)
 800195c:	701a      	strb	r2, [r3, #0]
	  f_gets(buffer2,4096, &fil);
 800195e:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <otworzPlikZParametrami+0x174>)
 8001960:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001964:	4850      	ldr	r0, [pc, #320]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 8001966:	f006 f85e 	bl	8007a26 <f_gets>
	  f_close(&fil);
 800196a:	484e      	ldr	r0, [pc, #312]	; (8001aa4 <otworzPlikZParametrami+0x174>)
 800196c:	f006 f831 	bl	80079d2 <f_close>
	  szybkosc = (int)buffer2[14]-48;
 8001970:	4b4d      	ldr	r3, [pc, #308]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 8001972:	7b9b      	ldrb	r3, [r3, #14]
 8001974:	3b30      	subs	r3, #48	; 0x30
 8001976:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <otworzPlikZParametrami+0x17c>)
 8001978:	6013      	str	r3, [r2, #0]
	  if(szybkosc <1 || szybkosc>9){strcpy(tekst,"Blad pliku konfiguracyjnego, ustaw szybkosc przewijania z przedzialu <1,9>"); control=false;}
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <otworzPlikZParametrami+0x17c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	dd03      	ble.n	800198a <otworzPlikZParametrami+0x5a>
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <otworzPlikZParametrami+0x17c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2b09      	cmp	r3, #9
 8001988:	dd09      	ble.n	800199e <otworzPlikZParametrami+0x6e>
 800198a:	4a49      	ldr	r2, [pc, #292]	; (8001ab0 <otworzPlikZParametrami+0x180>)
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <otworzPlikZParametrami+0x184>)
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	234b      	movs	r3, #75	; 0x4b
 8001994:	461a      	mov	r2, r3
 8001996:	f006 f9cf 	bl	8007d38 <memcpy>
 800199a:	2300      	movs	r3, #0
 800199c:	71fb      	strb	r3, [r7, #7]
	  mode=(int)buffer2[5]-48;
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	3b30      	subs	r3, #48	; 0x30
 80019a4:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <otworzPlikZParametrami+0x188>)
 80019a6:	6013      	str	r3, [r2, #0]
	  if(mode<0 || mode>1){strcpy(tekst, "Blad pliku konfiguracyjnego, ustaw mode na 0 lub 1"); control=false;}
 80019a8:	4b43      	ldr	r3, [pc, #268]	; (8001ab8 <otworzPlikZParametrami+0x188>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db03      	blt.n	80019b8 <otworzPlikZParametrami+0x88>
 80019b0:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <otworzPlikZParametrami+0x188>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	dd19      	ble.n	80019ec <otworzPlikZParametrami+0xbc>
 80019b8:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <otworzPlikZParametrami+0x180>)
 80019ba:	4a40      	ldr	r2, [pc, #256]	; (8001abc <otworzPlikZParametrami+0x18c>)
 80019bc:	4614      	mov	r4, r2
 80019be:	469c      	mov	ip, r3
 80019c0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80019c4:	4665      	mov	r5, ip
 80019c6:	4626      	mov	r6, r4
 80019c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019ca:	6028      	str	r0, [r5, #0]
 80019cc:	6069      	str	r1, [r5, #4]
 80019ce:	60aa      	str	r2, [r5, #8]
 80019d0:	60eb      	str	r3, [r5, #12]
 80019d2:	3410      	adds	r4, #16
 80019d4:	f10c 0c10 	add.w	ip, ip, #16
 80019d8:	4574      	cmp	r4, lr
 80019da:	d1f3      	bne.n	80019c4 <otworzPlikZParametrami+0x94>
 80019dc:	4663      	mov	r3, ip
 80019de:	4622      	mov	r2, r4
 80019e0:	8811      	ldrh	r1, [r2, #0]
 80019e2:	7892      	ldrb	r2, [r2, #2]
 80019e4:	8019      	strh	r1, [r3, #0]
 80019e6:	709a      	strb	r2, [r3, #2]
 80019e8:	2300      	movs	r3, #0
 80019ea:	71fb      	strb	r3, [r7, #7]

	  ilosc_led= ((int)buffer2[29]-48)*10+(int)buffer2[30]-48;
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 80019ee:	7f5b      	ldrb	r3, [r3, #29]
 80019f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	461a      	mov	r2, r3
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 8001a00:	7f9b      	ldrb	r3, [r3, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	3b30      	subs	r3, #48	; 0x30
 8001a06:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <otworzPlikZParametrami+0x190>)
 8001a08:	6013      	str	r3, [r2, #0]
	  if(ilosc_led<1 ||ilosc_led>64){strcpy(tekst,"Blad pliku konfiguracyjnego, ustaw ilosc led z przedzialu (1,64>"); control=false;}
 8001a0a:	4b2d      	ldr	r3, [pc, #180]	; (8001ac0 <otworzPlikZParametrami+0x190>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dd03      	ble.n	8001a1a <otworzPlikZParametrami+0xea>
 8001a12:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <otworzPlikZParametrami+0x190>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b40      	cmp	r3, #64	; 0x40
 8001a18:	dd09      	ble.n	8001a2e <otworzPlikZParametrami+0xfe>
 8001a1a:	4a25      	ldr	r2, [pc, #148]	; (8001ab0 <otworzPlikZParametrami+0x180>)
 8001a1c:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <otworzPlikZParametrami+0x194>)
 8001a1e:	4610      	mov	r0, r2
 8001a20:	4619      	mov	r1, r3
 8001a22:	2341      	movs	r3, #65	; 0x41
 8001a24:	461a      	mov	r2, r3
 8001a26:	f006 f987 	bl	8007d38 <memcpy>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	71fb      	strb	r3, [r7, #7]

	  kontrast= ((int)buffer2[42]-48)*10+(int)buffer2[43]-48;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 8001a30:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001a34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <otworzPlikZParametrami+0x178>)
 8001a44:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a48:	4413      	add	r3, r2
 8001a4a:	3b30      	subs	r3, #48	; 0x30
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	; (8001ac8 <otworzPlikZParametrami+0x198>)
 8001a4e:	6013      	str	r3, [r2, #0]
	  	  if(kontrast<0 ||kontrast>15){strcpy(tekst,"Blad pliku konfiguracyjnego, ustaw kontrast z przedzialu <0,15>"); control=false;}
 8001a50:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <otworzPlikZParametrami+0x198>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	db03      	blt.n	8001a60 <otworzPlikZParametrami+0x130>
 8001a58:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <otworzPlikZParametrami+0x198>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b0f      	cmp	r3, #15
 8001a5e:	dd13      	ble.n	8001a88 <otworzPlikZParametrami+0x158>
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <otworzPlikZParametrami+0x180>)
 8001a62:	4a1a      	ldr	r2, [pc, #104]	; (8001acc <otworzPlikZParametrami+0x19c>)
 8001a64:	4614      	mov	r4, r2
 8001a66:	469c      	mov	ip, r3
 8001a68:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001a6c:	4665      	mov	r5, ip
 8001a6e:	4626      	mov	r6, r4
 8001a70:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a72:	6028      	str	r0, [r5, #0]
 8001a74:	6069      	str	r1, [r5, #4]
 8001a76:	60aa      	str	r2, [r5, #8]
 8001a78:	60eb      	str	r3, [r5, #12]
 8001a7a:	3410      	adds	r4, #16
 8001a7c:	f10c 0c10 	add.w	ip, ip, #16
 8001a80:	4574      	cmp	r4, lr
 8001a82:	d1f3      	bne.n	8001a6c <otworzPlikZParametrami+0x13c>
 8001a84:	2300      	movs	r3, #0
 8001a86:	71fb      	strb	r3, [r7, #7]
return control;
 8001a88:	79fb      	ldrb	r3, [r7, #7]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a92:	bf00      	nop
 8001a94:	08008e28 	.word	0x08008e28
 8001a98:	20001298 	.word	0x20001298
 8001a9c:	2000afd4 	.word	0x2000afd4
 8001aa0:	08008e38 	.word	0x08008e38
 8001aa4:	2000afd8 	.word	0x2000afd8
 8001aa8:	200022d0 	.word	0x200022d0
 8001aac:	200000b4 	.word	0x200000b4
 8001ab0:	200002f8 	.word	0x200002f8
 8001ab4:	08008e44 	.word	0x08008e44
 8001ab8:	20000004 	.word	0x20000004
 8001abc:	08008e90 	.word	0x08008e90
 8001ac0:	200000b0 	.word	0x200000b0
 8001ac4:	08008ec4 	.word	0x08008ec4
 8001ac8:	200000bc 	.word	0x200000bc
 8001acc:	08008f08 	.word	0x08008f08

08001ad0 <wypelnijGlownaTablice>:
//////////////////////////////////////////////////////
void wypelnijGlownaTablice(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
for(int i=0; i<N; i++){
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	e016      	b.n	8001b0a <wypelnijGlownaTablice+0x3a>
	for(int j=0; j<8; j++){
 8001adc:	2300      	movs	r3, #0
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	e00d      	b.n	8001afe <wypelnijGlownaTablice+0x2e>
	tablicaGlowna[j][i]= 2;
 8001ae2:	4a0f      	ldr	r2, [pc, #60]	; (8001b20 <wypelnijGlownaTablice+0x50>)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001aea:	fb01 f303 	mul.w	r3, r1, r3
 8001aee:	441a      	add	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4413      	add	r3, r2
 8001af4:	2202      	movs	r2, #2
 8001af6:	701a      	strb	r2, [r3, #0]
	for(int j=0; j<8; j++){
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	603b      	str	r3, [r7, #0]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	2b07      	cmp	r3, #7
 8001b02:	ddee      	ble.n	8001ae2 <wypelnijGlownaTablice+0x12>
for(int i=0; i<N; i++){
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	607b      	str	r3, [r7, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b10:	dbe4      	blt.n	8001adc <wypelnijGlownaTablice+0xc>
	}
}
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20002334 	.word	0x20002334

08001b24 <dlugoscTablicyGlownej>:
/////////////////////////////////////////////////////
int dlugoscTablicyGlownej(){
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
	int counter=0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]

	for(int i=0;i<N; i++){
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	e00e      	b.n	8001b52 <dlugoscTablicyGlownej+0x2e>
		if(tablicaGlowna[7][i]!=2){counter++;}
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <dlugoscTablicyGlownej+0x44>)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 43da 	add.w	r3, r3, #27904	; 0x6d00
 8001b3e:	3360      	adds	r3, #96	; 0x60
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d002      	beq.n	8001b4c <dlugoscTablicyGlownej+0x28>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	607b      	str	r3, [r7, #4]
	for(int i=0;i<N; i++){
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b58:	dbec      	blt.n	8001b34 <dlugoscTablicyGlownej+0x10>
	}
	return counter;
 8001b5a:	687b      	ldr	r3, [r7, #4]
	}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	20002334 	.word	0x20002334

08001b6c <dodajMacierzLitery>:

///////////////////////////////////////////////////////
void dodajMacierzLitery(uint8_t macierz[8][dlugoscZnaku]){
 8001b6c:	b5b0      	push	{r4, r5, r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <dodajMacierzLitery+0x90>)
 8001b76:	681d      	ldr	r5, [r3, #0]
 8001b78:	1e6b      	subs	r3, r5, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	462b      	mov	r3, r5
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	f04f 0300 	mov.w	r3, #0
 8001b88:	f04f 0400 	mov.w	r4, #0
 8001b8c:	00d4      	lsls	r4, r2, #3
 8001b8e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001b92:	00cb      	lsls	r3, r1, #3
int aktualnaDlugosc = dlugoscTablicyGlownej();  //dlugosc tablicy głownej przed dodaniem kolejnego znaku
 8001b94:	f7ff ffc6 	bl	8001b24 <dlugoscTablicyGlownej>
 8001b98:	6138      	str	r0, [r7, #16]
for(int j=0;j<dlugoscZnaku;j++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61bb      	str	r3, [r7, #24]
 8001b9e:	e023      	b.n	8001be8 <dodajMacierzLitery+0x7c>
	for(int k=0; k<8; k++){
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]
 8001ba4:	e01a      	b.n	8001bdc <dodajMacierzLitery+0x70>
		int len=aktualnaDlugosc+j;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
	tablicaGlowna[k][len]=macierz[k][j];
 8001bae:	462a      	mov	r2, r5
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	fb03 f302 	mul.w	r3, r3, r2
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	441a      	add	r2, r3
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	7818      	ldrb	r0, [r3, #0]
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <dodajMacierzLitery+0x94>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001bc8:	fb01 f303 	mul.w	r3, r1, r3
 8001bcc:	441a      	add	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	701a      	strb	r2, [r3, #0]
	for(int k=0; k<8; k++){
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	dde1      	ble.n	8001ba6 <dodajMacierzLitery+0x3a>
for(int j=0;j<dlugoscZnaku;j++){
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	4b04      	ldr	r3, [pc, #16]	; (8001bfc <dodajMacierzLitery+0x90>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbd6      	blt.n	8001ba0 <dodajMacierzLitery+0x34>
	}
}
}
 8001bf2:	bf00      	nop
 8001bf4:	3720      	adds	r7, #32
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	200000b8 	.word	0x200000b8
 8001c00:	20002334 	.word	0x20002334

08001c04 <KonwertujTekst>:
///////////////////////////////////////////////////

void KonwertujTekst(int dlugosc)
{
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	f6ad 3d38 	subw	sp, sp, #2872	; 0xb38
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	6018      	str	r0, [r3, #0]
	uint8_t literaProcent[8][7]={
 8001c10:	4bea      	ldr	r3, [pc, #936]	; (8001fbc <KonwertujTekst+0x3b8>)
 8001c12:	f607 24fc 	addw	r4, r7, #2812	; 0xafc
 8001c16:	461d      	mov	r5, r3
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c28:	e884 0003 	stmia.w	r4, {r0, r1}
			{0,1,0,0,1,0,0},
			{1,0,0,1,0,1,0},
			{0,0,0,0,1,0,0}
	};

	uint8_t literaKropka[8][3]={
 8001c2c:	f607 23e4 	addw	r3, r7, #2788	; 0xae4
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 3af6 	strb.w	r3, [r7, #2806]	; 0xaf6
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 3af7 	strb.w	r3, [r7, #2807]	; 0xaf7
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	f887 3af9 	strb.w	r3, [r7, #2809]	; 0xaf9
 8001c50:	2301      	movs	r3, #1
 8001c52:	f887 3afa 	strb.w	r3, [r7, #2810]	; 0xafa
			{0,0,0},
			{1,1,0},
			{1,1,0}
	};

	uint8_t literaKreskaPionowa[8][2]={
 8001c56:	4bda      	ldr	r3, [pc, #872]	; (8001fc0 <KonwertujTekst+0x3bc>)
 8001c58:	f607 24d4 	addw	r4, r7, #2772	; 0xad4
 8001c5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0},
			{1,0},
			{1,0}
	};

	uint8_t literaWykrzyknik[8][2]={
 8001c62:	4bd8      	ldr	r3, [pc, #864]	; (8001fc4 <KonwertujTekst+0x3c0>)
 8001c64:	f607 24c4 	addw	r4, r7, #2756	; 0xac4
 8001c68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0},
			{1,0},
			{0,0}
	};

	uint8_t literaZnakZapytania[8][6]={
 8001c6e:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8001c72:	2230      	movs	r2, #48	; 0x30
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 f869 	bl	8007d4e <memset>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	f887 3a95 	strb.w	r3, [r7, #2709]	; 0xa95
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 3a96 	strb.w	r3, [r7, #2710]	; 0xa96
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 3a97 	strb.w	r3, [r7, #2711]	; 0xa97
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f887 3a9a 	strb.w	r3, [r7, #2714]	; 0xa9a
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3a9e 	strb.w	r3, [r7, #2718]	; 0xa9e
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3aa4 	strb.w	r3, [r7, #2724]	; 0xaa4
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3aa9 	strb.w	r3, [r7, #2729]	; 0xaa9
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	f887 3aae 	strb.w	r3, [r7, #2734]	; 0xaae
 8001cac:	2301      	movs	r3, #1
 8001cae:	f887 3ab4 	strb.w	r3, [r7, #2740]	; 0xab4
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f887 3ac0 	strb.w	r3, [r7, #2752]	; 0xac0
			{0,0,1,0,0,0},
			{0,0,0,0,0,0},
			{0,0,1,0,0,0}
	};

	uint8_t literaPrzecinek[8][3]={
 8001cb8:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
 8001cc8:	615a      	str	r2, [r3, #20]
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3a8b 	strb.w	r3, [r7, #2699]	; 0xa8b
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	f887 3a8f 	strb.w	r3, [r7, #2703]	; 0xa8f
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f887 3a92 	strb.w	r3, [r7, #2706]	; 0xa92
			{0,1,0},
			{0,1,0}
	};


	uint8_t literaDwukropek[8][3]={
 8001cdc:	4bba      	ldr	r3, [pc, #744]	; (8001fc8 <KonwertujTekst+0x3c4>)
 8001cde:	f607 2464 	addw	r4, r7, #2660	; 0xa64
 8001ce2:	461d      	mov	r5, r3
 8001ce4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ce8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cec:	e884 0003 	stmia.w	r4, {r0, r1}
			{1,1,0},
			{1,1,0}
	};


	uint8_t literaApostrof[8][3]={
 8001cf0:	f607 234c 	addw	r3, r7, #2636	; 0xa4c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
 8001d00:	615a      	str	r2, [r3, #20]
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3a4d 	strb.w	r3, [r7, #2637]	; 0xa4d
 8001d08:	2301      	movs	r3, #1
 8001d0a:	f887 3a4f 	strb.w	r3, [r7, #2639]	; 0xa4f
			{0,0,0},
			{0,0,0},
			{0,0,0}
	};

	uint8_t literaSlash[8][6]={
 8001d0e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d12:	4618      	mov	r0, r3
 8001d14:	2330      	movs	r3, #48	; 0x30
 8001d16:	461a      	mov	r2, r3
 8001d18:	2100      	movs	r1, #0
 8001d1a:	f006 f818 	bl	8007d4e <memset>
 8001d1e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d22:	2201      	movs	r2, #1
 8001d24:	711a      	strb	r2, [r3, #4]
 8001d26:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	729a      	strb	r2, [r3, #10]
 8001d2e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d32:	2201      	movs	r2, #1
 8001d34:	73da      	strb	r2, [r3, #15]
 8001d36:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	755a      	strb	r2, [r3, #21]
 8001d3e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d42:	2201      	movs	r2, #1
 8001d44:	769a      	strb	r2, [r3, #26]
 8001d46:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	77da      	strb	r2, [r3, #31]
 8001d4e:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 8001d58:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			{0,1,0,0,0,0},
			{0,1,0,0,0,0},
			{1,0,0,0,0,0}
	};

	uint8_t literaBackSlash[8][6]={
 8001d62:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d66:	4618      	mov	r0, r3
 8001d68:	2330      	movs	r3, #48	; 0x30
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	f005 ffee 	bl	8007d4e <memset>
 8001d72:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d76:	2201      	movs	r2, #1
 8001d78:	701a      	strb	r2, [r3, #0]
 8001d7a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d7e:	2201      	movs	r2, #1
 8001d80:	719a      	strb	r2, [r3, #6]
 8001d82:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d86:	2201      	movs	r2, #1
 8001d88:	735a      	strb	r2, [r3, #13]
 8001d8a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d8e:	2201      	movs	r2, #1
 8001d90:	74da      	strb	r2, [r3, #19]
 8001d92:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d96:	2201      	movs	r2, #1
 8001d98:	769a      	strb	r2, [r3, #26]
 8001d9a:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001da4:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001da8:	2201      	movs	r2, #1
 8001daa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8001dae:	f607 13ec 	addw	r3, r7, #2540	; 0x9ec
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			{0,0,0,1,0,0},
			{0,0,0,1,0,0},
			{0,0,0,0,1,0}
	};

	uint8_t literaRownaSie[8][6]={
 8001db8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	2330      	movs	r3, #48	; 0x30
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	f005 ffc3 	bl	8007d4e <memset>
 8001dc8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001dcc:	2201      	movs	r2, #1
 8001dce:	731a      	strb	r2, [r3, #12]
 8001dd0:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	735a      	strb	r2, [r3, #13]
 8001dd8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001ddc:	2201      	movs	r2, #1
 8001dde:	739a      	strb	r2, [r3, #14]
 8001de0:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001de4:	2201      	movs	r2, #1
 8001de6:	73da      	strb	r2, [r3, #15]
 8001de8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001dec:	2201      	movs	r2, #1
 8001dee:	741a      	strb	r2, [r3, #16]
 8001df0:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001df4:	2201      	movs	r2, #1
 8001df6:	779a      	strb	r2, [r3, #30]
 8001df8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	77da      	strb	r2, [r3, #31]
 8001e00:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 2020 	strb.w	r2, [r3, #32]
 8001e0a:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8001e14:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			{1,1,1,1,1,0},
			{0,0,0,0,0,0},
			{0,0,0,0,0,0}
	};

	uint8_t literaPlus[8][6]={
 8001e1e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e22:	4618      	mov	r0, r3
 8001e24:	2330      	movs	r3, #48	; 0x30
 8001e26:	461a      	mov	r2, r3
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f005 ff90 	bl	8007d4e <memset>
 8001e2e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e32:	2201      	movs	r2, #1
 8001e34:	739a      	strb	r2, [r3, #14]
 8001e36:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	751a      	strb	r2, [r3, #20]
 8001e3e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e42:	2201      	movs	r2, #1
 8001e44:	761a      	strb	r2, [r3, #24]
 8001e46:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	765a      	strb	r2, [r3, #25]
 8001e4e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e52:	2201      	movs	r2, #1
 8001e54:	769a      	strb	r2, [r3, #26]
 8001e56:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	76da      	strb	r2, [r3, #27]
 8001e5e:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e62:	2201      	movs	r2, #1
 8001e64:	771a      	strb	r2, [r3, #28]
 8001e66:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2020 	strb.w	r2, [r3, #32]
 8001e70:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8001e74:	2201      	movs	r2, #1
 8001e76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			{1,1,1,1,1,0},
			{0,0,1,0,0,0},
			{0,0,1,0,0,0},
			{0,0,0,0,0,0}
	};
	uint8_t literaMinus[8][6]={
 8001e7a:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001e7e:	4618      	mov	r0, r3
 8001e80:	2330      	movs	r3, #48	; 0x30
 8001e82:	461a      	mov	r2, r3
 8001e84:	2100      	movs	r1, #0
 8001e86:	f005 ff62 	bl	8007d4e <memset>
 8001e8a:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001e8e:	2201      	movs	r2, #1
 8001e90:	761a      	strb	r2, [r3, #24]
 8001e92:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001e96:	2201      	movs	r2, #1
 8001e98:	765a      	strb	r2, [r3, #25]
 8001e9a:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	769a      	strb	r2, [r3, #26]
 8001ea2:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	76da      	strb	r2, [r3, #27]
 8001eaa:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8001eae:	2201      	movs	r2, #1
 8001eb0:	771a      	strb	r2, [r3, #28]
			{1,1,1,1,1,0},
			{0,0,0,0,0,0},
			{0,0,0,0,0,0},
			{0,0,0,0,0,0}
	};
	uint8_t literaPodloga[8][6]={
 8001eb2:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	2330      	movs	r3, #48	; 0x30
 8001eba:	461a      	mov	r2, r3
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f005 ff46 	bl	8007d4e <memset>
 8001ec2:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8001ecc:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8001ed6:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001ee0:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8001eea:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			{0,0,0,0,0,0},
			{1,1,1,1,1,0}
	};


	uint8_t literaWiekszeOd[8][6]={
 8001ef4:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001ef8:	4618      	mov	r0, r3
 8001efa:	2330      	movs	r3, #48	; 0x30
 8001efc:	461a      	mov	r2, r3
 8001efe:	2100      	movs	r1, #0
 8001f00:	f005 ff25 	bl	8007d4e <memset>
 8001f04:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f08:	2201      	movs	r2, #1
 8001f0a:	719a      	strb	r2, [r3, #6]
 8001f0c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f10:	2201      	movs	r2, #1
 8001f12:	735a      	strb	r2, [r3, #13]
 8001f14:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f18:	2201      	movs	r2, #1
 8001f1a:	739a      	strb	r2, [r3, #14]
 8001f1c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f20:	2201      	movs	r2, #1
 8001f22:	755a      	strb	r2, [r3, #21]
 8001f24:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f28:	2201      	movs	r2, #1
 8001f2a:	759a      	strb	r2, [r3, #22]
 8001f2c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f30:	2201      	movs	r2, #1
 8001f32:	765a      	strb	r2, [r3, #25]
 8001f34:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f38:	2201      	movs	r2, #1
 8001f3a:	769a      	strb	r2, [r3, #26]
 8001f3c:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8001f40:	2201      	movs	r2, #1
 8001f42:	779a      	strb	r2, [r3, #30]
			{1,0,0,0,0,0},
			{0,0,0,0,0,0},
			{0,0,0,0,0,0}
	};

	uint8_t literaMniejszeOd[8][6]={
 8001f44:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f48:	4618      	mov	r0, r3
 8001f4a:	2330      	movs	r3, #48	; 0x30
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	2100      	movs	r1, #0
 8001f50:	f005 fefd 	bl	8007d4e <memset>
 8001f54:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f58:	2201      	movs	r2, #1
 8001f5a:	729a      	strb	r2, [r3, #10]
 8001f5c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f60:	2201      	movs	r2, #1
 8001f62:	739a      	strb	r2, [r3, #14]
 8001f64:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f68:	2201      	movs	r2, #1
 8001f6a:	73da      	strb	r2, [r3, #15]
 8001f6c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f70:	2201      	movs	r2, #1
 8001f72:	749a      	strb	r2, [r3, #18]
 8001f74:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f78:	2201      	movs	r2, #1
 8001f7a:	74da      	strb	r2, [r3, #19]
 8001f7c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f80:	2201      	movs	r2, #1
 8001f82:	769a      	strb	r2, [r3, #26]
 8001f84:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f88:	2201      	movs	r2, #1
 8001f8a:	76da      	strb	r2, [r3, #27]
 8001f8c:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			{0,0,0,0,1,0},
			{0,0,0,0,0,0},
			{0,0,0,0,0,0}
	};

	uint8_t literaNawiasLewy[8][4]={
 8001f96:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <KonwertujTekst+0x3c8>)
 8001f9c:	461c      	mov	r4, r3
 8001f9e:	4615      	mov	r5, r2
 8001fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0},
			{0,1,0,0},
			{0,0,1,0}
	};

	uint8_t literaNawiasPrawy[8][4]={
 8001fac:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8001fb0:	4a07      	ldr	r2, [pc, #28]	; (8001fd0 <KonwertujTekst+0x3cc>)
 8001fb2:	461c      	mov	r4, r3
 8001fb4:	4615      	mov	r5, r2
 8001fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fba:	e00b      	b.n	8001fd4 <KonwertujTekst+0x3d0>
 8001fbc:	08008f48 	.word	0x08008f48
 8001fc0:	08008f80 	.word	0x08008f80
 8001fc4:	08008f90 	.word	0x08008f90
 8001fc8:	08008fa0 	.word	0x08008fa0
 8001fcc:	08008fb8 	.word	0x08008fb8
 8001fd0:	08008fd8 	.word	0x08008fd8
 8001fd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0},
			{0,1,0,0},
			{1,0,0,0}
	};

	uint8_t litera0[8][6]={
 8001fdc:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8001fe0:	4abe      	ldr	r2, [pc, #760]	; (80022dc <KonwertujTekst+0x6d8>)
 8001fe2:	461c      	mov	r4, r3
 8001fe4:	4615      	mov	r5, r2
 8001fe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ff2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t litera1[8][6]={
 8001ff6:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	2330      	movs	r3, #48	; 0x30
 8001ffe:	461a      	mov	r2, r3
 8002000:	2100      	movs	r1, #0
 8002002:	f005 fea4 	bl	8007d4e <memset>
 8002006:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800200a:	2201      	movs	r2, #1
 800200c:	709a      	strb	r2, [r3, #2]
 800200e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002012:	2201      	movs	r2, #1
 8002014:	71da      	strb	r2, [r3, #7]
 8002016:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800201a:	2201      	movs	r2, #1
 800201c:	721a      	strb	r2, [r3, #8]
 800201e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002022:	2201      	movs	r2, #1
 8002024:	731a      	strb	r2, [r3, #12]
 8002026:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800202a:	2201      	movs	r2, #1
 800202c:	739a      	strb	r2, [r3, #14]
 800202e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002032:	2201      	movs	r2, #1
 8002034:	751a      	strb	r2, [r3, #20]
 8002036:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800203a:	2201      	movs	r2, #1
 800203c:	769a      	strb	r2, [r3, #26]
 800203e:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002042:	2201      	movs	r2, #1
 8002044:	f883 2020 	strb.w	r2, [r3, #32]
 8002048:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 8002052:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002056:	2201      	movs	r2, #1
 8002058:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			{0,0,1,0,0,0},
			{0,0,1,0,0,0},
			{0,0,1,0,0,0}
	};

	uint8_t litera2[8][6]={
 800205c:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 8002060:	4a9f      	ldr	r2, [pc, #636]	; (80022e0 <KonwertujTekst+0x6dc>)
 8002062:	461c      	mov	r4, r3
 8002064:	4615      	mov	r5, r2
 8002066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800206c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800206e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002072:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,1,0,0,0,0},
			{1,0,0,0,0,0},
			{1,1,1,1,1,0}
	};

	uint8_t litera3[8][6]={
 8002076:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 800207a:	4a9a      	ldr	r2, [pc, #616]	; (80022e4 <KonwertujTekst+0x6e0>)
 800207c:	461c      	mov	r4, r3
 800207e:	4615      	mov	r5, r2
 8002080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002088:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800208c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,0,1,0},
			{0,0,0,0,1,0},
			{1,1,1,1,0,0}
	};

	uint8_t litera4[8][6]={
 8002090:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 8002094:	4a94      	ldr	r2, [pc, #592]	; (80022e8 <KonwertujTekst+0x6e4>)
 8002096:	461c      	mov	r4, r3
 8002098:	4615      	mov	r5, r2
 800209a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800209c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800209e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,1,0,0},
			{0,0,0,1,0,0},
			{0,0,0,1,0,0}
	};

	uint8_t litera5[8][6]={
 80020aa:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 80020ae:	4a8f      	ldr	r2, [pc, #572]	; (80022ec <KonwertujTekst+0x6e8>)
 80020b0:	461c      	mov	r4, r3
 80020b2:	4615      	mov	r5, r2
 80020b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t litera6[8][6]={
 80020c4:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 80020c8:	4a89      	ldr	r2, [pc, #548]	; (80022f0 <KonwertujTekst+0x6ec>)
 80020ca:	461c      	mov	r4, r3
 80020cc:	4615      	mov	r5, r2
 80020ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t litera7[8][6]={
 80020de:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 80020e2:	4a84      	ldr	r2, [pc, #528]	; (80022f4 <KonwertujTekst+0x6f0>)
 80020e4:	461c      	mov	r4, r3
 80020e6:	4615      	mov	r5, r2
 80020e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80020f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,1,0,0,0,0},
			{0,1,0,0,0,0}
	};

	uint8_t litera8[8][6]={
 80020f8:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 80020fc:	4a7e      	ldr	r2, [pc, #504]	; (80022f8 <KonwertujTekst+0x6f4>)
 80020fe:	461c      	mov	r4, r3
 8002100:	4615      	mov	r5, r2
 8002102:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002106:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800210a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800210e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t litera9[8][6]={
 8002112:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 8002116:	4a79      	ldr	r2, [pc, #484]	; (80022fc <KonwertujTekst+0x6f8>)
 8002118:	461c      	mov	r4, r3
 800211a:	4615      	mov	r5, r2
 800211c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002124:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002128:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};


	uint8_t literaA[8][6]={
 800212c:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 8002130:	4a73      	ldr	r2, [pc, #460]	; (8002300 <KonwertujTekst+0x6fc>)
 8002132:	461c      	mov	r4, r3
 8002134:	4615      	mov	r5, r2
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002142:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1,0,0,0,1,0},
		{1,0,0,0,1,0},
		{1,0,0,0,1,0}
	};

	uint8_t literaAl[8][6]={
 8002146:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <KonwertujTekst+0x700>)
 800214c:	461c      	mov	r4, r3
 800214e:	4615      	mov	r5, r2
 8002150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002158:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800215c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		{1,0,0,1,1,1},
		{1,0,1,0,1,0},
		{0,0,1,0,0,0}
	};

	uint8_t literaB[8][6]={
 8002160:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8002164:	4a68      	ldr	r2, [pc, #416]	; (8002308 <KonwertujTekst+0x704>)
 8002166:	461c      	mov	r4, r3
 8002168:	4615      	mov	r5, r2
 800216a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800216c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800216e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002170:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002172:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002176:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{1,1,1,1,0,0}
	};

	uint8_t literaC[8][6]={
 800217a:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 800217e:	4a63      	ldr	r2, [pc, #396]	; (800230c <KonwertujTekst+0x708>)
 8002180:	461c      	mov	r4, r3
 8002182:	4615      	mov	r5, r2
 8002184:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002186:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002190:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{0,1,1,1,1,0}
	};

	uint8_t literaCi[8][6]={
 8002194:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8002198:	4a5d      	ldr	r2, [pc, #372]	; (8002310 <KonwertujTekst+0x70c>)
 800219a:	461c      	mov	r4, r3
 800219c:	4615      	mov	r5, r2
 800219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{0,1,1,1,1,0}
	};

	uint8_t literaD[8][6]={
 80021ae:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80021b2:	4a58      	ldr	r2, [pc, #352]	; (8002314 <KonwertujTekst+0x710>)
 80021b4:	461c      	mov	r4, r3
 80021b6:	4615      	mov	r5, r2
 80021b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,1,0,0},
			{1,1,1,0,0,0}
	};

	uint8_t literaE[8][6]={
 80021c8:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80021cc:	4a52      	ldr	r2, [pc, #328]	; (8002318 <KonwertujTekst+0x714>)
 80021ce:	461c      	mov	r4, r3
 80021d0:	4615      	mov	r5, r2
 80021d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{1,1,1,1,1,0}
	};

	uint8_t literaEE[8][6]={
 80021e2:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 80021e6:	4a4d      	ldr	r2, [pc, #308]	; (800231c <KonwertujTekst+0x718>)
 80021e8:	461c      	mov	r4, r3
 80021ea:	4615      	mov	r5, r2
 80021ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80021f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,1,1,1,1,0},
			{0,0,1,0,0,0}
	};

	uint8_t literaF[8][6]={
 80021fc:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8002200:	4a47      	ldr	r2, [pc, #284]	; (8002320 <KonwertujTekst+0x71c>)
 8002202:	461c      	mov	r4, r3
 8002204:	4615      	mov	r5, r2
 8002206:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002208:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002212:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{1,0,0,0,0,0}
	};

	uint8_t literaG[8][6]={
 8002216:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 800221a:	4a42      	ldr	r2, [pc, #264]	; (8002324 <KonwertujTekst+0x720>)
 800221c:	461c      	mov	r4, r3
 800221e:	4615      	mov	r5, r2
 8002220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002228:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800222c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,1,0}
	};

	uint8_t literaH[8][6]={
 8002230:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8002234:	4a3c      	ldr	r2, [pc, #240]	; (8002328 <KonwertujTekst+0x724>)
 8002236:	461c      	mov	r4, r3
 8002238:	4615      	mov	r5, r2
 800223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002242:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002246:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaI[8][4]={
 800224a:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 800224e:	4a37      	ldr	r2, [pc, #220]	; (800232c <KonwertujTekst+0x728>)
 8002250:	461c      	mov	r4, r3
 8002252:	4615      	mov	r5, r2
 8002254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002258:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800225c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,1,0,0},
			{0,1,0,0},
			{1,1,1,0}
	};

	uint8_t literaJ[8][6]={
 8002260:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8002264:	4a32      	ldr	r2, [pc, #200]	; (8002330 <KonwertujTekst+0x72c>)
 8002266:	461c      	mov	r4, r3
 8002268:	4615      	mov	r5, r2
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002272:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t literaK[8][6]={
 800227a:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 800227e:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <KonwertujTekst+0x730>)
 8002280:	461c      	mov	r4, r3
 8002282:	4615      	mov	r5, r2
 8002284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800228c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,1,0,0},
			{1,0,0,0,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaL[8][6]={
 8002294:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002298:	4a27      	ldr	r2, [pc, #156]	; (8002338 <KonwertujTekst+0x734>)
 800229a:	461c      	mov	r4, r3
 800229c:	4615      	mov	r5, r2
 800229e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{1,1,1,1,1,0}
	};

	uint8_t literaEl[8][6]={
 80022ae:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80022b2:	4a22      	ldr	r2, [pc, #136]	; (800233c <KonwertujTekst+0x738>)
 80022b4:	461c      	mov	r4, r3
 80022b6:	4615      	mov	r5, r2
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,1,0,0,0,0},
			{0,1,0,0,0,0},
			{0,1,1,1,1,0}
	};

	uint8_t literaM[8][6]={
 80022c8:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <KonwertujTekst+0x73c>)
 80022ce:	461c      	mov	r4, r3
 80022d0:	4615      	mov	r5, r2
 80022d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022d8:	e034      	b.n	8002344 <KonwertujTekst+0x740>
 80022da:	bf00      	nop
 80022dc:	08008ff8 	.word	0x08008ff8
 80022e0:	08009028 	.word	0x08009028
 80022e4:	08009058 	.word	0x08009058
 80022e8:	08009088 	.word	0x08009088
 80022ec:	080090b8 	.word	0x080090b8
 80022f0:	080090e8 	.word	0x080090e8
 80022f4:	08009118 	.word	0x08009118
 80022f8:	08009148 	.word	0x08009148
 80022fc:	08009178 	.word	0x08009178
 8002300:	080091a8 	.word	0x080091a8
 8002304:	080091d8 	.word	0x080091d8
 8002308:	08009208 	.word	0x08009208
 800230c:	08009238 	.word	0x08009238
 8002310:	08009268 	.word	0x08009268
 8002314:	08009298 	.word	0x08009298
 8002318:	080092c8 	.word	0x080092c8
 800231c:	080092f8 	.word	0x080092f8
 8002320:	08009328 	.word	0x08009328
 8002324:	08009358 	.word	0x08009358
 8002328:	08009388 	.word	0x08009388
 800232c:	080093b8 	.word	0x080093b8
 8002330:	080093d8 	.word	0x080093d8
 8002334:	08009408 	.word	0x08009408
 8002338:	08009438 	.word	0x08009438
 800233c:	08009468 	.word	0x08009468
 8002340:	08009498 	.word	0x08009498
 8002344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002346:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800234a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,1,0,1,0},
			{1,0,1,0,1,0},
			{1,0,0,0,1,0},
			{1,0,0,0,1,0}
	};
	uint8_t literaN[8][6]={
 800234e:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002352:	4ab6      	ldr	r2, [pc, #728]	; (800262c <KonwertujTekst+0xa28>)
 8002354:	461c      	mov	r4, r3
 8002356:	4615      	mov	r5, r2
 8002358:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,1,1,0},
			{1,0,0,1,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaNi[8][6]={
 8002368:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 800236c:	4ab0      	ldr	r2, [pc, #704]	; (8002630 <KonwertujTekst+0xa2c>)
 800236e:	461c      	mov	r4, r3
 8002370:	4615      	mov	r5, r2
 8002372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800237a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800237e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,1,0,1,0},
			{1,0,0,1,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaO[8][6]={
 8002382:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002386:	4aab      	ldr	r2, [pc, #684]	; (8002634 <KonwertujTekst+0xa30>)
 8002388:	461c      	mov	r4, r3
 800238a:	4615      	mov	r5, r2
 800238c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800238e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002390:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002392:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002394:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002398:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t literaOu[8][6]={
 800239c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 80023a0:	4aa5      	ldr	r2, [pc, #660]	; (8002638 <KonwertujTekst+0xa34>)
 80023a2:	461c      	mov	r4, r3
 80023a4:	4615      	mov	r5, r2
 80023a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t literaP[8][6]={
 80023b6:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 80023ba:	4aa0      	ldr	r2, [pc, #640]	; (800263c <KonwertujTekst+0xa38>)
 80023bc:	461c      	mov	r4, r3
 80023be:	4615      	mov	r5, r2
 80023c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,0,0},
			{1,0,0,0,0,0},
			{1,0,0,0,0,0}
	};

	uint8_t literaQ[8][6]={
 80023d0:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 80023d4:	4a9a      	ldr	r2, [pc, #616]	; (8002640 <KonwertujTekst+0xa3c>)
 80023d6:	461c      	mov	r4, r3
 80023d8:	4615      	mov	r5, r2
 80023da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,1,0,0},
			{0,1,1,1,1,0},
			{0,0,0,0,1,0}
	};

	uint8_t literaR[8][6]={
 80023ea:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80023ee:	4a95      	ldr	r2, [pc, #596]	; (8002644 <KonwertujTekst+0xa40>)
 80023f0:	461c      	mov	r4, r3
 80023f2:	4615      	mov	r5, r2
 80023f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,1,0,0},
			{1,0,0,0,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaS[8][6]={
 8002404:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002408:	4a8f      	ldr	r2, [pc, #572]	; (8002648 <KonwertujTekst+0xa44>)
 800240a:	461c      	mov	r4, r3
 800240c:	4615      	mov	r5, r2
 800240e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002416:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800241a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,0,1,0},
			{0,0,0,0,1,0},
			{1,1,1,1,0,0}
	};

	uint8_t literaSi[8][6]={
 800241e:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <KonwertujTekst+0xa48>)
 8002424:	461c      	mov	r4, r3
 8002426:	4615      	mov	r5, r2
 8002428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800242c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800242e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,0,0,1,0},
			{0,0,0,0,1,0},
			{1,1,1,1,0,0}
	};

	uint8_t literaT[8][6]={
 8002438:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800243c:	4a84      	ldr	r2, [pc, #528]	; (8002650 <KonwertujTekst+0xa4c>)
 800243e:	461c      	mov	r4, r3
 8002440:	4615      	mov	r5, r2
 8002442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800244e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,0,1,0,0,0},
			{0,0,1,0,0,0}
	};

	uint8_t literaU[8][6]={
 8002452:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8002456:	4a7f      	ldr	r2, [pc, #508]	; (8002654 <KonwertujTekst+0xa50>)
 8002458:	461c      	mov	r4, r3
 800245a:	4615      	mov	r5, r2
 800245c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800245e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002464:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002468:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,0,0,0,1,0},
			{1,0,0,0,1,0},
			{0,1,1,1,0,0}
	};

	uint8_t literaV[8][6]={
 800246c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002470:	4a79      	ldr	r2, [pc, #484]	; (8002658 <KonwertujTekst+0xa54>)
 8002472:	461c      	mov	r4, r3
 8002474:	4615      	mov	r5, r2
 8002476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002482:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,1,0,1,0,0},
			{0,0,1,0,0,0},
			{0,0,1,0,0,0}
	};

	uint8_t literaW[8][6]={
 8002486:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800248a:	4a74      	ldr	r2, [pc, #464]	; (800265c <KonwertujTekst+0xa58>)
 800248c:	461c      	mov	r4, r3
 800248e:	4615      	mov	r5, r2
 8002490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002498:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800249c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{1,1,0,1,1,0},
			{1,1,0,1,1,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaX[8][6]={
 80024a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <KonwertujTekst+0xa5c>)
 80024a6:	461c      	mov	r4, r3
 80024a8:	4615      	mov	r5, r2
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,1,0,1,0,0},
			{0,1,0,1,0,0},
			{1,0,0,0,1,0}
	};

	uint8_t literaY[8][6]={
 80024ba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80024be:	4a69      	ldr	r2, [pc, #420]	; (8002664 <KonwertujTekst+0xa60>)
 80024c0:	461c      	mov	r4, r3
 80024c2:	4615      	mov	r5, r2
 80024c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,0,1,0,0,0},
			{0,0,1,0,0,0}
	};

	uint8_t literaZ[8][6]={
 80024d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80024d8:	4a63      	ldr	r2, [pc, #396]	; (8002668 <KonwertujTekst+0xa64>)
 80024da:	461c      	mov	r4, r3
 80024dc:	4615      	mov	r5, r2
 80024de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,1,0,0,0,0},
			{0,1,0,0,0,0},
			{1,1,1,1,1,0}
	};
	uint8_t literaZi[8][6]={
 80024ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80024f2:	4a5e      	ldr	r2, [pc, #376]	; (800266c <KonwertujTekst+0xa68>)
 80024f4:	461c      	mov	r4, r3
 80024f6:	4615      	mov	r5, r2
 80024f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002500:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002504:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,1,0,0,0,0},
			{1,1,1,1,1,0}
	};

	uint8_t literaZy[8][6]={
 8002508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250c:	4a58      	ldr	r2, [pc, #352]	; (8002670 <KonwertujTekst+0xa6c>)
 800250e:	461c      	mov	r4, r3
 8002510:	4615      	mov	r5, r2
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800251e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{0,0,1,0,0,0},
			{0,1,0,0,0,0},
			{1,1,1,1,1,0}
	};

	uint8_t literaSpacja[8][4]={
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4618      	mov	r0, r3
 8002528:	2320      	movs	r3, #32
 800252a:	461a      	mov	r2, r3
 800252c:	2100      	movs	r1, #0
 800252e:	f005 fc0e 	bl	8007d4e <memset>
			{0,0,0,0},
			{0,0,0,0},
			{0,0,0,0}
	};

for(int i=0; i<dlugosc+1; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002538:	f000 bd8d 	b.w	8003056 <KonwertujTekst+0x1452>
{

	if(tekst[i]=='a' || tekst[i]=='A'){dlugoscZnaku=6;dodajMacierzLitery(literaA);}
 800253c:	4a4d      	ldr	r2, [pc, #308]	; (8002674 <KonwertujTekst+0xa70>)
 800253e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002542:	4413      	add	r3, r2
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	2b61      	cmp	r3, #97	; 0x61
 8002548:	d006      	beq.n	8002558 <KonwertujTekst+0x954>
 800254a:	4a4a      	ldr	r2, [pc, #296]	; (8002674 <KonwertujTekst+0xa70>)
 800254c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002550:	4413      	add	r3, r2
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b41      	cmp	r3, #65	; 0x41
 8002556:	d109      	bne.n	800256c <KonwertujTekst+0x968>
 8002558:	4b47      	ldr	r3, [pc, #284]	; (8002678 <KonwertujTekst+0xa74>)
 800255a:	2206      	movs	r2, #6
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	f207 637c 	addw	r3, r7, #1660	; 0x67c
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff fb02 	bl	8001b6c <dodajMacierzLitery>
 8002568:	f000 bd70 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='b' || tekst[i]=='B'){dlugoscZnaku=6;dodajMacierzLitery(literaB);}
 800256c:	4a41      	ldr	r2, [pc, #260]	; (8002674 <KonwertujTekst+0xa70>)
 800256e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002572:	4413      	add	r3, r2
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b62      	cmp	r3, #98	; 0x62
 8002578:	d006      	beq.n	8002588 <KonwertujTekst+0x984>
 800257a:	4a3e      	ldr	r2, [pc, #248]	; (8002674 <KonwertujTekst+0xa70>)
 800257c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b42      	cmp	r3, #66	; 0x42
 8002586:	d109      	bne.n	800259c <KonwertujTekst+0x998>
 8002588:	4b3b      	ldr	r3, [pc, #236]	; (8002678 <KonwertujTekst+0xa74>)
 800258a:	2206      	movs	r2, #6
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff faea 	bl	8001b6c <dodajMacierzLitery>
 8002598:	f000 bd58 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==196 && (tekst[i+1]==132 || tekst[i+1]==133 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaAl);i++;}
 800259c:	4a35      	ldr	r2, [pc, #212]	; (8002674 <KonwertujTekst+0xa70>)
 800259e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025a2:	4413      	add	r3, r2
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2bc4      	cmp	r3, #196	; 0xc4
 80025a8:	d11c      	bne.n	80025e4 <KonwertujTekst+0x9e0>
 80025aa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025ae:	3301      	adds	r3, #1
 80025b0:	4a30      	ldr	r2, [pc, #192]	; (8002674 <KonwertujTekst+0xa70>)
 80025b2:	5cd3      	ldrb	r3, [r2, r3]
 80025b4:	2b84      	cmp	r3, #132	; 0x84
 80025b6:	d006      	beq.n	80025c6 <KonwertujTekst+0x9c2>
 80025b8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025bc:	3301      	adds	r3, #1
 80025be:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <KonwertujTekst+0xa70>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	2b85      	cmp	r3, #133	; 0x85
 80025c4:	d10e      	bne.n	80025e4 <KonwertujTekst+0x9e0>
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <KonwertujTekst+0xa74>)
 80025c8:	2206      	movs	r2, #6
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff facb 	bl	8001b6c <dodajMacierzLitery>
 80025d6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025da:	3301      	adds	r3, #1
 80025dc:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 80025e0:	f000 bd34 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==196 && (tekst[i+1]==152 || tekst[i+1]==153 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaEE);i++;}
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <KonwertujTekst+0xa70>)
 80025e6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	2bc4      	cmp	r3, #196	; 0xc4
 80025f0:	d144      	bne.n	800267c <KonwertujTekst+0xa78>
 80025f2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a1e      	ldr	r2, [pc, #120]	; (8002674 <KonwertujTekst+0xa70>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	2b98      	cmp	r3, #152	; 0x98
 80025fe:	d006      	beq.n	800260e <KonwertujTekst+0xa0a>
 8002600:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002604:	3301      	adds	r3, #1
 8002606:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <KonwertujTekst+0xa70>)
 8002608:	5cd3      	ldrb	r3, [r2, r3]
 800260a:	2b99      	cmp	r3, #153	; 0x99
 800260c:	d136      	bne.n	800267c <KonwertujTekst+0xa78>
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <KonwertujTekst+0xa74>)
 8002610:	2206      	movs	r2, #6
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	f207 532c 	addw	r3, r7, #1324	; 0x52c
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff faa7 	bl	8001b6c <dodajMacierzLitery>
 800261e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002622:	3301      	adds	r3, #1
 8002624:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002628:	f000 bd10 	b.w	800304c <KonwertujTekst+0x1448>
 800262c:	080094c8 	.word	0x080094c8
 8002630:	080094f8 	.word	0x080094f8
 8002634:	08009528 	.word	0x08009528
 8002638:	08009558 	.word	0x08009558
 800263c:	08009588 	.word	0x08009588
 8002640:	080095b8 	.word	0x080095b8
 8002644:	080095e8 	.word	0x080095e8
 8002648:	08009618 	.word	0x08009618
 800264c:	08009648 	.word	0x08009648
 8002650:	08009678 	.word	0x08009678
 8002654:	080096a8 	.word	0x080096a8
 8002658:	080096d8 	.word	0x080096d8
 800265c:	08009708 	.word	0x08009708
 8002660:	08009738 	.word	0x08009738
 8002664:	08009768 	.word	0x08009768
 8002668:	08009798 	.word	0x08009798
 800266c:	080097c8 	.word	0x080097c8
 8002670:	080097f8 	.word	0x080097f8
 8002674:	200002f8 	.word	0x200002f8
 8002678:	200000b8 	.word	0x200000b8
	else if(tekst[i]==197 && (tekst[i+1]==129 || tekst[i+1]==130 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaEl);i++;}
 800267c:	4ab6      	ldr	r2, [pc, #728]	; (8002958 <KonwertujTekst+0xd54>)
 800267e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2bc5      	cmp	r3, #197	; 0xc5
 8002688:	d11c      	bne.n	80026c4 <KonwertujTekst+0xac0>
 800268a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800268e:	3301      	adds	r3, #1
 8002690:	4ab1      	ldr	r2, [pc, #708]	; (8002958 <KonwertujTekst+0xd54>)
 8002692:	5cd3      	ldrb	r3, [r2, r3]
 8002694:	2b81      	cmp	r3, #129	; 0x81
 8002696:	d006      	beq.n	80026a6 <KonwertujTekst+0xaa2>
 8002698:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800269c:	3301      	adds	r3, #1
 800269e:	4aae      	ldr	r2, [pc, #696]	; (8002958 <KonwertujTekst+0xd54>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	2b82      	cmp	r3, #130	; 0x82
 80026a4:	d10e      	bne.n	80026c4 <KonwertujTekst+0xac0>
 80026a6:	4bad      	ldr	r3, [pc, #692]	; (800295c <KonwertujTekst+0xd58>)
 80026a8:	2206      	movs	r2, #6
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	f507 736f 	add.w	r3, r7, #956	; 0x3bc
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fa5b 	bl	8001b6c <dodajMacierzLitery>
 80026b6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80026ba:	3301      	adds	r3, #1
 80026bc:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 80026c0:	f000 bcc4 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==197 && (tekst[i+1]==131 || tekst[i+1]==132 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaNi);i++;}
 80026c4:	4aa4      	ldr	r2, [pc, #656]	; (8002958 <KonwertujTekst+0xd54>)
 80026c6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80026ca:	4413      	add	r3, r2
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2bc5      	cmp	r3, #197	; 0xc5
 80026d0:	d11c      	bne.n	800270c <KonwertujTekst+0xb08>
 80026d2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80026d6:	3301      	adds	r3, #1
 80026d8:	4a9f      	ldr	r2, [pc, #636]	; (8002958 <KonwertujTekst+0xd54>)
 80026da:	5cd3      	ldrb	r3, [r2, r3]
 80026dc:	2b83      	cmp	r3, #131	; 0x83
 80026de:	d006      	beq.n	80026ee <KonwertujTekst+0xaea>
 80026e0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80026e4:	3301      	adds	r3, #1
 80026e6:	4a9c      	ldr	r2, [pc, #624]	; (8002958 <KonwertujTekst+0xd54>)
 80026e8:	5cd3      	ldrb	r3, [r2, r3]
 80026ea:	2b84      	cmp	r3, #132	; 0x84
 80026ec:	d10e      	bne.n	800270c <KonwertujTekst+0xb08>
 80026ee:	4b9b      	ldr	r3, [pc, #620]	; (800295c <KonwertujTekst+0xd58>)
 80026f0:	2206      	movs	r2, #6
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff fa37 	bl	8001b6c <dodajMacierzLitery>
 80026fe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002702:	3301      	adds	r3, #1
 8002704:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002708:	f000 bca0 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==195 && (tekst[i+1]==147 || tekst[i+1]==179 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaOu);i++;}
 800270c:	4a92      	ldr	r2, [pc, #584]	; (8002958 <KonwertujTekst+0xd54>)
 800270e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002712:	4413      	add	r3, r2
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	2bc3      	cmp	r3, #195	; 0xc3
 8002718:	d11c      	bne.n	8002754 <KonwertujTekst+0xb50>
 800271a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800271e:	3301      	adds	r3, #1
 8002720:	4a8d      	ldr	r2, [pc, #564]	; (8002958 <KonwertujTekst+0xd54>)
 8002722:	5cd3      	ldrb	r3, [r2, r3]
 8002724:	2b93      	cmp	r3, #147	; 0x93
 8002726:	d006      	beq.n	8002736 <KonwertujTekst+0xb32>
 8002728:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800272c:	3301      	adds	r3, #1
 800272e:	4a8a      	ldr	r2, [pc, #552]	; (8002958 <KonwertujTekst+0xd54>)
 8002730:	5cd3      	ldrb	r3, [r2, r3]
 8002732:	2bb3      	cmp	r3, #179	; 0xb3
 8002734:	d10e      	bne.n	8002754 <KonwertujTekst+0xb50>
 8002736:	4b89      	ldr	r3, [pc, #548]	; (800295c <KonwertujTekst+0xd58>)
 8002738:	2206      	movs	r2, #6
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	f507 7333 	add.w	r3, r7, #716	; 0x2cc
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fa13 	bl	8001b6c <dodajMacierzLitery>
 8002746:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800274a:	3301      	adds	r3, #1
 800274c:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002750:	f000 bc7c 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==197 && (tekst[i+1]==154 || tekst[i+1]==155 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaSi);i++;}
 8002754:	4a80      	ldr	r2, [pc, #512]	; (8002958 <KonwertujTekst+0xd54>)
 8002756:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2bc5      	cmp	r3, #197	; 0xc5
 8002760:	d11c      	bne.n	800279c <KonwertujTekst+0xb98>
 8002762:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002766:	3301      	adds	r3, #1
 8002768:	4a7b      	ldr	r2, [pc, #492]	; (8002958 <KonwertujTekst+0xd54>)
 800276a:	5cd3      	ldrb	r3, [r2, r3]
 800276c:	2b9a      	cmp	r3, #154	; 0x9a
 800276e:	d006      	beq.n	800277e <KonwertujTekst+0xb7a>
 8002770:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002774:	3301      	adds	r3, #1
 8002776:	4a78      	ldr	r2, [pc, #480]	; (8002958 <KonwertujTekst+0xd54>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	2b9b      	cmp	r3, #155	; 0x9b
 800277c:	d10e      	bne.n	800279c <KonwertujTekst+0xb98>
 800277e:	4b77      	ldr	r3, [pc, #476]	; (800295c <KonwertujTekst+0xd58>)
 8002780:	2206      	movs	r2, #6
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f9ef 	bl	8001b6c <dodajMacierzLitery>
 800278e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002792:	3301      	adds	r3, #1
 8002794:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002798:	f000 bc58 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==197 && (tekst[i+1]==187 || tekst[i+1]==188 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaZy);i++;}
 800279c:	4a6e      	ldr	r2, [pc, #440]	; (8002958 <KonwertujTekst+0xd54>)
 800279e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2bc5      	cmp	r3, #197	; 0xc5
 80027a8:	d11c      	bne.n	80027e4 <KonwertujTekst+0xbe0>
 80027aa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027ae:	3301      	adds	r3, #1
 80027b0:	4a69      	ldr	r2, [pc, #420]	; (8002958 <KonwertujTekst+0xd54>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	2bbb      	cmp	r3, #187	; 0xbb
 80027b6:	d006      	beq.n	80027c6 <KonwertujTekst+0xbc2>
 80027b8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027bc:	3301      	adds	r3, #1
 80027be:	4a66      	ldr	r2, [pc, #408]	; (8002958 <KonwertujTekst+0xd54>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	2bbc      	cmp	r3, #188	; 0xbc
 80027c4:	d10e      	bne.n	80027e4 <KonwertujTekst+0xbe0>
 80027c6:	4b65      	ldr	r3, [pc, #404]	; (800295c <KonwertujTekst+0xd58>)
 80027c8:	2206      	movs	r2, #6
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff f9cb 	bl	8001b6c <dodajMacierzLitery>
 80027d6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027da:	3301      	adds	r3, #1
 80027dc:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 80027e0:	f000 bc34 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==197 && (tekst[i+1]==185 || tekst[i+1]==186 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaZi);i++;}
 80027e4:	4a5c      	ldr	r2, [pc, #368]	; (8002958 <KonwertujTekst+0xd54>)
 80027e6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027ea:	4413      	add	r3, r2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2bc5      	cmp	r3, #197	; 0xc5
 80027f0:	d11c      	bne.n	800282c <KonwertujTekst+0xc28>
 80027f2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80027f6:	3301      	adds	r3, #1
 80027f8:	4a57      	ldr	r2, [pc, #348]	; (8002958 <KonwertujTekst+0xd54>)
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	2bb9      	cmp	r3, #185	; 0xb9
 80027fe:	d006      	beq.n	800280e <KonwertujTekst+0xc0a>
 8002800:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002804:	3301      	adds	r3, #1
 8002806:	4a54      	ldr	r2, [pc, #336]	; (8002958 <KonwertujTekst+0xd54>)
 8002808:	5cd3      	ldrb	r3, [r2, r3]
 800280a:	2bba      	cmp	r3, #186	; 0xba
 800280c:	d10e      	bne.n	800282c <KonwertujTekst+0xc28>
 800280e:	4b53      	ldr	r3, [pc, #332]	; (800295c <KonwertujTekst+0xd58>)
 8002810:	2206      	movs	r2, #6
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff f9a7 	bl	8001b6c <dodajMacierzLitery>
 800281e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002822:	3301      	adds	r3, #1
 8002824:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002828:	f000 bc10 	b.w	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==196 && (tekst[i+1]==135 || tekst[i+1]==134 ) ){dlugoscZnaku=6;dodajMacierzLitery(literaCi);i++;}
 800282c:	4a4a      	ldr	r2, [pc, #296]	; (8002958 <KonwertujTekst+0xd54>)
 800282e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002832:	4413      	add	r3, r2
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2bc4      	cmp	r3, #196	; 0xc4
 8002838:	d11b      	bne.n	8002872 <KonwertujTekst+0xc6e>
 800283a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800283e:	3301      	adds	r3, #1
 8002840:	4a45      	ldr	r2, [pc, #276]	; (8002958 <KonwertujTekst+0xd54>)
 8002842:	5cd3      	ldrb	r3, [r2, r3]
 8002844:	2b87      	cmp	r3, #135	; 0x87
 8002846:	d006      	beq.n	8002856 <KonwertujTekst+0xc52>
 8002848:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800284c:	3301      	adds	r3, #1
 800284e:	4a42      	ldr	r2, [pc, #264]	; (8002958 <KonwertujTekst+0xd54>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	2b86      	cmp	r3, #134	; 0x86
 8002854:	d10d      	bne.n	8002872 <KonwertujTekst+0xc6e>
 8002856:	4b41      	ldr	r3, [pc, #260]	; (800295c <KonwertujTekst+0xd58>)
 8002858:	2206      	movs	r2, #6
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f207 53bc 	addw	r3, r7, #1468	; 0x5bc
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff f983 	bl	8001b6c <dodajMacierzLitery>
 8002866:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800286a:	3301      	adds	r3, #1
 800286c:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8002870:	e3ec      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='c' || tekst[i]=='C'){dlugoscZnaku=6;dodajMacierzLitery(literaC);}
 8002872:	4a39      	ldr	r2, [pc, #228]	; (8002958 <KonwertujTekst+0xd54>)
 8002874:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002878:	4413      	add	r3, r2
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b63      	cmp	r3, #99	; 0x63
 800287e:	d006      	beq.n	800288e <KonwertujTekst+0xc8a>
 8002880:	4a35      	ldr	r2, [pc, #212]	; (8002958 <KonwertujTekst+0xd54>)
 8002882:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002886:	4413      	add	r3, r2
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b43      	cmp	r3, #67	; 0x43
 800288c:	d108      	bne.n	80028a0 <KonwertujTekst+0xc9c>
 800288e:	4b33      	ldr	r3, [pc, #204]	; (800295c <KonwertujTekst+0xd58>)
 8002890:	2206      	movs	r2, #6
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	f207 53ec 	addw	r3, r7, #1516	; 0x5ec
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f967 	bl	8001b6c <dodajMacierzLitery>
 800289e:	e3d5      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='d' || tekst[i]=='D'){dlugoscZnaku=6;dodajMacierzLitery(literaD);}
 80028a0:	4a2d      	ldr	r2, [pc, #180]	; (8002958 <KonwertujTekst+0xd54>)
 80028a2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b64      	cmp	r3, #100	; 0x64
 80028ac:	d006      	beq.n	80028bc <KonwertujTekst+0xcb8>
 80028ae:	4a2a      	ldr	r2, [pc, #168]	; (8002958 <KonwertujTekst+0xd54>)
 80028b0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b44      	cmp	r3, #68	; 0x44
 80028ba:	d108      	bne.n	80028ce <KonwertujTekst+0xcca>
 80028bc:	4b27      	ldr	r3, [pc, #156]	; (800295c <KonwertujTekst+0xd58>)
 80028be:	2206      	movs	r2, #6
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff f950 	bl	8001b6c <dodajMacierzLitery>
 80028cc:	e3be      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='e' || tekst[i]=='E'){dlugoscZnaku=6;dodajMacierzLitery(literaE);}
 80028ce:	4a22      	ldr	r2, [pc, #136]	; (8002958 <KonwertujTekst+0xd54>)
 80028d0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80028d4:	4413      	add	r3, r2
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b65      	cmp	r3, #101	; 0x65
 80028da:	d006      	beq.n	80028ea <KonwertujTekst+0xce6>
 80028dc:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <KonwertujTekst+0xd54>)
 80028de:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80028e2:	4413      	add	r3, r2
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b45      	cmp	r3, #69	; 0x45
 80028e8:	d108      	bne.n	80028fc <KonwertujTekst+0xcf8>
 80028ea:	4b1c      	ldr	r3, [pc, #112]	; (800295c <KonwertujTekst+0xd58>)
 80028ec:	2206      	movs	r2, #6
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f207 535c 	addw	r3, r7, #1372	; 0x55c
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff f939 	bl	8001b6c <dodajMacierzLitery>
 80028fa:	e3a7      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='f' || tekst[i]=='F'){dlugoscZnaku=6;dodajMacierzLitery(literaF);}
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <KonwertujTekst+0xd54>)
 80028fe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b66      	cmp	r3, #102	; 0x66
 8002908:	d006      	beq.n	8002918 <KonwertujTekst+0xd14>
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <KonwertujTekst+0xd54>)
 800290c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002910:	4413      	add	r3, r2
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b46      	cmp	r3, #70	; 0x46
 8002916:	d108      	bne.n	800292a <KonwertujTekst+0xd26>
 8002918:	4b10      	ldr	r3, [pc, #64]	; (800295c <KonwertujTekst+0xd58>)
 800291a:	2206      	movs	r2, #6
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f207 43fc 	addw	r3, r7, #1276	; 0x4fc
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff f922 	bl	8001b6c <dodajMacierzLitery>
 8002928:	e390      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='g' || tekst[i]=='G'){dlugoscZnaku=6;dodajMacierzLitery(literaG);}
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <KonwertujTekst+0xd54>)
 800292c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002930:	4413      	add	r3, r2
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b67      	cmp	r3, #103	; 0x67
 8002936:	d006      	beq.n	8002946 <KonwertujTekst+0xd42>
 8002938:	4a07      	ldr	r2, [pc, #28]	; (8002958 <KonwertujTekst+0xd54>)
 800293a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b47      	cmp	r3, #71	; 0x47
 8002944:	d10c      	bne.n	8002960 <KonwertujTekst+0xd5c>
 8002946:	4b05      	ldr	r3, [pc, #20]	; (800295c <KonwertujTekst+0xd58>)
 8002948:	2206      	movs	r2, #6
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	f207 43cc 	addw	r3, r7, #1228	; 0x4cc
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff f90b 	bl	8001b6c <dodajMacierzLitery>
 8002956:	e379      	b.n	800304c <KonwertujTekst+0x1448>
 8002958:	200002f8 	.word	0x200002f8
 800295c:	200000b8 	.word	0x200000b8
	else if(tekst[i]=='h' || tekst[i]=='H'){dlugoscZnaku=6;dodajMacierzLitery(literaH);}
 8002960:	4aac      	ldr	r2, [pc, #688]	; (8002c14 <KonwertujTekst+0x1010>)
 8002962:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002966:	4413      	add	r3, r2
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b68      	cmp	r3, #104	; 0x68
 800296c:	d006      	beq.n	800297c <KonwertujTekst+0xd78>
 800296e:	4aa9      	ldr	r2, [pc, #676]	; (8002c14 <KonwertujTekst+0x1010>)
 8002970:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002974:	4413      	add	r3, r2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b48      	cmp	r3, #72	; 0x48
 800297a:	d108      	bne.n	800298e <KonwertujTekst+0xd8a>
 800297c:	4ba6      	ldr	r3, [pc, #664]	; (8002c18 <KonwertujTekst+0x1014>)
 800297e:	2206      	movs	r2, #6
 8002980:	601a      	str	r2, [r3, #0]
 8002982:	f207 439c 	addw	r3, r7, #1180	; 0x49c
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff f8f0 	bl	8001b6c <dodajMacierzLitery>
 800298c:	e35e      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='i' || tekst[i]=='I'){dlugoscZnaku=4;dodajMacierzLitery(literaI);}
 800298e:	4aa1      	ldr	r2, [pc, #644]	; (8002c14 <KonwertujTekst+0x1010>)
 8002990:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002994:	4413      	add	r3, r2
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b69      	cmp	r3, #105	; 0x69
 800299a:	d006      	beq.n	80029aa <KonwertujTekst+0xda6>
 800299c:	4a9d      	ldr	r2, [pc, #628]	; (8002c14 <KonwertujTekst+0x1010>)
 800299e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80029a2:	4413      	add	r3, r2
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b49      	cmp	r3, #73	; 0x49
 80029a8:	d108      	bne.n	80029bc <KonwertujTekst+0xdb8>
 80029aa:	4b9b      	ldr	r3, [pc, #620]	; (8002c18 <KonwertujTekst+0x1014>)
 80029ac:	2204      	movs	r2, #4
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	f207 437c 	addw	r3, r7, #1148	; 0x47c
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff f8d9 	bl	8001b6c <dodajMacierzLitery>
 80029ba:	e347      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='j' || tekst[i]=='J'){dlugoscZnaku=6;dodajMacierzLitery(literaJ);}
 80029bc:	4a95      	ldr	r2, [pc, #596]	; (8002c14 <KonwertujTekst+0x1010>)
 80029be:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80029c2:	4413      	add	r3, r2
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b6a      	cmp	r3, #106	; 0x6a
 80029c8:	d006      	beq.n	80029d8 <KonwertujTekst+0xdd4>
 80029ca:	4a92      	ldr	r2, [pc, #584]	; (8002c14 <KonwertujTekst+0x1010>)
 80029cc:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80029d0:	4413      	add	r3, r2
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b4a      	cmp	r3, #74	; 0x4a
 80029d6:	d108      	bne.n	80029ea <KonwertujTekst+0xde6>
 80029d8:	4b8f      	ldr	r3, [pc, #572]	; (8002c18 <KonwertujTekst+0x1014>)
 80029da:	2206      	movs	r2, #6
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff f8c2 	bl	8001b6c <dodajMacierzLitery>
 80029e8:	e330      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='k' || tekst[i]=='K'){dlugoscZnaku=6;dodajMacierzLitery(literaK);}
 80029ea:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <KonwertujTekst+0x1010>)
 80029ec:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b6b      	cmp	r3, #107	; 0x6b
 80029f6:	d006      	beq.n	8002a06 <KonwertujTekst+0xe02>
 80029f8:	4a86      	ldr	r2, [pc, #536]	; (8002c14 <KonwertujTekst+0x1010>)
 80029fa:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b4b      	cmp	r3, #75	; 0x4b
 8002a04:	d108      	bne.n	8002a18 <KonwertujTekst+0xe14>
 8002a06:	4b84      	ldr	r3, [pc, #528]	; (8002c18 <KonwertujTekst+0x1014>)
 8002a08:	2206      	movs	r2, #6
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f207 431c 	addw	r3, r7, #1052	; 0x41c
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff f8ab 	bl	8001b6c <dodajMacierzLitery>
 8002a16:	e319      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='l' || tekst[i]=='L'){dlugoscZnaku=6;dodajMacierzLitery(literaL);}
 8002a18:	4a7e      	ldr	r2, [pc, #504]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a1a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a1e:	4413      	add	r3, r2
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b6c      	cmp	r3, #108	; 0x6c
 8002a24:	d006      	beq.n	8002a34 <KonwertujTekst+0xe30>
 8002a26:	4a7b      	ldr	r2, [pc, #492]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a28:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a2c:	4413      	add	r3, r2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b4c      	cmp	r3, #76	; 0x4c
 8002a32:	d108      	bne.n	8002a46 <KonwertujTekst+0xe42>
 8002a34:	4b78      	ldr	r3, [pc, #480]	; (8002c18 <KonwertujTekst+0x1014>)
 8002a36:	2206      	movs	r2, #6
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	f507 737b 	add.w	r3, r7, #1004	; 0x3ec
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f894 	bl	8001b6c <dodajMacierzLitery>
 8002a44:	e302      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='m' || tekst[i]=='M'){dlugoscZnaku=6;dodajMacierzLitery(literaM);}
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a48:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b6d      	cmp	r3, #109	; 0x6d
 8002a52:	d006      	beq.n	8002a62 <KonwertujTekst+0xe5e>
 8002a54:	4a6f      	ldr	r2, [pc, #444]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a56:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a5a:	4413      	add	r3, r2
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b4d      	cmp	r3, #77	; 0x4d
 8002a60:	d108      	bne.n	8002a74 <KonwertujTekst+0xe70>
 8002a62:	4b6d      	ldr	r3, [pc, #436]	; (8002c18 <KonwertujTekst+0x1014>)
 8002a64:	2206      	movs	r2, #6
 8002a66:	601a      	str	r2, [r3, #0]
 8002a68:	f507 7363 	add.w	r3, r7, #908	; 0x38c
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff f87d 	bl	8001b6c <dodajMacierzLitery>
 8002a72:	e2eb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='n' || tekst[i]=='N'){dlugoscZnaku=6;dodajMacierzLitery(literaN);}
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a76:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a7a:	4413      	add	r3, r2
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b6e      	cmp	r3, #110	; 0x6e
 8002a80:	d006      	beq.n	8002a90 <KonwertujTekst+0xe8c>
 8002a82:	4a64      	ldr	r2, [pc, #400]	; (8002c14 <KonwertujTekst+0x1010>)
 8002a84:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002a88:	4413      	add	r3, r2
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b4e      	cmp	r3, #78	; 0x4e
 8002a8e:	d108      	bne.n	8002aa2 <KonwertujTekst+0xe9e>
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <KonwertujTekst+0x1014>)
 8002a92:	2206      	movs	r2, #6
 8002a94:	601a      	str	r2, [r3, #0]
 8002a96:	f507 7357 	add.w	r3, r7, #860	; 0x35c
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff f866 	bl	8001b6c <dodajMacierzLitery>
 8002aa0:	e2d4      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='o' || tekst[i]=='O'){dlugoscZnaku=6;dodajMacierzLitery(literaO);}
 8002aa2:	4a5c      	ldr	r2, [pc, #368]	; (8002c14 <KonwertujTekst+0x1010>)
 8002aa4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b6f      	cmp	r3, #111	; 0x6f
 8002aae:	d006      	beq.n	8002abe <KonwertujTekst+0xeba>
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <KonwertujTekst+0x1010>)
 8002ab2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002ab6:	4413      	add	r3, r2
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b4f      	cmp	r3, #79	; 0x4f
 8002abc:	d108      	bne.n	8002ad0 <KonwertujTekst+0xecc>
 8002abe:	4b56      	ldr	r3, [pc, #344]	; (8002c18 <KonwertujTekst+0x1014>)
 8002ac0:	2206      	movs	r2, #6
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	f507 733f 	add.w	r3, r7, #764	; 0x2fc
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff f84f 	bl	8001b6c <dodajMacierzLitery>
 8002ace:	e2bd      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='p' || tekst[i]=='P'){dlugoscZnaku=6;dodajMacierzLitery(literaP);}
 8002ad0:	4a50      	ldr	r2, [pc, #320]	; (8002c14 <KonwertujTekst+0x1010>)
 8002ad2:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002ad6:	4413      	add	r3, r2
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b70      	cmp	r3, #112	; 0x70
 8002adc:	d006      	beq.n	8002aec <KonwertujTekst+0xee8>
 8002ade:	4a4d      	ldr	r2, [pc, #308]	; (8002c14 <KonwertujTekst+0x1010>)
 8002ae0:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002ae4:	4413      	add	r3, r2
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d108      	bne.n	8002afe <KonwertujTekst+0xefa>
 8002aec:	4b4a      	ldr	r3, [pc, #296]	; (8002c18 <KonwertujTekst+0x1014>)
 8002aee:	2206      	movs	r2, #6
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	f507 7327 	add.w	r3, r7, #668	; 0x29c
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff f838 	bl	8001b6c <dodajMacierzLitery>
 8002afc:	e2a6      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='q' || tekst[i]=='Q'){dlugoscZnaku=6;dodajMacierzLitery(literaQ);}
 8002afe:	4a45      	ldr	r2, [pc, #276]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b00:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b04:	4413      	add	r3, r2
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b71      	cmp	r3, #113	; 0x71
 8002b0a:	d006      	beq.n	8002b1a <KonwertujTekst+0xf16>
 8002b0c:	4a41      	ldr	r2, [pc, #260]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b0e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b12:	4413      	add	r3, r2
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b51      	cmp	r3, #81	; 0x51
 8002b18:	d108      	bne.n	8002b2c <KonwertujTekst+0xf28>
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <KonwertujTekst+0x1014>)
 8002b1c:	2206      	movs	r2, #6
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	f507 731b 	add.w	r3, r7, #620	; 0x26c
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff f821 	bl	8001b6c <dodajMacierzLitery>
 8002b2a:	e28f      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='r' || tekst[i]=='R'){dlugoscZnaku=6;dodajMacierzLitery(literaR);}
 8002b2c:	4a39      	ldr	r2, [pc, #228]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b2e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b32:	4413      	add	r3, r2
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b72      	cmp	r3, #114	; 0x72
 8002b38:	d006      	beq.n	8002b48 <KonwertujTekst+0xf44>
 8002b3a:	4a36      	ldr	r2, [pc, #216]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b3c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b40:	4413      	add	r3, r2
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b52      	cmp	r3, #82	; 0x52
 8002b46:	d108      	bne.n	8002b5a <KonwertujTekst+0xf56>
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <KonwertujTekst+0x1014>)
 8002b4a:	2206      	movs	r2, #6
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f80a 	bl	8001b6c <dodajMacierzLitery>
 8002b58:	e278      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='s' || tekst[i]=='S'){dlugoscZnaku=6;dodajMacierzLitery(literaS);}
 8002b5a:	4a2e      	ldr	r2, [pc, #184]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b5c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b60:	4413      	add	r3, r2
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b73      	cmp	r3, #115	; 0x73
 8002b66:	d006      	beq.n	8002b76 <KonwertujTekst+0xf72>
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b6a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b6e:	4413      	add	r3, r2
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b53      	cmp	r3, #83	; 0x53
 8002b74:	d108      	bne.n	8002b88 <KonwertujTekst+0xf84>
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <KonwertujTekst+0x1014>)
 8002b78:	2206      	movs	r2, #6
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f507 7303 	add.w	r3, r7, #524	; 0x20c
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fff3 	bl	8001b6c <dodajMacierzLitery>
 8002b86:	e261      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='t' || tekst[i]=='T'){dlugoscZnaku=6;dodajMacierzLitery(literaT);}
 8002b88:	4a22      	ldr	r2, [pc, #136]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b8a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b8e:	4413      	add	r3, r2
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b74      	cmp	r3, #116	; 0x74
 8002b94:	d006      	beq.n	8002ba4 <KonwertujTekst+0xfa0>
 8002b96:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <KonwertujTekst+0x1010>)
 8002b98:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002b9c:	4413      	add	r3, r2
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b54      	cmp	r3, #84	; 0x54
 8002ba2:	d108      	bne.n	8002bb6 <KonwertujTekst+0xfb2>
 8002ba4:	4b1c      	ldr	r3, [pc, #112]	; (8002c18 <KonwertujTekst+0x1014>)
 8002ba6:	2206      	movs	r2, #6
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe ffdc 	bl	8001b6c <dodajMacierzLitery>
 8002bb4:	e24a      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='u' || tekst[i]=='U'){dlugoscZnaku=6;dodajMacierzLitery(literaU);}
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <KonwertujTekst+0x1010>)
 8002bb8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002bbc:	4413      	add	r3, r2
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b75      	cmp	r3, #117	; 0x75
 8002bc2:	d006      	beq.n	8002bd2 <KonwertujTekst+0xfce>
 8002bc4:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <KonwertujTekst+0x1010>)
 8002bc6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b55      	cmp	r3, #85	; 0x55
 8002bd0:	d108      	bne.n	8002be4 <KonwertujTekst+0xfe0>
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <KonwertujTekst+0x1014>)
 8002bd4:	2206      	movs	r2, #6
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fe ffc5 	bl	8001b6c <dodajMacierzLitery>
 8002be2:	e233      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='v' || tekst[i]=='V'){dlugoscZnaku=6;dodajMacierzLitery(literaV);}
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <KonwertujTekst+0x1010>)
 8002be6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002bea:	4413      	add	r3, r2
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b76      	cmp	r3, #118	; 0x76
 8002bf0:	d006      	beq.n	8002c00 <KonwertujTekst+0xffc>
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <KonwertujTekst+0x1010>)
 8002bf4:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002bf8:	4413      	add	r3, r2
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b56      	cmp	r3, #86	; 0x56
 8002bfe:	d10d      	bne.n	8002c1c <KonwertujTekst+0x1018>
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <KonwertujTekst+0x1014>)
 8002c02:	2206      	movs	r2, #6
 8002c04:	601a      	str	r2, [r3, #0]
 8002c06:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe ffae 	bl	8001b6c <dodajMacierzLitery>
 8002c10:	e21c      	b.n	800304c <KonwertujTekst+0x1448>
 8002c12:	bf00      	nop
 8002c14:	200002f8 	.word	0x200002f8
 8002c18:	200000b8 	.word	0x200000b8
	else if(tekst[i]=='w' || tekst[i]=='W'){dlugoscZnaku=6;dodajMacierzLitery(literaW);}
 8002c1c:	4ab5      	ldr	r2, [pc, #724]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c1e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b77      	cmp	r3, #119	; 0x77
 8002c28:	d006      	beq.n	8002c38 <KonwertujTekst+0x1034>
 8002c2a:	4ab2      	ldr	r2, [pc, #712]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c2c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b57      	cmp	r3, #87	; 0x57
 8002c36:	d108      	bne.n	8002c4a <KonwertujTekst+0x1046>
 8002c38:	4baf      	ldr	r3, [pc, #700]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002c3a:	2206      	movs	r2, #6
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe ff92 	bl	8001b6c <dodajMacierzLitery>
 8002c48:	e200      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='x' || tekst[i]=='X'){dlugoscZnaku=6;dodajMacierzLitery(literaX);}
 8002c4a:	4aaa      	ldr	r2, [pc, #680]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c4c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b78      	cmp	r3, #120	; 0x78
 8002c56:	d006      	beq.n	8002c66 <KonwertujTekst+0x1062>
 8002c58:	4aa6      	ldr	r2, [pc, #664]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c5a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b58      	cmp	r3, #88	; 0x58
 8002c64:	d108      	bne.n	8002c78 <KonwertujTekst+0x1074>
 8002c66:	4ba4      	ldr	r3, [pc, #656]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002c68:	2206      	movs	r2, #6
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fe ff7b 	bl	8001b6c <dodajMacierzLitery>
 8002c76:	e1e9      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='y' || tekst[i]=='Y'){dlugoscZnaku=6;dodajMacierzLitery(literaY);}
 8002c78:	4a9e      	ldr	r2, [pc, #632]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c7a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b79      	cmp	r3, #121	; 0x79
 8002c84:	d006      	beq.n	8002c94 <KonwertujTekst+0x1090>
 8002c86:	4a9b      	ldr	r2, [pc, #620]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002c88:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b59      	cmp	r3, #89	; 0x59
 8002c92:	d108      	bne.n	8002ca6 <KonwertujTekst+0x10a2>
 8002c94:	4b98      	ldr	r3, [pc, #608]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002c96:	2206      	movs	r2, #6
 8002c98:	601a      	str	r2, [r3, #0]
 8002c9a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe ff64 	bl	8001b6c <dodajMacierzLitery>
 8002ca4:	e1d2      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='z' || tekst[i]=='Z'){dlugoscZnaku=6;dodajMacierzLitery(literaZ);}
 8002ca6:	4a93      	ldr	r2, [pc, #588]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002ca8:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002cac:	4413      	add	r3, r2
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b7a      	cmp	r3, #122	; 0x7a
 8002cb2:	d006      	beq.n	8002cc2 <KonwertujTekst+0x10be>
 8002cb4:	4a8f      	ldr	r2, [pc, #572]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002cb6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b5a      	cmp	r3, #90	; 0x5a
 8002cc0:	d108      	bne.n	8002cd4 <KonwertujTekst+0x10d0>
 8002cc2:	4b8d      	ldr	r3, [pc, #564]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002cc4:	2206      	movs	r2, #6
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fe ff4d 	bl	8001b6c <dodajMacierzLitery>
 8002cd2:	e1bb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==' '){dlugoscZnaku=4;dodajMacierzLitery(literaSpacja);}
 8002cd4:	4a87      	ldr	r2, [pc, #540]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002cd6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b20      	cmp	r3, #32
 8002ce0:	d108      	bne.n	8002cf4 <KonwertujTekst+0x10f0>
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7fe ff3d 	bl	8001b6c <dodajMacierzLitery>
 8002cf2:	e1ab      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='0'){dlugoscZnaku=6;dodajMacierzLitery(litera0);}
 8002cf4:	4a7f      	ldr	r2, [pc, #508]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002cf6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002cfa:	4413      	add	r3, r2
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b30      	cmp	r3, #48	; 0x30
 8002d00:	d108      	bne.n	8002d14 <KonwertujTekst+0x1110>
 8002d02:	4b7d      	ldr	r3, [pc, #500]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002d04:	2206      	movs	r2, #6
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	f607 035c 	addw	r3, r7, #2140	; 0x85c
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe ff2d 	bl	8001b6c <dodajMacierzLitery>
 8002d12:	e19b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='1'){dlugoscZnaku=6;dodajMacierzLitery(litera1);}
 8002d14:	4a77      	ldr	r2, [pc, #476]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002d16:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b31      	cmp	r3, #49	; 0x31
 8002d20:	d108      	bne.n	8002d34 <KonwertujTekst+0x1130>
 8002d22:	4b75      	ldr	r3, [pc, #468]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002d24:	2206      	movs	r2, #6
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe ff1d 	bl	8001b6c <dodajMacierzLitery>
 8002d32:	e18b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='2'){dlugoscZnaku=6;dodajMacierzLitery(litera2);}
 8002d34:	4a6f      	ldr	r2, [pc, #444]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002d36:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002d3a:	4413      	add	r3, r2
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b32      	cmp	r3, #50	; 0x32
 8002d40:	d108      	bne.n	8002d54 <KonwertujTekst+0x1150>
 8002d42:	4b6d      	ldr	r3, [pc, #436]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002d44:	2206      	movs	r2, #6
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f207 73fc 	addw	r3, r7, #2044	; 0x7fc
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe ff0d 	bl	8001b6c <dodajMacierzLitery>
 8002d52:	e17b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='3'){dlugoscZnaku=6;dodajMacierzLitery(litera3);}
 8002d54:	4a67      	ldr	r2, [pc, #412]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002d56:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002d5a:	4413      	add	r3, r2
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b33      	cmp	r3, #51	; 0x33
 8002d60:	d108      	bne.n	8002d74 <KonwertujTekst+0x1170>
 8002d62:	4b65      	ldr	r3, [pc, #404]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002d64:	2206      	movs	r2, #6
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f207 73cc 	addw	r3, r7, #1996	; 0x7cc
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe fefd 	bl	8001b6c <dodajMacierzLitery>
 8002d72:	e16b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='4'){dlugoscZnaku=6;dodajMacierzLitery(litera4);}
 8002d74:	4a5f      	ldr	r2, [pc, #380]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002d76:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b34      	cmp	r3, #52	; 0x34
 8002d80:	d108      	bne.n	8002d94 <KonwertujTekst+0x1190>
 8002d82:	4b5d      	ldr	r3, [pc, #372]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002d84:	2206      	movs	r2, #6
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f207 739c 	addw	r3, r7, #1948	; 0x79c
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe feed 	bl	8001b6c <dodajMacierzLitery>
 8002d92:	e15b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='5'){dlugoscZnaku=6;dodajMacierzLitery(litera5);}
 8002d94:	4a57      	ldr	r2, [pc, #348]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002d96:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002d9a:	4413      	add	r3, r2
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b35      	cmp	r3, #53	; 0x35
 8002da0:	d108      	bne.n	8002db4 <KonwertujTekst+0x11b0>
 8002da2:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002da4:	2206      	movs	r2, #6
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	f207 736c 	addw	r3, r7, #1900	; 0x76c
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7fe fedd 	bl	8001b6c <dodajMacierzLitery>
 8002db2:	e14b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='6'){dlugoscZnaku=6;dodajMacierzLitery(litera6);}
 8002db4:	4a4f      	ldr	r2, [pc, #316]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002db6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b36      	cmp	r3, #54	; 0x36
 8002dc0:	d108      	bne.n	8002dd4 <KonwertujTekst+0x11d0>
 8002dc2:	4b4d      	ldr	r3, [pc, #308]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002dc4:	2206      	movs	r2, #6
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f207 733c 	addw	r3, r7, #1852	; 0x73c
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7fe fecd 	bl	8001b6c <dodajMacierzLitery>
 8002dd2:	e13b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='7'){dlugoscZnaku=6;dodajMacierzLitery(litera7);}
 8002dd4:	4a47      	ldr	r2, [pc, #284]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002dd6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002dda:	4413      	add	r3, r2
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b37      	cmp	r3, #55	; 0x37
 8002de0:	d108      	bne.n	8002df4 <KonwertujTekst+0x11f0>
 8002de2:	4b45      	ldr	r3, [pc, #276]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002de4:	2206      	movs	r2, #6
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	f207 730c 	addw	r3, r7, #1804	; 0x70c
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe febd 	bl	8001b6c <dodajMacierzLitery>
 8002df2:	e12b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='8'){dlugoscZnaku=6;dodajMacierzLitery(litera8);}
 8002df4:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002df6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b38      	cmp	r3, #56	; 0x38
 8002e00:	d108      	bne.n	8002e14 <KonwertujTekst+0x1210>
 8002e02:	4b3d      	ldr	r3, [pc, #244]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002e04:	2206      	movs	r2, #6
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	f207 63dc 	addw	r3, r7, #1756	; 0x6dc
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7fe fead 	bl	8001b6c <dodajMacierzLitery>
 8002e12:	e11b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='9'){dlugoscZnaku=6;dodajMacierzLitery(litera9);}
 8002e14:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002e16:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b39      	cmp	r3, #57	; 0x39
 8002e20:	d108      	bne.n	8002e34 <KonwertujTekst+0x1230>
 8002e22:	4b35      	ldr	r3, [pc, #212]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002e24:	2206      	movs	r2, #6
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fe fe9d 	bl	8001b6c <dodajMacierzLitery>
 8002e32:	e10b      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='%'){dlugoscZnaku=7;dodajMacierzLitery(literaProcent);}
 8002e34:	4a2f      	ldr	r2, [pc, #188]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002e36:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002e3a:	4413      	add	r3, r2
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	2b25      	cmp	r3, #37	; 0x25
 8002e40:	d108      	bne.n	8002e54 <KonwertujTekst+0x1250>
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f607 23fc 	addw	r3, r7, #2812	; 0xafc
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fe8d 	bl	8001b6c <dodajMacierzLitery>
 8002e52:	e0fb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='?'){dlugoscZnaku=6;dodajMacierzLitery(literaZnakZapytania);}
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002e56:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002e5a:	4413      	add	r3, r2
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b3f      	cmp	r3, #63	; 0x3f
 8002e60:	d108      	bne.n	8002e74 <KonwertujTekst+0x1270>
 8002e62:	4b25      	ldr	r3, [pc, #148]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002e64:	2206      	movs	r2, #6
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe fe7d 	bl	8001b6c <dodajMacierzLitery>
 8002e72:	e0eb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='/'){dlugoscZnaku=6;dodajMacierzLitery(literaSlash);}
 8002e74:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002e76:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002e7a:	4413      	add	r3, r2
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b2f      	cmp	r3, #47	; 0x2f
 8002e80:	d108      	bne.n	8002e94 <KonwertujTekst+0x1290>
 8002e82:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002e84:	2206      	movs	r2, #6
 8002e86:	601a      	str	r2, [r3, #0]
 8002e88:	f607 231c 	addw	r3, r7, #2588	; 0xa1c
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fe6d 	bl	8001b6c <dodajMacierzLitery>
 8002e92:	e0db      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='>'){dlugoscZnaku=6;dodajMacierzLitery(literaWiekszeOd);}
 8002e94:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002e96:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002e9a:	4413      	add	r3, r2
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b3e      	cmp	r3, #62	; 0x3e
 8002ea0:	d108      	bne.n	8002eb4 <KonwertujTekst+0x12b0>
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002ea4:	2206      	movs	r2, #6
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	f607 03fc 	addw	r3, r7, #2300	; 0x8fc
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fe5d 	bl	8001b6c <dodajMacierzLitery>
 8002eb2:	e0cb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='<'){dlugoscZnaku=6;dodajMacierzLitery(literaMniejszeOd);}
 8002eb4:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002eb6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002eba:	4413      	add	r3, r2
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b3c      	cmp	r3, #60	; 0x3c
 8002ec0:	d108      	bne.n	8002ed4 <KonwertujTekst+0x12d0>
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002ec4:	2206      	movs	r2, #6
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	f607 03cc 	addw	r3, r7, #2252	; 0x8cc
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fe4d 	bl	8001b6c <dodajMacierzLitery>
 8002ed2:	e0bb      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='='){dlugoscZnaku=6;dodajMacierzLitery(literaRownaSie);}
 8002ed4:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <KonwertujTekst+0x12f0>)
 8002ed6:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002eda:	4413      	add	r3, r2
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b3d      	cmp	r3, #61	; 0x3d
 8002ee0:	d10c      	bne.n	8002efc <KonwertujTekst+0x12f8>
 8002ee2:	4b05      	ldr	r3, [pc, #20]	; (8002ef8 <KonwertujTekst+0x12f4>)
 8002ee4:	2206      	movs	r2, #6
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f607 13bc 	addw	r3, r7, #2492	; 0x9bc
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe fe3d 	bl	8001b6c <dodajMacierzLitery>
 8002ef2:	e0ab      	b.n	800304c <KonwertujTekst+0x1448>
 8002ef4:	200002f8 	.word	0x200002f8
 8002ef8:	200000b8 	.word	0x200000b8
	else if(tekst[i]=='_'){dlugoscZnaku=6;dodajMacierzLitery(literaPodloga);}
 8002efc:	4a5c      	ldr	r2, [pc, #368]	; (8003070 <KonwertujTekst+0x146c>)
 8002efe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002f02:	4413      	add	r3, r2
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b5f      	cmp	r3, #95	; 0x5f
 8002f08:	d108      	bne.n	8002f1c <KonwertujTekst+0x1318>
 8002f0a:	4b5a      	ldr	r3, [pc, #360]	; (8003074 <KonwertujTekst+0x1470>)
 8002f0c:	2206      	movs	r2, #6
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f607 132c 	addw	r3, r7, #2348	; 0x92c
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe fe29 	bl	8001b6c <dodajMacierzLitery>
 8002f1a:	e097      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='-'){dlugoscZnaku=6;dodajMacierzLitery(literaMinus);}
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <KonwertujTekst+0x146c>)
 8002f1e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b2d      	cmp	r3, #45	; 0x2d
 8002f28:	d108      	bne.n	8002f3c <KonwertujTekst+0x1338>
 8002f2a:	4b52      	ldr	r3, [pc, #328]	; (8003074 <KonwertujTekst+0x1470>)
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f607 135c 	addw	r3, r7, #2396	; 0x95c
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe fe19 	bl	8001b6c <dodajMacierzLitery>
 8002f3a:	e087      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='+'){dlugoscZnaku=6;dodajMacierzLitery(literaPlus);}
 8002f3c:	4a4c      	ldr	r2, [pc, #304]	; (8003070 <KonwertujTekst+0x146c>)
 8002f3e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002f42:	4413      	add	r3, r2
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b2b      	cmp	r3, #43	; 0x2b
 8002f48:	d108      	bne.n	8002f5c <KonwertujTekst+0x1358>
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	; (8003074 <KonwertujTekst+0x1470>)
 8002f4c:	2206      	movs	r2, #6
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f607 138c 	addw	r3, r7, #2444	; 0x98c
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe fe09 	bl	8001b6c <dodajMacierzLitery>
 8002f5a:	e077      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='!'){dlugoscZnaku=2;dodajMacierzLitery(literaWykrzyknik);}
 8002f5c:	4a44      	ldr	r2, [pc, #272]	; (8003070 <KonwertujTekst+0x146c>)
 8002f5e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002f62:	4413      	add	r3, r2
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b21      	cmp	r3, #33	; 0x21
 8002f68:	d108      	bne.n	8002f7c <KonwertujTekst+0x1378>
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <KonwertujTekst+0x1470>)
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f607 23c4 	addw	r3, r7, #2756	; 0xac4
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe fdf9 	bl	8001b6c <dodajMacierzLitery>
 8002f7a:	e067      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='|'){dlugoscZnaku=2;dodajMacierzLitery(literaKreskaPionowa);}
 8002f7c:	4a3c      	ldr	r2, [pc, #240]	; (8003070 <KonwertujTekst+0x146c>)
 8002f7e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002f82:	4413      	add	r3, r2
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b7c      	cmp	r3, #124	; 0x7c
 8002f88:	d108      	bne.n	8002f9c <KonwertujTekst+0x1398>
 8002f8a:	4b3a      	ldr	r3, [pc, #232]	; (8003074 <KonwertujTekst+0x1470>)
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f607 23d4 	addw	r3, r7, #2772	; 0xad4
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe fde9 	bl	8001b6c <dodajMacierzLitery>
 8002f9a:	e057      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='('){dlugoscZnaku=4;dodajMacierzLitery(literaNawiasLewy);}
 8002f9c:	4a34      	ldr	r2, [pc, #208]	; (8003070 <KonwertujTekst+0x146c>)
 8002f9e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	2b28      	cmp	r3, #40	; 0x28
 8002fa8:	d108      	bne.n	8002fbc <KonwertujTekst+0x13b8>
 8002faa:	4b32      	ldr	r3, [pc, #200]	; (8003074 <KonwertujTekst+0x1470>)
 8002fac:	2204      	movs	r2, #4
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f607 03ac 	addw	r3, r7, #2220	; 0x8ac
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe fdd9 	bl	8001b6c <dodajMacierzLitery>
 8002fba:	e047      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==')'){dlugoscZnaku=4;dodajMacierzLitery(literaNawiasPrawy);}
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <KonwertujTekst+0x146c>)
 8002fbe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b29      	cmp	r3, #41	; 0x29
 8002fc8:	d108      	bne.n	8002fdc <KonwertujTekst+0x13d8>
 8002fca:	4b2a      	ldr	r3, [pc, #168]	; (8003074 <KonwertujTekst+0x1470>)
 8002fcc:	2204      	movs	r2, #4
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f607 038c 	addw	r3, r7, #2188	; 0x88c
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7fe fdc9 	bl	8001b6c <dodajMacierzLitery>
 8002fda:	e037      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]=='.'){dlugoscZnaku=3;dodajMacierzLitery(literaKropka);}
 8002fdc:	4a24      	ldr	r2, [pc, #144]	; (8003070 <KonwertujTekst+0x146c>)
 8002fde:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8002fe2:	4413      	add	r3, r2
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b2e      	cmp	r3, #46	; 0x2e
 8002fe8:	d108      	bne.n	8002ffc <KonwertujTekst+0x13f8>
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <KonwertujTekst+0x1470>)
 8002fec:	2203      	movs	r2, #3
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	f607 23e4 	addw	r3, r7, #2788	; 0xae4
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fe fdb9 	bl	8001b6c <dodajMacierzLitery>
 8002ffa:	e027      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==','){dlugoscZnaku=3;dodajMacierzLitery(literaPrzecinek);}
 8002ffc:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <KonwertujTekst+0x146c>)
 8002ffe:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8003002:	4413      	add	r3, r2
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b2c      	cmp	r3, #44	; 0x2c
 8003008:	d108      	bne.n	800301c <KonwertujTekst+0x1418>
 800300a:	4b1a      	ldr	r3, [pc, #104]	; (8003074 <KonwertujTekst+0x1470>)
 800300c:	2203      	movs	r2, #3
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	f607 237c 	addw	r3, r7, #2684	; 0xa7c
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe fda9 	bl	8001b6c <dodajMacierzLitery>
 800301a:	e017      	b.n	800304c <KonwertujTekst+0x1448>
	else if(tekst[i]==58){dlugoscZnaku=3;dodajMacierzLitery(literaDwukropek);}
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <KonwertujTekst+0x146c>)
 800301e:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8003022:	4413      	add	r3, r2
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b3a      	cmp	r3, #58	; 0x3a
 8003028:	d108      	bne.n	800303c <KonwertujTekst+0x1438>
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <KonwertujTekst+0x1470>)
 800302c:	2203      	movs	r2, #3
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f607 2364 	addw	r3, r7, #2660	; 0xa64
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd99 	bl	8001b6c <dodajMacierzLitery>
 800303a:	e007      	b.n	800304c <KonwertujTekst+0x1448>
	else{dlugoscZnaku=6;dodajMacierzLitery(literaZnakZapytania);}
 800303c:	4b0d      	ldr	r3, [pc, #52]	; (8003074 <KonwertujTekst+0x1470>)
 800303e:	2206      	movs	r2, #6
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	f607 2394 	addw	r3, r7, #2708	; 0xa94
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fd90 	bl	8001b6c <dodajMacierzLitery>
for(int i=0; i<dlugosc+1; i++)
 800304c:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 8003050:	3301      	adds	r3, #1
 8003052:	f8c7 3b34 	str.w	r3, [r7, #2868]	; 0xb34
 8003056:	1d3b      	adds	r3, r7, #4
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3301      	adds	r3, #1
 800305c:	f8d7 2b34 	ldr.w	r2, [r7, #2868]	; 0xb34
 8003060:	429a      	cmp	r2, r3
 8003062:	f6ff aa6b 	blt.w	800253c <KonwertujTekst+0x938>


}
}
 8003066:	bf00      	nop
 8003068:	f607 3738 	addw	r7, r7, #2872	; 0xb38
 800306c:	46bd      	mov	sp, r7
 800306e:	bdb0      	pop	{r4, r5, r7, pc}
 8003070:	200002f8 	.word	0x200002f8
 8003074:	200000b8 	.word	0x200000b8

08003078 <DostosujDoPrzewijania>:

void DostosujDoPrzewijania(int ile_led){
 8003078:	b590      	push	{r4, r7, lr}
 800307a:	b089      	sub	sp, #36	; 0x24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	int aktualnaDlugosc = dlugoscTablicyGlownej();
 8003080:	f7fe fd50 	bl	8001b24 <dlugoscTablicyGlownej>
 8003084:	60f8      	str	r0, [r7, #12]
	for(int i=0; i<8;i++){
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	e01a      	b.n	80030c2 <DostosujDoPrzewijania+0x4a>
		for(int j=0; j<8*ile_led; j++){
 800308c:	2300      	movs	r3, #0
 800308e:	61bb      	str	r3, [r7, #24]
 8003090:	e00f      	b.n	80030b2 <DostosujDoPrzewijania+0x3a>
			tablicaGlowna[i][aktualnaDlugosc+j]=0;
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4413      	add	r3, r2
 8003098:	4924      	ldr	r1, [pc, #144]	; (800312c <DostosujDoPrzewijania+0xb4>)
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80030a0:	fb00 f202 	mul.w	r2, r0, r2
 80030a4:	440a      	add	r2, r1
 80030a6:	4413      	add	r3, r2
 80030a8:	2200      	movs	r2, #0
 80030aa:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8*ile_led; j++){
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	3301      	adds	r3, #1
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	dbea      	blt.n	8003092 <DostosujDoPrzewijania+0x1a>
	for(int i=0; i<8;i++){
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	3301      	adds	r3, #1
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	dde1      	ble.n	800308c <DostosujDoPrzewijania+0x14>
		}
		}

	aktualnaDlugosc = dlugoscTablicyGlownej();
 80030c8:	f7fe fd2c 	bl	8001b24 <dlugoscTablicyGlownej>
 80030cc:	60f8      	str	r0, [r7, #12]
	for(int i=0; i<8;i++){
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	e024      	b.n	800311e <DostosujDoPrzewijania+0xa6>
		for(int j=0; j<8*ile_led; j++){
 80030d4:	2300      	movs	r3, #0
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e019      	b.n	800310e <DostosujDoPrzewijania+0x96>
			tablicaGlowna[i][aktualnaDlugosc+j]=tablicaGlowna[i][j];
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4413      	add	r3, r2
 80030e0:	4912      	ldr	r1, [pc, #72]	; (800312c <DostosujDoPrzewijania+0xb4>)
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80030e8:	fb00 f202 	mul.w	r2, r0, r2
 80030ec:	4411      	add	r1, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	440a      	add	r2, r1
 80030f2:	7814      	ldrb	r4, [r2, #0]
 80030f4:	490d      	ldr	r1, [pc, #52]	; (800312c <DostosujDoPrzewijania+0xb4>)
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80030fc:	fb00 f202 	mul.w	r2, r0, r2
 8003100:	440a      	add	r2, r1
 8003102:	4413      	add	r3, r2
 8003104:	4622      	mov	r2, r4
 8003106:	701a      	strb	r2, [r3, #0]
		for(int j=0; j<8*ile_led; j++){
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	3301      	adds	r3, #1
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	429a      	cmp	r2, r3
 8003116:	dbe0      	blt.n	80030da <DostosujDoPrzewijania+0x62>
	for(int i=0; i<8;i++){
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	3301      	adds	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b07      	cmp	r3, #7
 8003122:	ddd7      	ble.n	80030d4 <DostosujDoPrzewijania+0x5c>
		}
		}


}
 8003124:	bf00      	nop
 8003126:	3724      	adds	r7, #36	; 0x24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd90      	pop	{r4, r7, pc}
 800312c:	20002334 	.word	0x20002334

08003130 <ArrayToLed>:


void ArrayToLed(int ile_led, int speed){
 8003130:	b590      	push	{r4, r7, lr}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
	int aktualnaDlugosc=(ile_led*8)+1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	3301      	adds	r3, #1
 8003140:	61fb      	str	r3, [r7, #28]

	if(mode==1){aktualnaDlugosc = dlugoscTablicyGlownej();}
 8003142:	4b41      	ldr	r3, [pc, #260]	; (8003248 <ArrayToLed+0x118>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <ArrayToLed+0x20>
 800314a:	f7fe fceb 	bl	8001b24 <dlugoscTablicyGlownej>
 800314e:	61f8      	str	r0, [r7, #28]

	for(int przewijacz=0;przewijacz<aktualnaDlugosc-(ile_led*8);przewijacz++){
 8003150:	2300      	movs	r3, #0
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	e068      	b.n	8003228 <ArrayToLed+0xf8>

	for(uint8_t i=0; i<8; i++){
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
 800315a:	e055      	b.n	8003208 <ArrayToLed+0xd8>
		HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2140      	movs	r1, #64	; 0x40
 8003160:	483a      	ldr	r0, [pc, #232]	; (800324c <ArrayToLed+0x11c>)
 8003162:	f000 fdeb 	bl	8003d3c <HAL_GPIO_WritePin>
	for(int k=0; k<ile_led; k++){
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
 800316a:	e041      	b.n	80031f0 <ArrayToLed+0xc0>
		uint8_t decimal=0;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<8; j++){
 8003170:	2300      	movs	r3, #0
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	e02d      	b.n	80031d2 <ArrayToLed+0xa2>

	decimal= decimal+tablicaGlowna[i][(k*8)+j+przewijacz]*(int)pow(2,7-j);
 8003176:	7dfa      	ldrb	r2, [r7, #23]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	00d9      	lsls	r1, r3, #3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4419      	add	r1, r3
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	440b      	add	r3, r1
 8003184:	4932      	ldr	r1, [pc, #200]	; (8003250 <ArrayToLed+0x120>)
 8003186:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800318a:	fb00 f202 	mul.w	r2, r0, r2
 800318e:	440a      	add	r2, r1
 8003190:	4413      	add	r3, r2
 8003192:	781c      	ldrb	r4, [r3, #0]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1c3 0307 	rsb	r3, r3, #7
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f976 	bl	800048c <__aeabi_i2d>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	ec43 2b11 	vmov	d1, r2, r3
 80031a8:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8003240 <ArrayToLed+0x110>
 80031ac:	f004 fdd8 	bl	8007d60 <pow>
 80031b0:	ec53 2b10 	vmov	r2, r3, d0
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7fd fc82 	bl	8000ac0 <__aeabi_d2iz>
 80031bc:	4603      	mov	r3, r0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	fb14 f303 	smulbb	r3, r4, r3
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	4413      	add	r3, r2
 80031ca:	73fb      	strb	r3, [r7, #15]
	for(int j=0; j<8; j++){
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b07      	cmp	r3, #7
 80031d6:	ddce      	ble.n	8003176 <ArrayToLed+0x46>

	}
	write_byte(i+1);
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	3301      	adds	r3, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f839 	bl	8003254 <write_byte>
	write_byte(decimal);
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 f835 	bl	8003254 <write_byte>
	for(int k=0; k<ile_led; k++){
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	3301      	adds	r3, #1
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	dbb9      	blt.n	800316c <ArrayToLed+0x3c>


	}


	HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, 1); //koniec ciągu danych
 80031f8:	2201      	movs	r2, #1
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	4813      	ldr	r0, [pc, #76]	; (800324c <ArrayToLed+0x11c>)
 80031fe:	f000 fd9d 	bl	8003d3c <HAL_GPIO_WritePin>
	for(uint8_t i=0; i<8; i++){
 8003202:	7dfb      	ldrb	r3, [r7, #23]
 8003204:	3301      	adds	r3, #1
 8003206:	75fb      	strb	r3, [r7, #23]
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b07      	cmp	r3, #7
 800320c:	d9a6      	bls.n	800315c <ArrayToLed+0x2c>
	}
HAL_Delay(20*(9-speed));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f1c3 0209 	rsb	r2, r3, #9
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fb03 	bl	8003828 <HAL_Delay>
	for(int przewijacz=0;przewijacz<aktualnaDlugosc-(ile_led*8);przewijacz++){
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3301      	adds	r3, #1
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	429a      	cmp	r2, r3
 8003234:	db8f      	blt.n	8003156 <ArrayToLed+0x26>
}

}
 8003236:	bf00      	nop
 8003238:	3724      	adds	r7, #36	; 0x24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd90      	pop	{r4, r7, pc}
 800323e:	bf00      	nop
 8003240:	00000000 	.word	0x00000000
 8003244:	40000000 	.word	0x40000000
 8003248:	20000004 	.word	0x20000004
 800324c:	40020000 	.word	0x40020000
 8003250:	20002334 	.word	0x20002334

08003254 <write_byte>:


void write_byte (uint8_t byte)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	71fb      	strb	r3, [r7, #7]
for (int i=0; i<8; i++){   //8 razy bo tyle ma bajt i tyle przesunięc wykonamy
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	e018      	b.n	8003296 <write_byte+0x42>
	HAL_GPIO_WritePin(clk_GPIO_Port, clk_Pin, 0);  //stan niski na zegarze
 8003264:	2200      	movs	r2, #0
 8003266:	2120      	movs	r1, #32
 8003268:	480e      	ldr	r0, [pc, #56]	; (80032a4 <write_byte+0x50>)
 800326a:	f000 fd67 	bl	8003d3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(data_in_GPIO_Port, data_in_Pin, byte&0x80); //bierzemy najstarszy bit
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	2180      	movs	r1, #128	; 0x80
 800327a:	480a      	ldr	r0, [pc, #40]	; (80032a4 <write_byte+0x50>)
 800327c:	f000 fd5e 	bl	8003d3c <HAL_GPIO_WritePin>
	byte= byte <<1; //przesuwamy w lewo
 8003280:	79fb      	ldrb	r3, [r7, #7]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(clk_GPIO_Port, clk_Pin, 1);  //stan wysoki na zegarze
 8003286:	2201      	movs	r2, #1
 8003288:	2120      	movs	r1, #32
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <write_byte+0x50>)
 800328c:	f000 fd56 	bl	8003d3c <HAL_GPIO_WritePin>
for (int i=0; i<8; i++){   //8 razy bo tyle ma bajt i tyle przesunięc wykonamy
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b07      	cmp	r3, #7
 800329a:	dde3      	ble.n	8003264 <write_byte+0x10>
}
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40020000 	.word	0x40020000

080032a8 <maxInit>:

void maxInit(uint8_t adres, uint8_t data){
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	460a      	mov	r2, r1
 80032b2:	71fb      	strb	r3, [r7, #7]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, 0); //cs na niskim
 80032b8:	2200      	movs	r2, #0
 80032ba:	2140      	movs	r1, #64	; 0x40
 80032bc:	480f      	ldr	r0, [pc, #60]	; (80032fc <maxInit+0x54>)
 80032be:	f000 fd3d 	bl	8003d3c <HAL_GPIO_WritePin>

	for(int i=0;i<ilosc_led;i++){
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e00a      	b.n	80032de <maxInit+0x36>

	write_byte(adres);
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ffc2 	bl	8003254 <write_byte>
	write_byte(data);
 80032d0:	79bb      	ldrb	r3, [r7, #6]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff ffbe 	bl	8003254 <write_byte>
	for(int i=0;i<ilosc_led;i++){
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <maxInit+0x58>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	dbef      	blt.n	80032c8 <maxInit+0x20>
}
	HAL_GPIO_WritePin(cs_GPIO_Port, cs_Pin, 1);  //cs na wysokim
 80032e8:	2201      	movs	r2, #1
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	4803      	ldr	r0, [pc, #12]	; (80032fc <maxInit+0x54>)
 80032ee:	f000 fd25 	bl	8003d3c <HAL_GPIO_WritePin>
}
 80032f2:	bf00      	nop
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40020000 	.word	0x40020000
 8003300:	200000b0 	.word	0x200000b0

08003304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003308:	f000 fa1c 	bl	8003744 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800330c:	f000 f844 	bl	8003398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003310:	f7fe fa54 	bl	80017bc <MX_GPIO_Init>
  MX_SPI2_Init();
 8003314:	f000 f8ae 	bl	8003474 <MX_SPI2_Init>
  MX_FATFS_Init();
 8003318:	f001 fd26 	bl	8004d68 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */


  if(otworzPlikZParametrami())otworzPlikZTekstem();
 800331c:	f7fe fb08 	bl	8001930 <otworzPlikZParametrami>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <main+0x26>
 8003326:	f7fe fad1 	bl	80018cc <otworzPlikZTekstem>

  wypelnijGlownaTablice();
 800332a:	f7fe fbd1 	bl	8001ad0 <wypelnijGlownaTablice>

  KonwertujTekst(strlen(tekst)-1);
 800332e:	4816      	ldr	r0, [pc, #88]	; (8003388 <main+0x84>)
 8003330:	f7fc ff52 	bl	80001d8 <strlen>
 8003334:	4603      	mov	r3, r0
 8003336:	3b01      	subs	r3, #1
 8003338:	4618      	mov	r0, r3
 800333a:	f7fe fc63 	bl	8001c04 <KonwertujTekst>

  maxInit(0x09,0x00);
 800333e:	2100      	movs	r1, #0
 8003340:	2009      	movs	r0, #9
 8003342:	f7ff ffb1 	bl	80032a8 <maxInit>
  maxInit(0x0a,kontrast);//kontrast
 8003346:	4b11      	ldr	r3, [pc, #68]	; (800338c <main+0x88>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	200a      	movs	r0, #10
 8003350:	f7ff ffaa 	bl	80032a8 <maxInit>
  maxInit(0x0b,0x07);//
 8003354:	2107      	movs	r1, #7
 8003356:	200b      	movs	r0, #11
 8003358:	f7ff ffa6 	bl	80032a8 <maxInit>
  maxInit(0x0c,0x01);//
 800335c:	2101      	movs	r1, #1
 800335e:	200c      	movs	r0, #12
 8003360:	f7ff ffa2 	bl	80032a8 <maxInit>
  maxInit(0x0f,0x00);//
 8003364:	2100      	movs	r1, #0
 8003366:	200f      	movs	r0, #15
 8003368:	f7ff ff9e 	bl	80032a8 <maxInit>

  DostosujDoPrzewijania(ilosc_led);
 800336c:	4b08      	ldr	r3, [pc, #32]	; (8003390 <main+0x8c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fe81 	bl	8003078 <DostosujDoPrzewijania>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ArrayToLed(ilosc_led,szybkosc);
 8003376:	4b06      	ldr	r3, [pc, #24]	; (8003390 <main+0x8c>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <main+0x90>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f7ff fed5 	bl	8003130 <ArrayToLed>
 8003386:	e7f6      	b.n	8003376 <main+0x72>
 8003388:	200002f8 	.word	0x200002f8
 800338c:	200000bc 	.word	0x200000bc
 8003390:	200000b0 	.word	0x200000b0
 8003394:	200000b4 	.word	0x200000b4

08003398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b094      	sub	sp, #80	; 0x50
 800339c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339e:	f107 0320 	add.w	r3, r7, #32
 80033a2:	2230      	movs	r2, #48	; 0x30
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f004 fcd1 	bl	8007d4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033bc:	2300      	movs	r3, #0
 80033be:	60bb      	str	r3, [r7, #8]
 80033c0:	4b28      	ldr	r3, [pc, #160]	; (8003464 <SystemClock_Config+0xcc>)
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	4a27      	ldr	r2, [pc, #156]	; (8003464 <SystemClock_Config+0xcc>)
 80033c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ca:	6413      	str	r3, [r2, #64]	; 0x40
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <SystemClock_Config+0xcc>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80033d8:	2300      	movs	r3, #0
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	4b22      	ldr	r3, [pc, #136]	; (8003468 <SystemClock_Config+0xd0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033e4:	4a20      	ldr	r2, [pc, #128]	; (8003468 <SystemClock_Config+0xd0>)
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ea:	6013      	str	r3, [r2, #0]
 80033ec:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <SystemClock_Config+0xd0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033fc:	2301      	movs	r3, #1
 80033fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003400:	2310      	movs	r3, #16
 8003402:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003404:	2302      	movs	r3, #2
 8003406:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003408:	2300      	movs	r3, #0
 800340a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800340c:	2308      	movs	r3, #8
 800340e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003410:	2354      	movs	r3, #84	; 0x54
 8003412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003414:	2302      	movs	r3, #2
 8003416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003418:	2304      	movs	r3, #4
 800341a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800341c:	f107 0320 	add.w	r3, r7, #32
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fca5 	bl	8003d70 <HAL_RCC_OscConfig>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800342c:	f000 f81e 	bl	800346c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003430:	230f      	movs	r3, #15
 8003432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003434:	2302      	movs	r3, #2
 8003436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800343c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	2102      	movs	r1, #2
 800344c:	4618      	mov	r0, r3
 800344e:	f000 feff 	bl	8004250 <HAL_RCC_ClockConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003458:	f000 f808 	bl	800346c <Error_Handler>
  }
}
 800345c:	bf00      	nop
 800345e:	3750      	adds	r7, #80	; 0x50
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000

0800346c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003470:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003472:	e7fe      	b.n	8003472 <Error_Handler+0x6>

08003474 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003478:	4b17      	ldr	r3, [pc, #92]	; (80034d8 <MX_SPI2_Init+0x64>)
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <MX_SPI2_Init+0x68>)
 800347c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800347e:	4b16      	ldr	r3, [pc, #88]	; (80034d8 <MX_SPI2_Init+0x64>)
 8003480:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003486:	4b14      	ldr	r3, [pc, #80]	; (80034d8 <MX_SPI2_Init+0x64>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800348c:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <MX_SPI2_Init+0x64>)
 800348e:	2200      	movs	r2, #0
 8003490:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <MX_SPI2_Init+0x64>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003498:	4b0f      	ldr	r3, [pc, #60]	; (80034d8 <MX_SPI2_Init+0x64>)
 800349a:	2200      	movs	r2, #0
 800349c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80034a6:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034a8:	2220      	movs	r2, #32
 80034aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80034b2:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b8:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80034be:	4b06      	ldr	r3, [pc, #24]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034c0:	220a      	movs	r2, #10
 80034c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80034c4:	4804      	ldr	r0, [pc, #16]	; (80034d8 <MX_SPI2_Init+0x64>)
 80034c6:	f001 f85b 	bl	8004580 <HAL_SPI_Init>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80034d0:	f7ff ffcc 	bl	800346c <Error_Handler>
  }

}
 80034d4:	bf00      	nop
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	2000c008 	.word	0x2000c008
 80034dc:	40003800 	.word	0x40003800

080034e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a28      	ldr	r2, [pc, #160]	; (80035a0 <HAL_SPI_MspInit+0xc0>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d14a      	bne.n	8003598 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003528:	f043 0304 	orr.w	r3, r3, #4
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a18      	ldr	r2, [pc, #96]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <HAL_SPI_MspInit+0xc4>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003556:	230c      	movs	r3, #12
 8003558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003562:	2303      	movs	r3, #3
 8003564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003566:	2305      	movs	r3, #5
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800356a:	f107 0314 	add.w	r3, r7, #20
 800356e:	4619      	mov	r1, r3
 8003570:	480d      	ldr	r0, [pc, #52]	; (80035a8 <HAL_SPI_MspInit+0xc8>)
 8003572:	f000 fa61 	bl	8003a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800357a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800357c:	2302      	movs	r3, #2
 800357e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003584:	2303      	movs	r3, #3
 8003586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003588:	2305      	movs	r3, #5
 800358a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358c:	f107 0314 	add.w	r3, r7, #20
 8003590:	4619      	mov	r1, r3
 8003592:	4806      	ldr	r0, [pc, #24]	; (80035ac <HAL_SPI_MspInit+0xcc>)
 8003594:	f000 fa50 	bl	8003a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003598:	bf00      	nop
 800359a:	3728      	adds	r7, #40	; 0x28
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	40003800 	.word	0x40003800
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020800 	.word	0x40020800
 80035ac:	40020400 	.word	0x40020400

080035b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	4b10      	ldr	r3, [pc, #64]	; (80035fc <HAL_MspInit+0x4c>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <HAL_MspInit+0x4c>)
 80035c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c4:	6453      	str	r3, [r2, #68]	; 0x44
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <HAL_MspInit+0x4c>)
 80035c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ce:	607b      	str	r3, [r7, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <HAL_MspInit+0x4c>)
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	4a08      	ldr	r2, [pc, #32]	; (80035fc <HAL_MspInit+0x4c>)
 80035dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035e0:	6413      	str	r3, [r2, #64]	; 0x40
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_MspInit+0x4c>)
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40023800 	.word	0x40023800

08003600 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <SDTimer_Handler+0x40>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <SDTimer_Handler+0x1c>
    Timer1--;
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <SDTimer_Handler+0x40>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b2da      	uxtb	r2, r3
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <SDTimer_Handler+0x40>)
 800361a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800361c:	4b09      	ldr	r3, [pc, #36]	; (8003644 <SDTimer_Handler+0x44>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d006      	beq.n	8003634 <SDTimer_Handler+0x34>
    Timer2--;
 8003626:	4b07      	ldr	r3, [pc, #28]	; (8003644 <SDTimer_Handler+0x44>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <SDTimer_Handler+0x44>)
 8003632:	701a      	strb	r2, [r3, #0]
}
 8003634:	bf00      	nop
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	2000c061 	.word	0x2000c061
 8003644:	2000c060 	.word	0x2000c060

08003648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800364c:	e7fe      	b.n	800364c <NMI_Handler+0x4>

0800364e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800364e:	b480      	push	{r7}
 8003650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003652:	e7fe      	b.n	8003652 <HardFault_Handler+0x4>

08003654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003658:	e7fe      	b.n	8003658 <MemManage_Handler+0x4>

0800365a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800365a:	b480      	push	{r7}
 800365c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800365e:	e7fe      	b.n	800365e <BusFault_Handler+0x4>

08003660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003664:	e7fe      	b.n	8003664 <UsageFault_Handler+0x4>

08003666 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003666:	b480      	push	{r7}
 8003668:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003678:	bf00      	nop
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <SysTick_Handler+0x30>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	b2db      	uxtb	r3, r3
 800369a:	3301      	adds	r3, #1
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b08      	ldr	r3, [pc, #32]	; (80036c0 <SysTick_Handler+0x30>)
 80036a0:	701a      	strb	r2, [r3, #0]
		  if(FatFsCnt >= 10)
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <SysTick_Handler+0x30>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b09      	cmp	r3, #9
 80036aa:	d904      	bls.n	80036b6 <SysTick_Handler+0x26>
		  {
		    FatFsCnt = 0;
 80036ac:	4b04      	ldr	r3, [pc, #16]	; (80036c0 <SysTick_Handler+0x30>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	701a      	strb	r2, [r3, #0]
		    SDTimer_Handler();
 80036b2:	f7ff ffa5 	bl	8003600 <SDTimer_Handler>
		  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b6:	f000 f897 	bl	80037e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036ba:	bf00      	nop
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	200000c0 	.word	0x200000c0

080036c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036c8:	4b08      	ldr	r3, [pc, #32]	; (80036ec <SystemInit+0x28>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <SystemInit+0x28>)
 80036d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <SystemInit+0x28>)
 80036da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036de:	609a      	str	r2, [r3, #8]
#endif
}
 80036e0:	bf00      	nop
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	e000ed00 	.word	0xe000ed00

080036f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80036f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003728 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80036f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80036f6:	e003      	b.n	8003700 <LoopCopyDataInit>

080036f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80036f8:	4b0c      	ldr	r3, [pc, #48]	; (800372c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80036fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80036fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80036fe:	3104      	adds	r1, #4

08003700 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003702:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003704:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003706:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003708:	d3f6      	bcc.n	80036f8 <CopyDataInit>
  ldr  r2, =_sbss
 800370a:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800370c:	e002      	b.n	8003714 <LoopFillZerobss>

0800370e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800370e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003710:	f842 3b04 	str.w	r3, [r2], #4

08003714 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003716:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003718:	d3f9      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800371a:	f7ff ffd3 	bl	80036c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800371e:	f004 fae7 	bl	8007cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003722:	f7ff fdef 	bl	8003304 <main>
  bx  lr    
 8003726:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003728:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800372c:	08009d18 	.word	0x08009d18
  ldr  r0, =_sdata
 8003730:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003734:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8003738:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 800373c:	2000e0d8 	.word	0x2000e0d8

08003740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003740:	e7fe      	b.n	8003740 <ADC_IRQHandler>
	...

08003744 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003748:	4b0e      	ldr	r3, [pc, #56]	; (8003784 <HAL_Init+0x40>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_Init+0x40>)
 800374e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003752:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_Init+0x40>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0a      	ldr	r2, [pc, #40]	; (8003784 <HAL_Init+0x40>)
 800375a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800375e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003760:	4b08      	ldr	r3, [pc, #32]	; (8003784 <HAL_Init+0x40>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a07      	ldr	r2, [pc, #28]	; (8003784 <HAL_Init+0x40>)
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800376c:	2003      	movs	r0, #3
 800376e:	f000 f92f 	bl	80039d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003772:	2000      	movs	r0, #0
 8003774:	f000 f808 	bl	8003788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003778:	f7ff ff1a 	bl	80035b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	40023c00 	.word	0x40023c00

08003788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <HAL_InitTick+0x54>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <HAL_InitTick+0x58>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800379e:	fbb3 f3f1 	udiv	r3, r3, r1
 80037a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 f939 	bl	8003a1e <HAL_SYSTICK_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e00e      	b.n	80037d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b0f      	cmp	r3, #15
 80037ba:	d80a      	bhi.n	80037d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037bc:	2200      	movs	r2, #0
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	f04f 30ff 	mov.w	r0, #4294967295
 80037c4:	f000 f90f 	bl	80039e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <HAL_InitTick+0x5c>)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e000      	b.n	80037d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000008 	.word	0x20000008
 80037e0:	20000010 	.word	0x20000010
 80037e4:	2000000c 	.word	0x2000000c

080037e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037ec:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_IncTick+0x20>)
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_IncTick+0x24>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	4a04      	ldr	r2, [pc, #16]	; (800380c <HAL_IncTick+0x24>)
 80037fa:	6013      	str	r3, [r2, #0]
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000010 	.word	0x20000010
 800380c:	2000c064 	.word	0x2000c064

08003810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return uwTick;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_GetTick+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	2000c064 	.word	0x2000c064

08003828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003830:	f7ff ffee 	bl	8003810 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d005      	beq.n	800384e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_Delay+0x40>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800384e:	bf00      	nop
 8003850:	f7ff ffde 	bl	8003810 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	429a      	cmp	r2, r3
 800385e:	d8f7      	bhi.n	8003850 <HAL_Delay+0x28>
  {
  }
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	20000010 	.word	0x20000010

0800386c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f003 0307 	and.w	r3, r3, #7
 800387a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800387c:	4b0c      	ldr	r3, [pc, #48]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003888:	4013      	ands	r3, r2
 800388a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800389c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800389e:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <__NVIC_SetPriorityGrouping+0x44>)
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	60d3      	str	r3, [r2, #12]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038b8:	4b04      	ldr	r3, [pc, #16]	; (80038cc <__NVIC_GetPriorityGrouping+0x18>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	f003 0307 	and.w	r3, r3, #7
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	6039      	str	r1, [r7, #0]
 80038da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	db0a      	blt.n	80038fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	b2da      	uxtb	r2, r3
 80038e8:	490c      	ldr	r1, [pc, #48]	; (800391c <__NVIC_SetPriority+0x4c>)
 80038ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ee:	0112      	lsls	r2, r2, #4
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038f8:	e00a      	b.n	8003910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	4908      	ldr	r1, [pc, #32]	; (8003920 <__NVIC_SetPriority+0x50>)
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	3b04      	subs	r3, #4
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	b2d2      	uxtb	r2, r2
 800390c:	440b      	add	r3, r1
 800390e:	761a      	strb	r2, [r3, #24]
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000e100 	.word	0xe000e100
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003924:	b480      	push	{r7}
 8003926:	b089      	sub	sp, #36	; 0x24
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f1c3 0307 	rsb	r3, r3, #7
 800393e:	2b04      	cmp	r3, #4
 8003940:	bf28      	it	cs
 8003942:	2304      	movcs	r3, #4
 8003944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3304      	adds	r3, #4
 800394a:	2b06      	cmp	r3, #6
 800394c:	d902      	bls.n	8003954 <NVIC_EncodePriority+0x30>
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	3b03      	subs	r3, #3
 8003952:	e000      	b.n	8003956 <NVIC_EncodePriority+0x32>
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003958:	f04f 32ff 	mov.w	r2, #4294967295
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	401a      	ands	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800396c:	f04f 31ff 	mov.w	r1, #4294967295
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	fa01 f303 	lsl.w	r3, r1, r3
 8003976:	43d9      	mvns	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800397c:	4313      	orrs	r3, r2
         );
}
 800397e:	4618      	mov	r0, r3
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
	...

0800398c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800399c:	d301      	bcc.n	80039a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800399e:	2301      	movs	r3, #1
 80039a0:	e00f      	b.n	80039c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <SysTick_Config+0x40>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039aa:	210f      	movs	r1, #15
 80039ac:	f04f 30ff 	mov.w	r0, #4294967295
 80039b0:	f7ff ff8e 	bl	80038d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039b4:	4b05      	ldr	r3, [pc, #20]	; (80039cc <SysTick_Config+0x40>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ba:	4b04      	ldr	r3, [pc, #16]	; (80039cc <SysTick_Config+0x40>)
 80039bc:	2207      	movs	r2, #7
 80039be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	e000e010 	.word	0xe000e010

080039d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff ff47 	bl	800386c <__NVIC_SetPriorityGrouping>
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b086      	sub	sp, #24
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039f8:	f7ff ff5c 	bl	80038b4 <__NVIC_GetPriorityGrouping>
 80039fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	6978      	ldr	r0, [r7, #20]
 8003a04:	f7ff ff8e 	bl	8003924 <NVIC_EncodePriority>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff5d 	bl	80038d0 <__NVIC_SetPriority>
}
 8003a16:	bf00      	nop
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffb0 	bl	800398c <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b089      	sub	sp, #36	; 0x24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e159      	b.n	8003d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a54:	2201      	movs	r2, #1
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4013      	ands	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	f040 8148 	bne.w	8003d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d00b      	beq.n	8003a92 <HAL_GPIO_Init+0x5a>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d007      	beq.n	8003a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a86:	2b11      	cmp	r3, #17
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b12      	cmp	r3, #18
 8003a90:	d130      	bne.n	8003af4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	2203      	movs	r2, #3
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ac8:	2201      	movs	r2, #1
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 0201 	and.w	r2, r3, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d003      	beq.n	8003b34 <HAL_GPIO_Init+0xfc>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b12      	cmp	r3, #18
 8003b32:	d123      	bne.n	8003b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	08da      	lsrs	r2, r3, #3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	3208      	adds	r2, #8
 8003b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	220f      	movs	r2, #15
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f003 0307 	and.w	r3, r3, #7
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	08da      	lsrs	r2, r3, #3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3208      	adds	r2, #8
 8003b76:	69b9      	ldr	r1, [r7, #24]
 8003b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0203 	and.w	r2, r3, #3
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a2 	beq.w	8003d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	4b56      	ldr	r3, [pc, #344]	; (8003d1c <HAL_GPIO_Init+0x2e4>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	4a55      	ldr	r2, [pc, #340]	; (8003d1c <HAL_GPIO_Init+0x2e4>)
 8003bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8003bce:	4b53      	ldr	r3, [pc, #332]	; (8003d1c <HAL_GPIO_Init+0x2e4>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bd6:	60fb      	str	r3, [r7, #12]
 8003bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bda:	4a51      	ldr	r2, [pc, #324]	; (8003d20 <HAL_GPIO_Init+0x2e8>)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	089b      	lsrs	r3, r3, #2
 8003be0:	3302      	adds	r3, #2
 8003be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	220f      	movs	r2, #15
 8003bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	69ba      	ldr	r2, [r7, #24]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a48      	ldr	r2, [pc, #288]	; (8003d24 <HAL_GPIO_Init+0x2ec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d019      	beq.n	8003c3a <HAL_GPIO_Init+0x202>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a47      	ldr	r2, [pc, #284]	; (8003d28 <HAL_GPIO_Init+0x2f0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_GPIO_Init+0x1fe>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a46      	ldr	r2, [pc, #280]	; (8003d2c <HAL_GPIO_Init+0x2f4>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00d      	beq.n	8003c32 <HAL_GPIO_Init+0x1fa>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a45      	ldr	r2, [pc, #276]	; (8003d30 <HAL_GPIO_Init+0x2f8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d007      	beq.n	8003c2e <HAL_GPIO_Init+0x1f6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a44      	ldr	r2, [pc, #272]	; (8003d34 <HAL_GPIO_Init+0x2fc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d101      	bne.n	8003c2a <HAL_GPIO_Init+0x1f2>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e008      	b.n	8003c3c <HAL_GPIO_Init+0x204>
 8003c2a:	2307      	movs	r3, #7
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x204>
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e004      	b.n	8003c3c <HAL_GPIO_Init+0x204>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e002      	b.n	8003c3c <HAL_GPIO_Init+0x204>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_GPIO_Init+0x204>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	f002 0203 	and.w	r2, r2, #3
 8003c42:	0092      	lsls	r2, r2, #2
 8003c44:	4093      	lsls	r3, r2
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c4c:	4934      	ldr	r1, [pc, #208]	; (8003d20 <HAL_GPIO_Init+0x2e8>)
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	089b      	lsrs	r3, r3, #2
 8003c52:	3302      	adds	r3, #2
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	4013      	ands	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c76:	69ba      	ldr	r2, [r7, #24]
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7e:	4a2e      	ldr	r2, [pc, #184]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c84:	4b2c      	ldr	r3, [pc, #176]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	69ba      	ldr	r2, [r7, #24]
 8003c90:	4013      	ands	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cae:	4b22      	ldr	r3, [pc, #136]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	43db      	mvns	r3, r3
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cd2:	4a19      	ldr	r2, [pc, #100]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd8:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d003      	beq.n	8003cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cf4:	69ba      	ldr	r2, [r7, #24]
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cfc:	4a0e      	ldr	r2, [pc, #56]	; (8003d38 <HAL_GPIO_Init+0x300>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	3301      	adds	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	2b0f      	cmp	r3, #15
 8003d0c:	f67f aea2 	bls.w	8003a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d10:	bf00      	nop
 8003d12:	3724      	adds	r7, #36	; 0x24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020800 	.word	0x40020800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40013c00 	.word	0x40013c00

08003d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	787b      	ldrb	r3, [r7, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d58:	e003      	b.n	8003d62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	041a      	lsls	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	619a      	str	r2, [r3, #24]
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e25b      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d075      	beq.n	8003e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d8e:	4ba3      	ldr	r3, [pc, #652]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f003 030c 	and.w	r3, r3, #12
 8003d96:	2b04      	cmp	r3, #4
 8003d98:	d00c      	beq.n	8003db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d9a:	4ba0      	ldr	r3, [pc, #640]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003da2:	2b08      	cmp	r3, #8
 8003da4:	d112      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003da6:	4b9d      	ldr	r3, [pc, #628]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db2:	d10b      	bne.n	8003dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	4b99      	ldr	r3, [pc, #612]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d05b      	beq.n	8003e78 <HAL_RCC_OscConfig+0x108>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d157      	bne.n	8003e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e236      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd4:	d106      	bne.n	8003de4 <HAL_RCC_OscConfig+0x74>
 8003dd6:	4b91      	ldr	r3, [pc, #580]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a90      	ldr	r2, [pc, #576]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e01d      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dec:	d10c      	bne.n	8003e08 <HAL_RCC_OscConfig+0x98>
 8003dee:	4b8b      	ldr	r3, [pc, #556]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a8a      	ldr	r2, [pc, #552]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6013      	str	r3, [r2, #0]
 8003dfa:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a87      	ldr	r2, [pc, #540]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e00b      	b.n	8003e20 <HAL_RCC_OscConfig+0xb0>
 8003e08:	4b84      	ldr	r3, [pc, #528]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a83      	ldr	r2, [pc, #524]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a80      	ldr	r2, [pc, #512]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d013      	beq.n	8003e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7ff fcf2 	bl	8003810 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7ff fcee 	bl	8003810 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1fb      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e42:	4b76      	ldr	r3, [pc, #472]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0xc0>
 8003e4e:	e014      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7ff fcde 	bl	8003810 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e58:	f7ff fcda 	bl	8003810 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b64      	cmp	r3, #100	; 0x64
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e1e7      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e6a:	4b6c      	ldr	r3, [pc, #432]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0xe8>
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d063      	beq.n	8003f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e92:	4b62      	ldr	r3, [pc, #392]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e9a:	2b08      	cmp	r3, #8
 8003e9c:	d11c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d116      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eaa:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d001      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e1bb      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec2:	4b56      	ldr	r3, [pc, #344]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4952      	ldr	r1, [pc, #328]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ed6:	e03a      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ee0:	4b4f      	ldr	r3, [pc, #316]	; (8004020 <HAL_RCC_OscConfig+0x2b0>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7ff fc93 	bl	8003810 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eee:	f7ff fc8f 	bl	8003810 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e19c      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f00:	4b46      	ldr	r3, [pc, #280]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4940      	ldr	r1, [pc, #256]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	e015      	b.n	8003f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f22:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_RCC_OscConfig+0x2b0>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7ff fc72 	bl	8003810 <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f30:	f7ff fc6e 	bl	8003810 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e17b      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f42:	4b36      	ldr	r3, [pc, #216]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1f0      	bne.n	8003f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d030      	beq.n	8003fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f62:	4b30      	ldr	r3, [pc, #192]	; (8004024 <HAL_RCC_OscConfig+0x2b4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f68:	f7ff fc52 	bl	8003810 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f70:	f7ff fc4e 	bl	8003810 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e15b      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f82:	4b26      	ldr	r3, [pc, #152]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0f0      	beq.n	8003f70 <HAL_RCC_OscConfig+0x200>
 8003f8e:	e015      	b.n	8003fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <HAL_RCC_OscConfig+0x2b4>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f96:	f7ff fc3b 	bl	8003810 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7ff fc37 	bl	8003810 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e144      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b1a      	ldr	r3, [pc, #104]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1f0      	bne.n	8003f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a0 	beq.w	800410a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10f      	bne.n	8003ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	4b0f      	ldr	r3, [pc, #60]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	4a0e      	ldr	r2, [pc, #56]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	60bb      	str	r3, [r7, #8]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004002:	2b00      	cmp	r3, #0
 8004004:	d121      	bne.n	800404a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004006:	4b08      	ldr	r3, [pc, #32]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a07      	ldr	r2, [pc, #28]	; (8004028 <HAL_RCC_OscConfig+0x2b8>)
 800400c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004012:	f7ff fbfd 	bl	8003810 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004018:	e011      	b.n	800403e <HAL_RCC_OscConfig+0x2ce>
 800401a:	bf00      	nop
 800401c:	40023800 	.word	0x40023800
 8004020:	42470000 	.word	0x42470000
 8004024:	42470e80 	.word	0x42470e80
 8004028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800402c:	f7ff fbf0 	bl	8003810 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e0fd      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800403e:	4b81      	ldr	r3, [pc, #516]	; (8004244 <HAL_RCC_OscConfig+0x4d4>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x2f0>
 8004052:	4b7d      	ldr	r3, [pc, #500]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	4a7c      	ldr	r2, [pc, #496]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004058:	f043 0301 	orr.w	r3, r3, #1
 800405c:	6713      	str	r3, [r2, #112]	; 0x70
 800405e:	e01c      	b.n	800409a <HAL_RCC_OscConfig+0x32a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b05      	cmp	r3, #5
 8004066:	d10c      	bne.n	8004082 <HAL_RCC_OscConfig+0x312>
 8004068:	4b77      	ldr	r3, [pc, #476]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 800406a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406c:	4a76      	ldr	r2, [pc, #472]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 800406e:	f043 0304 	orr.w	r3, r3, #4
 8004072:	6713      	str	r3, [r2, #112]	; 0x70
 8004074:	4b74      	ldr	r3, [pc, #464]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004078:	4a73      	ldr	r2, [pc, #460]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6713      	str	r3, [r2, #112]	; 0x70
 8004080:	e00b      	b.n	800409a <HAL_RCC_OscConfig+0x32a>
 8004082:	4b71      	ldr	r3, [pc, #452]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004086:	4a70      	ldr	r2, [pc, #448]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6713      	str	r3, [r2, #112]	; 0x70
 800408e:	4b6e      	ldr	r3, [pc, #440]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004092:	4a6d      	ldr	r2, [pc, #436]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004094:	f023 0304 	bic.w	r3, r3, #4
 8004098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d015      	beq.n	80040ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040a2:	f7ff fbb5 	bl	8003810 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a8:	e00a      	b.n	80040c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040aa:	f7ff fbb1 	bl	8003810 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e0bc      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040c0:	4b61      	ldr	r3, [pc, #388]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0ee      	beq.n	80040aa <HAL_RCC_OscConfig+0x33a>
 80040cc:	e014      	b.n	80040f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ce:	f7ff fb9f 	bl	8003810 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d4:	e00a      	b.n	80040ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d6:	f7ff fb9b 	bl	8003810 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e0a6      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	4b56      	ldr	r3, [pc, #344]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1ee      	bne.n	80040d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fe:	4b52      	ldr	r3, [pc, #328]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	4a51      	ldr	r2, [pc, #324]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	2b00      	cmp	r3, #0
 8004110:	f000 8092 	beq.w	8004238 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004114:	4b4c      	ldr	r3, [pc, #304]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 030c 	and.w	r3, r3, #12
 800411c:	2b08      	cmp	r3, #8
 800411e:	d05c      	beq.n	80041da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b02      	cmp	r3, #2
 8004126:	d141      	bne.n	80041ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004128:	4b48      	ldr	r3, [pc, #288]	; (800424c <HAL_RCC_OscConfig+0x4dc>)
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7ff fb6f 	bl	8003810 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004136:	f7ff fb6b 	bl	8003810 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e078      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f0      	bne.n	8004136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a1b      	ldr	r3, [r3, #32]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	019b      	lsls	r3, r3, #6
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	085b      	lsrs	r3, r3, #1
 800416c:	3b01      	subs	r3, #1
 800416e:	041b      	lsls	r3, r3, #16
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	061b      	lsls	r3, r3, #24
 8004178:	4933      	ldr	r1, [pc, #204]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 800417a:	4313      	orrs	r3, r2
 800417c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_RCC_OscConfig+0x4dc>)
 8004180:	2201      	movs	r2, #1
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7ff fb44 	bl	8003810 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7ff fb40 	bl	8003810 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e04d      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800419e:	4b2a      	ldr	r3, [pc, #168]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x41c>
 80041aa:	e045      	b.n	8004238 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_OscConfig+0x4dc>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b2:	f7ff fb2d 	bl	8003810 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ba:	f7ff fb29 	bl	8003810 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e036      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f0      	bne.n	80041ba <HAL_RCC_OscConfig+0x44a>
 80041d8:	e02e      	b.n	8004238 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e029      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041e6:	4b18      	ldr	r3, [pc, #96]	; (8004248 <HAL_RCC_OscConfig+0x4d8>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d11c      	bne.n	8004234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d115      	bne.n	8004234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800420e:	4013      	ands	r3, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004214:	4293      	cmp	r3, r2
 8004216:	d10d      	bne.n	8004234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004222:	429a      	cmp	r2, r3
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004230:	429a      	cmp	r2, r3
 8004232:	d001      	beq.n	8004238 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e000      	b.n	800423a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3718      	adds	r7, #24
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40007000 	.word	0x40007000
 8004248:	40023800 	.word	0x40023800
 800424c:	42470060 	.word	0x42470060

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0cc      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d90c      	bls.n	800428c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b65      	ldr	r3, [pc, #404]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 030f 	and.w	r3, r3, #15
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	429a      	cmp	r2, r3
 8004286:	d001      	beq.n	800428c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0b8      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d020      	beq.n	80042da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042a4:	4b59      	ldr	r3, [pc, #356]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a58      	ldr	r2, [pc, #352]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042bc:	4b53      	ldr	r3, [pc, #332]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	4a52      	ldr	r2, [pc, #328]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c8:	4b50      	ldr	r3, [pc, #320]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	494d      	ldr	r1, [pc, #308]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d044      	beq.n	8004370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d119      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e07f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d003      	beq.n	800430e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800430a:	2b03      	cmp	r3, #3
 800430c:	d107      	bne.n	800431e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800430e:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e06f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e067      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800432e:	4b37      	ldr	r3, [pc, #220]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f023 0203 	bic.w	r2, r3, #3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4934      	ldr	r1, [pc, #208]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004340:	f7ff fa66 	bl	8003810 <HAL_GetTick>
 8004344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	e00a      	b.n	800435e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004348:	f7ff fa62 	bl	8003810 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e04f      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800435e:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 020c 	and.w	r2, r3, #12
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	429a      	cmp	r2, r3
 800436e:	d1eb      	bne.n	8004348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004370:	4b25      	ldr	r3, [pc, #148]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	683a      	ldr	r2, [r7, #0]
 800437a:	429a      	cmp	r2, r3
 800437c:	d20c      	bcs.n	8004398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437e:	4b22      	ldr	r3, [pc, #136]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	683a      	ldr	r2, [r7, #0]
 8004390:	429a      	cmp	r2, r3
 8004392:	d001      	beq.n	8004398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e032      	b.n	80043fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043a4:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	4916      	ldr	r1, [pc, #88]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043c2:	4b12      	ldr	r3, [pc, #72]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	490e      	ldr	r1, [pc, #56]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043d6:	f000 f821 	bl	800441c <HAL_RCC_GetSysClockFreq>
 80043da:	4601      	mov	r1, r0
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	5cd3      	ldrb	r3, [r2, r3]
 80043ea:	fa21 f303 	lsr.w	r3, r1, r3
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <HAL_RCC_ClockConfig+0x1c4>)
 80043f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <HAL_RCC_ClockConfig+0x1c8>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff f9c6 	bl	8003788 <HAL_InitTick>

  return HAL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023c00 	.word	0x40023c00
 800440c:	40023800 	.word	0x40023800
 8004410:	08009870 	.word	0x08009870
 8004414:	20000008 	.word	0x20000008
 8004418:	2000000c 	.word	0x2000000c

0800441c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	2300      	movs	r3, #0
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004432:	4b50      	ldr	r3, [pc, #320]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b04      	cmp	r3, #4
 800443c:	d007      	beq.n	800444e <HAL_RCC_GetSysClockFreq+0x32>
 800443e:	2b08      	cmp	r3, #8
 8004440:	d008      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x38>
 8004442:	2b00      	cmp	r3, #0
 8004444:	f040 808d 	bne.w	8004562 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_RCC_GetSysClockFreq+0x15c>)
 800444a:	60bb      	str	r3, [r7, #8]
       break;
 800444c:	e08c      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444e:	4b4b      	ldr	r3, [pc, #300]	; (800457c <HAL_RCC_GetSysClockFreq+0x160>)
 8004450:	60bb      	str	r3, [r7, #8]
      break;
 8004452:	e089      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004454:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800445c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800445e:	4b45      	ldr	r3, [pc, #276]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d023      	beq.n	80044b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800446a:	4b42      	ldr	r3, [pc, #264]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	099b      	lsrs	r3, r3, #6
 8004470:	f04f 0400 	mov.w	r4, #0
 8004474:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	ea03 0501 	and.w	r5, r3, r1
 8004480:	ea04 0602 	and.w	r6, r4, r2
 8004484:	4a3d      	ldr	r2, [pc, #244]	; (800457c <HAL_RCC_GetSysClockFreq+0x160>)
 8004486:	fb02 f106 	mul.w	r1, r2, r6
 800448a:	2200      	movs	r2, #0
 800448c:	fb02 f205 	mul.w	r2, r2, r5
 8004490:	440a      	add	r2, r1
 8004492:	493a      	ldr	r1, [pc, #232]	; (800457c <HAL_RCC_GetSysClockFreq+0x160>)
 8004494:	fba5 0101 	umull	r0, r1, r5, r1
 8004498:	1853      	adds	r3, r2, r1
 800449a:	4619      	mov	r1, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f04f 0400 	mov.w	r4, #0
 80044a2:	461a      	mov	r2, r3
 80044a4:	4623      	mov	r3, r4
 80044a6:	f7fc fb33 	bl	8000b10 <__aeabi_uldivmod>
 80044aa:	4603      	mov	r3, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	60fb      	str	r3, [r7, #12]
 80044b0:	e049      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b30      	ldr	r3, [pc, #192]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	f04f 0400 	mov.w	r4, #0
 80044bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80044c0:	f04f 0200 	mov.w	r2, #0
 80044c4:	ea03 0501 	and.w	r5, r3, r1
 80044c8:	ea04 0602 	and.w	r6, r4, r2
 80044cc:	4629      	mov	r1, r5
 80044ce:	4632      	mov	r2, r6
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f04f 0400 	mov.w	r4, #0
 80044d8:	0154      	lsls	r4, r2, #5
 80044da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80044de:	014b      	lsls	r3, r1, #5
 80044e0:	4619      	mov	r1, r3
 80044e2:	4622      	mov	r2, r4
 80044e4:	1b49      	subs	r1, r1, r5
 80044e6:	eb62 0206 	sbc.w	r2, r2, r6
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	f04f 0400 	mov.w	r4, #0
 80044f2:	0194      	lsls	r4, r2, #6
 80044f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80044f8:	018b      	lsls	r3, r1, #6
 80044fa:	1a5b      	subs	r3, r3, r1
 80044fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004500:	f04f 0100 	mov.w	r1, #0
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	00e2      	lsls	r2, r4, #3
 800450a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800450e:	00d9      	lsls	r1, r3, #3
 8004510:	460b      	mov	r3, r1
 8004512:	4614      	mov	r4, r2
 8004514:	195b      	adds	r3, r3, r5
 8004516:	eb44 0406 	adc.w	r4, r4, r6
 800451a:	f04f 0100 	mov.w	r1, #0
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	02a2      	lsls	r2, r4, #10
 8004524:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004528:	0299      	lsls	r1, r3, #10
 800452a:	460b      	mov	r3, r1
 800452c:	4614      	mov	r4, r2
 800452e:	4618      	mov	r0, r3
 8004530:	4621      	mov	r1, r4
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	461a      	mov	r2, r3
 800453a:	4623      	mov	r3, r4
 800453c:	f7fc fae8 	bl	8000b10 <__aeabi_uldivmod>
 8004540:	4603      	mov	r3, r0
 8004542:	460c      	mov	r4, r1
 8004544:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_GetSysClockFreq+0x158>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	0c1b      	lsrs	r3, r3, #16
 800454c:	f003 0303 	and.w	r3, r3, #3
 8004550:	3301      	adds	r3, #1
 8004552:	005b      	lsls	r3, r3, #1
 8004554:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	60bb      	str	r3, [r7, #8]
      break;
 8004560:	e002      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004564:	60bb      	str	r3, [r7, #8]
      break;
 8004566:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004568:	68bb      	ldr	r3, [r7, #8]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	00f42400 	.word	0x00f42400
 800457c:	017d7840 	.word	0x017d7840

08004580 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e056      	b.n	8004640 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d106      	bne.n	80045b2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7fe ff97 	bl	80034e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2202      	movs	r2, #2
 80045b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045c8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	ea42 0103 	orr.w	r1, r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	0c1b      	lsrs	r3, r3, #16
 8004610:	f003 0104 	and.w	r1, r3, #4
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b088      	sub	sp, #32
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	603b      	str	r3, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_SPI_Transmit+0x22>
 8004666:	2302      	movs	r3, #2
 8004668:	e11e      	b.n	80048a8 <HAL_SPI_Transmit+0x260>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004672:	f7ff f8cd 	bl	8003810 <HAL_GetTick>
 8004676:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004678:	88fb      	ldrh	r3, [r7, #6]
 800467a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d002      	beq.n	800468e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004688:	2302      	movs	r3, #2
 800468a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800468c:	e103      	b.n	8004896 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_SPI_Transmit+0x52>
 8004694:	88fb      	ldrh	r3, [r7, #6]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d102      	bne.n	80046a0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800469e:	e0fa      	b.n	8004896 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2203      	movs	r2, #3
 80046a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	68ba      	ldr	r2, [r7, #8]
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	88fa      	ldrh	r2, [r7, #6]
 80046b8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046e6:	d107      	bne.n	80046f8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004702:	2b40      	cmp	r3, #64	; 0x40
 8004704:	d007      	beq.n	8004716 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004714:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800471e:	d14b      	bne.n	80047b8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <HAL_SPI_Transmit+0xe6>
 8004728:	8afb      	ldrh	r3, [r7, #22]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d13e      	bne.n	80047ac <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004748:	b29b      	uxth	r3, r3
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004752:	e02b      	b.n	80047ac <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b02      	cmp	r3, #2
 8004760:	d112      	bne.n	8004788 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	881a      	ldrh	r2, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	1c9a      	adds	r2, r3, #2
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800477c:	b29b      	uxth	r3, r3
 800477e:	3b01      	subs	r3, #1
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	86da      	strh	r2, [r3, #54]	; 0x36
 8004786:	e011      	b.n	80047ac <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004788:	f7ff f842 	bl	8003810 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	429a      	cmp	r2, r3
 8004796:	d803      	bhi.n	80047a0 <HAL_SPI_Transmit+0x158>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d102      	bne.n	80047a6 <HAL_SPI_Transmit+0x15e>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047aa:	e074      	b.n	8004896 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1ce      	bne.n	8004754 <HAL_SPI_Transmit+0x10c>
 80047b6:	e04c      	b.n	8004852 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d002      	beq.n	80047c6 <HAL_SPI_Transmit+0x17e>
 80047c0:	8afb      	ldrh	r3, [r7, #22]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d140      	bne.n	8004848 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	330c      	adds	r3, #12
 80047d0:	7812      	ldrb	r2, [r2, #0]
 80047d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	3b01      	subs	r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80047ec:	e02c      	b.n	8004848 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d113      	bne.n	8004824 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	7812      	ldrb	r2, [r2, #0]
 8004808:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	86da      	strh	r2, [r3, #54]	; 0x36
 8004822:	e011      	b.n	8004848 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004824:	f7fe fff4 	bl	8003810 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d803      	bhi.n	800483c <HAL_SPI_Transmit+0x1f4>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483a:	d102      	bne.n	8004842 <HAL_SPI_Transmit+0x1fa>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004846:	e026      	b.n	8004896 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484c:	b29b      	uxth	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1cd      	bne.n	80047ee <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 fa44 	bl	8004ce4 <SPI_EndRxTxTransaction>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d002      	beq.n	8004868 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2220      	movs	r2, #32
 8004866:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004870:	2300      	movs	r3, #0
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488a:	2b00      	cmp	r3, #0
 800488c:	d002      	beq.n	8004894 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	77fb      	strb	r3, [r7, #31]
 8004892:	e000      	b.n	8004896 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004894:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80048a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80048be:	2301      	movs	r3, #1
 80048c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80048c2:	2300      	movs	r3, #0
 80048c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_SPI_TransmitReceive+0x26>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e18a      	b.n	8004bec <HAL_SPI_TransmitReceive+0x33c>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048de:	f7fe ff97 	bl	8003810 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80048f4:	887b      	ldrh	r3, [r7, #2]
 80048f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80048f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d00f      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x70>
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004906:	d107      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d103      	bne.n	8004918 <HAL_SPI_TransmitReceive+0x68>
 8004910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004914:	2b04      	cmp	r3, #4
 8004916:	d003      	beq.n	8004920 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004918:	2302      	movs	r3, #2
 800491a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800491e:	e15b      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d005      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x82>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d002      	beq.n	8004932 <HAL_SPI_TransmitReceive+0x82>
 800492c:	887b      	ldrh	r3, [r7, #2]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d103      	bne.n	800493a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004938:	e14e      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b04      	cmp	r3, #4
 8004944:	d003      	beq.n	800494e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2205      	movs	r2, #5
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	887a      	ldrh	r2, [r7, #2]
 800495e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	887a      	ldrh	r2, [r7, #2]
 8004964:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	887a      	ldrh	r2, [r7, #2]
 8004970:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	887a      	ldrh	r2, [r7, #2]
 8004976:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d007      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049aa:	d178      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <HAL_SPI_TransmitReceive+0x10a>
 80049b4:	8b7b      	ldrh	r3, [r7, #26]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d166      	bne.n	8004a88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049be:	881a      	ldrh	r2, [r3, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	1c9a      	adds	r2, r3, #2
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049de:	e053      	b.n	8004a88 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d11b      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x176>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d016      	beq.n	8004a26 <HAL_SPI_TransmitReceive+0x176>
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d113      	bne.n	8004a26 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	881a      	ldrh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d119      	bne.n	8004a68 <HAL_SPI_TransmitReceive+0x1b8>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d014      	beq.n	8004a68 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	b292      	uxth	r2, r2
 8004a4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a50:	1c9a      	adds	r2, r3, #2
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a64:	2301      	movs	r3, #1
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004a68:	f7fe fed2 	bl	8003810 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d807      	bhi.n	8004a88 <HAL_SPI_TransmitReceive+0x1d8>
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d003      	beq.n	8004a88 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a86:	e0a7      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1a6      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x130>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d1a1      	bne.n	80049e0 <HAL_SPI_TransmitReceive+0x130>
 8004a9c:	e07c      	b.n	8004b98 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d002      	beq.n	8004aac <HAL_SPI_TransmitReceive+0x1fc>
 8004aa6:	8b7b      	ldrh	r3, [r7, #26]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d16b      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	330c      	adds	r3, #12
 8004ab6:	7812      	ldrb	r2, [r2, #0]
 8004ab8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ad2:	e057      	b.n	8004b84 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d11c      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x26c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d017      	beq.n	8004b1c <HAL_SPI_TransmitReceive+0x26c>
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d114      	bne.n	8004b1c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	7812      	ldrb	r2, [r2, #0]
 8004afe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d119      	bne.n	8004b5e <HAL_SPI_TransmitReceive+0x2ae>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d014      	beq.n	8004b5e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004b5e:	f7fe fe57 	bl	8003810 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d803      	bhi.n	8004b76 <HAL_SPI_TransmitReceive+0x2c6>
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d102      	bne.n	8004b7c <HAL_SPI_TransmitReceive+0x2cc>
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d103      	bne.n	8004b84 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b82:	e029      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1a2      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x224>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d19d      	bne.n	8004ad4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f8a1 	bl	8004ce4 <SPI_EndRxTxTransaction>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d006      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004bb4:	e010      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10b      	bne.n	8004bd6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	617b      	str	r3, [r7, #20]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	e000      	b.n	8004bd8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004be8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3730      	adds	r7, #48	; 0x30
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c02:	b2db      	uxtb	r3, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c20:	e04c      	b.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d048      	beq.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c2a:	f7fe fdf1 	bl	8003810 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d902      	bls.n	8004c40 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d13d      	bne.n	8004cbc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c4e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c58:	d111      	bne.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c62:	d004      	beq.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c6c:	d107      	bne.n	8004c7e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c7c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c86:	d10f      	bne.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ca6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e00f      	b.n	8004cdc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	bf0c      	ite	eq
 8004ccc:	2301      	moveq	r3, #1
 8004cce:	2300      	movne	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	79fb      	ldrb	r3, [r7, #7]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d1a3      	bne.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3710      	adds	r7, #16
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004cf0:	4b1b      	ldr	r3, [pc, #108]	; (8004d60 <SPI_EndRxTxTransaction+0x7c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1b      	ldr	r2, [pc, #108]	; (8004d64 <SPI_EndRxTxTransaction+0x80>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0d5b      	lsrs	r3, r3, #21
 8004cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d112      	bne.n	8004d36 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	f7ff ff78 	bl	8004c10 <SPI_WaitFlagStateUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d016      	beq.n	8004d54 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e00f      	b.n	8004d56 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00a      	beq.n	8004d52 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4c:	2b80      	cmp	r3, #128	; 0x80
 8004d4e:	d0f2      	beq.n	8004d36 <SPI_EndRxTxTransaction+0x52>
 8004d50:	e000      	b.n	8004d54 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d52:	bf00      	nop
  }

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	20000008 	.word	0x20000008
 8004d64:	165e9f81 	.word	0x165e9f81

08004d68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004d6c:	4904      	ldr	r1, [pc, #16]	; (8004d80 <MX_FATFS_Init+0x18>)
 8004d6e:	4805      	ldr	r0, [pc, #20]	; (8004d84 <MX_FATFS_Init+0x1c>)
 8004d70:	f002 fee2 	bl	8007b38 <FATFS_LinkDriver>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	4b03      	ldr	r3, [pc, #12]	; (8004d88 <MX_FATFS_Init+0x20>)
 8004d7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004d7c:	bf00      	nop
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2000c068 	.word	0x2000c068
 8004d84:	20000014 	.word	0x20000014
 8004d88:	2000c06c 	.word	0x2000c06c

08004d8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004d90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
   return  SD_disk_initialize (pdrv);
 8004da6:	79fb      	ldrb	r3, [r7, #7]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fc f9eb 	bl	8001184 <SD_disk_initialize>
 8004dae:	4603      	mov	r3, r0
 8004db0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b082      	sub	sp, #8
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 8004dc4:	79fb      	ldrb	r3, [r7, #7]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fc fac6 	bl	8001358 <SD_disk_status>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3708      	adds	r7, #8
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60b9      	str	r1, [r7, #8]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	4603      	mov	r3, r0
 8004de6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8004de8:	7bf8      	ldrb	r0, [r7, #15]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	68b9      	ldr	r1, [r7, #8]
 8004df0:	f7fc fac8 	bl	8001384 <SD_disk_read>
 8004df4:	4603      	mov	r3, r0
 8004df6:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8004e10:	7bf8      	ldrb	r0, [r7, #15]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	f7fc fb1e 	bl	8001458 <SD_disk_write>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3710      	adds	r7, #16
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	603a      	str	r2, [r7, #0]
 8004e32:	71fb      	strb	r3, [r7, #7]
 8004e34:	460b      	mov	r3, r1
 8004e36:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(pdrv, cmd, buff);
 8004e38:	79fb      	ldrb	r3, [r7, #7]
 8004e3a:	79b9      	ldrb	r1, [r7, #6]
 8004e3c:	683a      	ldr	r2, [r7, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fb8e 	bl	8001560 <SD_disk_ioctl>
 8004e44:	4603      	mov	r3, r0
 8004e46:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	4603      	mov	r3, r0
 8004e58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004e5a:	79fb      	ldrb	r3, [r7, #7]
 8004e5c:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <disk_status+0x30>)
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	79fa      	ldrb	r2, [r7, #7]
 8004e68:	4905      	ldr	r1, [pc, #20]	; (8004e80 <disk_status+0x30>)
 8004e6a:	440a      	add	r2, r1
 8004e6c:	7a12      	ldrb	r2, [r2, #8]
 8004e6e:	4610      	mov	r0, r2
 8004e70:	4798      	blx	r3
 8004e72:	4603      	mov	r3, r0
 8004e74:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	200002ec 	.word	0x200002ec

08004e84 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	4a0d      	ldr	r2, [pc, #52]	; (8004ecc <disk_initialize+0x48>)
 8004e96:	5cd3      	ldrb	r3, [r2, r3]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d111      	bne.n	8004ec0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004e9c:	79fb      	ldrb	r3, [r7, #7]
 8004e9e:	4a0b      	ldr	r2, [pc, #44]	; (8004ecc <disk_initialize+0x48>)
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004ea4:	79fb      	ldrb	r3, [r7, #7]
 8004ea6:	4a09      	ldr	r2, [pc, #36]	; (8004ecc <disk_initialize+0x48>)
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	79fa      	ldrb	r2, [r7, #7]
 8004eb2:	4906      	ldr	r1, [pc, #24]	; (8004ecc <disk_initialize+0x48>)
 8004eb4:	440a      	add	r2, r1
 8004eb6:	7a12      	ldrb	r2, [r2, #8]
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4798      	blx	r3
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200002ec 	.word	0x200002ec

08004ed0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b087      	sub	sp, #28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
 8004eda:	603b      	str	r3, [r7, #0]
 8004edc:	4603      	mov	r3, r0
 8004ede:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004ee0:	7bfb      	ldrb	r3, [r7, #15]
 8004ee2:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <disk_read+0x3c>)
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	689c      	ldr	r4, [r3, #8]
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	4a07      	ldr	r2, [pc, #28]	; (8004f0c <disk_read+0x3c>)
 8004ef0:	4413      	add	r3, r2
 8004ef2:	7a18      	ldrb	r0, [r3, #8]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	68b9      	ldr	r1, [r7, #8]
 8004efa:	47a0      	blx	r4
 8004efc:	4603      	mov	r3, r0
 8004efe:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd90      	pop	{r4, r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	200002ec 	.word	0x200002ec

08004f10 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004f10:	b590      	push	{r4, r7, lr}
 8004f12:	b087      	sub	sp, #28
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60b9      	str	r1, [r7, #8]
 8004f18:	607a      	str	r2, [r7, #4]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <disk_write+0x3c>)
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	68dc      	ldr	r4, [r3, #12]
 8004f2c:	7bfb      	ldrb	r3, [r7, #15]
 8004f2e:	4a07      	ldr	r2, [pc, #28]	; (8004f4c <disk_write+0x3c>)
 8004f30:	4413      	add	r3, r2
 8004f32:	7a18      	ldrb	r0, [r3, #8]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	47a0      	blx	r4
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004f40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	371c      	adds	r7, #28
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200002ec 	.word	0x200002ec

08004f50 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	4603      	mov	r3, r0
 8004f58:	603a      	str	r2, [r7, #0]
 8004f5a:	71fb      	strb	r3, [r7, #7]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <disk_ioctl+0x38>)
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	79fa      	ldrb	r2, [r7, #7]
 8004f6e:	4906      	ldr	r1, [pc, #24]	; (8004f88 <disk_ioctl+0x38>)
 8004f70:	440a      	add	r2, r1
 8004f72:	7a10      	ldrb	r0, [r2, #8]
 8004f74:	79b9      	ldrb	r1, [r7, #6]
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	4798      	blx	r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	200002ec 	.word	0x200002ec

08004f8c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3301      	adds	r3, #1
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004f9c:	89fb      	ldrh	r3, [r7, #14]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	b21a      	sxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b21b      	sxth	r3, r3
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	b21b      	sxth	r3, r3
 8004fac:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004fae:	89fb      	ldrh	r3, [r7, #14]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	3303      	adds	r3, #3
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	3202      	adds	r2, #2
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	3201      	adds	r2, #1
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	7812      	ldrb	r2, [r2, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
	return rv;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005002:	b480      	push	{r7}
 8005004:	b083      	sub	sp, #12
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
 800500a:	460b      	mov	r3, r1
 800500c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	1c5a      	adds	r2, r3, #1
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	887a      	ldrh	r2, [r7, #2]
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
 800501a:	887b      	ldrh	r3, [r7, #2]
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	701a      	strb	r2, [r3, #0]
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	1c5a      	adds	r2, r3, #1
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	607a      	str	r2, [r7, #4]
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	b2d2      	uxtb	r2, r2
 800505e:	701a      	strb	r2, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	0a1b      	lsrs	r3, r3, #8
 8005064:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	0a1b      	lsrs	r3, r3, #8
 8005076:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00d      	beq.n	80050c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	1c53      	adds	r3, r2, #1
 80050ae:	613b      	str	r3, [r7, #16]
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	1c59      	adds	r1, r3, #1
 80050b4:	6179      	str	r1, [r7, #20]
 80050b6:	7812      	ldrb	r2, [r2, #0]
 80050b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3b01      	subs	r3, #1
 80050be:	607b      	str	r3, [r7, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f1      	bne.n	80050aa <mem_cpy+0x1a>
	}
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	1c5a      	adds	r2, r3, #1
 80050e6:	617a      	str	r2, [r7, #20]
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	b2d2      	uxtb	r2, r2
 80050ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3b01      	subs	r3, #1
 80050f2:	607b      	str	r3, [r7, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f3      	bne.n	80050e2 <mem_set+0x10>
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005106:	b480      	push	{r7}
 8005108:	b089      	sub	sp, #36	; 0x24
 800510a:	af00      	add	r7, sp, #0
 800510c:	60f8      	str	r0, [r7, #12]
 800510e:	60b9      	str	r1, [r7, #8]
 8005110:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	61fa      	str	r2, [r7, #28]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	4619      	mov	r1, r3
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	61ba      	str	r2, [r7, #24]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	1acb      	subs	r3, r1, r3
 8005132:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	3b01      	subs	r3, #1
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <mem_cmp+0x40>
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0eb      	beq.n	800511e <mem_cmp+0x18>

	return r;
 8005146:	697b      	ldr	r3, [r7, #20]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3724      	adds	r7, #36	; 0x24
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800515e:	e002      	b.n	8005166 <chk_chr+0x12>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3301      	adds	r3, #1
 8005164:	607b      	str	r3, [r7, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <chk_chr+0x26>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4293      	cmp	r3, r2
 8005178:	d1f2      	bne.n	8005160 <chk_chr+0xc>
	return *str;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	781b      	ldrb	r3, [r3, #0]
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
	...

0800518c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	e029      	b.n	80051f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80051a0:	4a27      	ldr	r2, [pc, #156]	; (8005240 <chk_lock+0xb4>)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	4413      	add	r3, r2
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d01d      	beq.n	80051ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051ae:	4a24      	ldr	r2, [pc, #144]	; (8005240 <chk_lock+0xb4>)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	4413      	add	r3, r2
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d116      	bne.n	80051ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80051c0:	4a1f      	ldr	r2, [pc, #124]	; (8005240 <chk_lock+0xb4>)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	011b      	lsls	r3, r3, #4
 80051c6:	4413      	add	r3, r2
 80051c8:	3304      	adds	r3, #4
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d10c      	bne.n	80051ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051d4:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <chk_lock+0xb4>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	4413      	add	r3, r2
 80051dc:	3308      	adds	r3, #8
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d102      	bne.n	80051ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80051e8:	e007      	b.n	80051fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80051ea:	2301      	movs	r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3301      	adds	r3, #1
 80051f2:	60fb      	str	r3, [r7, #12]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d9d2      	bls.n	80051a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d109      	bne.n	8005214 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d102      	bne.n	800520c <chk_lock+0x80>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b02      	cmp	r3, #2
 800520a:	d101      	bne.n	8005210 <chk_lock+0x84>
 800520c:	2300      	movs	r3, #0
 800520e:	e010      	b.n	8005232 <chk_lock+0xa6>
 8005210:	2312      	movs	r3, #18
 8005212:	e00e      	b.n	8005232 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <chk_lock+0xa0>
 800521a:	4a09      	ldr	r2, [pc, #36]	; (8005240 <chk_lock+0xb4>)
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	4413      	add	r3, r2
 8005222:	330c      	adds	r3, #12
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d101      	bne.n	8005230 <chk_lock+0xa4>
 800522c:	2310      	movs	r3, #16
 800522e:	e000      	b.n	8005232 <chk_lock+0xa6>
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	200000cc 	.word	0x200000cc

08005244 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800524a:	2300      	movs	r3, #0
 800524c:	607b      	str	r3, [r7, #4]
 800524e:	e002      	b.n	8005256 <enq_lock+0x12>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3301      	adds	r3, #1
 8005254:	607b      	str	r3, [r7, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d806      	bhi.n	800526a <enq_lock+0x26>
 800525c:	4a09      	ldr	r2, [pc, #36]	; (8005284 <enq_lock+0x40>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	4413      	add	r3, r2
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1f2      	bne.n	8005250 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b02      	cmp	r3, #2
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	200000cc 	.word	0x200000cc

08005288 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	e01f      	b.n	80052d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005298:	4a41      	ldr	r2, [pc, #260]	; (80053a0 <inc_lock+0x118>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	4413      	add	r3, r2
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d113      	bne.n	80052d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80052aa:	4a3d      	ldr	r2, [pc, #244]	; (80053a0 <inc_lock+0x118>)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	4413      	add	r3, r2
 80052b2:	3304      	adds	r3, #4
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d109      	bne.n	80052d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80052be:	4a38      	ldr	r2, [pc, #224]	; (80053a0 <inc_lock+0x118>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	4413      	add	r3, r2
 80052c6:	3308      	adds	r3, #8
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d006      	beq.n	80052e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	3301      	adds	r3, #1
 80052d6:	60fb      	str	r3, [r7, #12]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d9dc      	bls.n	8005298 <inc_lock+0x10>
 80052de:	e000      	b.n	80052e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80052e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d132      	bne.n	800534e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e002      	b.n	80052f4 <inc_lock+0x6c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	3301      	adds	r3, #1
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d806      	bhi.n	8005308 <inc_lock+0x80>
 80052fa:	4a29      	ldr	r2, [pc, #164]	; (80053a0 <inc_lock+0x118>)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4413      	add	r3, r2
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f2      	bne.n	80052ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b02      	cmp	r3, #2
 800530c:	d101      	bne.n	8005312 <inc_lock+0x8a>
 800530e:	2300      	movs	r3, #0
 8005310:	e040      	b.n	8005394 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4922      	ldr	r1, [pc, #136]	; (80053a0 <inc_lock+0x118>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	440b      	add	r3, r1
 800531e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689a      	ldr	r2, [r3, #8]
 8005324:	491e      	ldr	r1, [pc, #120]	; (80053a0 <inc_lock+0x118>)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	440b      	add	r3, r1
 800532c:	3304      	adds	r3, #4
 800532e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	491a      	ldr	r1, [pc, #104]	; (80053a0 <inc_lock+0x118>)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	011b      	lsls	r3, r3, #4
 800533a:	440b      	add	r3, r1
 800533c:	3308      	adds	r3, #8
 800533e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005340:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <inc_lock+0x118>)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4413      	add	r3, r2
 8005348:	330c      	adds	r3, #12
 800534a:	2200      	movs	r2, #0
 800534c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d009      	beq.n	8005368 <inc_lock+0xe0>
 8005354:	4a12      	ldr	r2, [pc, #72]	; (80053a0 <inc_lock+0x118>)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	4413      	add	r3, r2
 800535c:	330c      	adds	r3, #12
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <inc_lock+0xe0>
 8005364:	2300      	movs	r3, #0
 8005366:	e015      	b.n	8005394 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d108      	bne.n	8005380 <inc_lock+0xf8>
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <inc_lock+0x118>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	011b      	lsls	r3, r3, #4
 8005374:	4413      	add	r3, r2
 8005376:	330c      	adds	r3, #12
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	3301      	adds	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	e001      	b.n	8005384 <inc_lock+0xfc>
 8005380:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005384:	4906      	ldr	r1, [pc, #24]	; (80053a0 <inc_lock+0x118>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	011b      	lsls	r3, r3, #4
 800538a:	440b      	add	r3, r1
 800538c:	330c      	adds	r3, #12
 800538e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	3301      	adds	r3, #1
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	200000cc 	.word	0x200000cc

080053a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	607b      	str	r3, [r7, #4]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d825      	bhi.n	8005404 <dec_lock+0x60>
		n = Files[i].ctr;
 80053b8:	4a17      	ldr	r2, [pc, #92]	; (8005418 <dec_lock+0x74>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	011b      	lsls	r3, r3, #4
 80053be:	4413      	add	r3, r2
 80053c0:	330c      	adds	r3, #12
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80053c6:	89fb      	ldrh	r3, [r7, #14]
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053cc:	d101      	bne.n	80053d2 <dec_lock+0x2e>
 80053ce:	2300      	movs	r3, #0
 80053d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80053d2:	89fb      	ldrh	r3, [r7, #14]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d002      	beq.n	80053de <dec_lock+0x3a>
 80053d8:	89fb      	ldrh	r3, [r7, #14]
 80053da:	3b01      	subs	r3, #1
 80053dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80053de:	4a0e      	ldr	r2, [pc, #56]	; (8005418 <dec_lock+0x74>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	4413      	add	r3, r2
 80053e6:	330c      	adds	r3, #12
 80053e8:	89fa      	ldrh	r2, [r7, #14]
 80053ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80053ec:	89fb      	ldrh	r3, [r7, #14]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d105      	bne.n	80053fe <dec_lock+0x5a>
 80053f2:	4a09      	ldr	r2, [pc, #36]	; (8005418 <dec_lock+0x74>)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	4413      	add	r3, r2
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	737b      	strb	r3, [r7, #13]
 8005402:	e001      	b.n	8005408 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005404:	2302      	movs	r3, #2
 8005406:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005408:	7b7b      	ldrb	r3, [r7, #13]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	200000cc 	.word	0x200000cc

0800541c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e010      	b.n	800544c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800542a:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <clear_lock+0x44>)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	429a      	cmp	r2, r3
 8005438:	d105      	bne.n	8005446 <clear_lock+0x2a>
 800543a:	4a09      	ldr	r2, [pc, #36]	; (8005460 <clear_lock+0x44>)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4413      	add	r3, r2
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3301      	adds	r3, #1
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d9eb      	bls.n	800542a <clear_lock+0xe>
	}
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	200000cc 	.word	0x200000cc

08005464 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800546c:	2300      	movs	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	78db      	ldrb	r3, [r3, #3]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d034      	beq.n	80054e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	7858      	ldrb	r0, [r3, #1]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005488:	2301      	movs	r3, #1
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	f7ff fd40 	bl	8004f10 <disk_write>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005496:	2301      	movs	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	e022      	b.n	80054e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	1ad2      	subs	r2, r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d217      	bcs.n	80054e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	789b      	ldrb	r3, [r3, #2]
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e010      	b.n	80054dc <sync_window+0x78>
					wsect += fs->fsize;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7858      	ldrb	r0, [r3, #1]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054ce:	2301      	movs	r3, #1
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	f7ff fd1d 	bl	8004f10 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3b01      	subs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d8eb      	bhi.n	80054ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80054e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3718      	adds	r7, #24
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d01b      	beq.n	800553c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7ff ffad 	bl	8005464 <sync_window>
 800550a:	4603      	mov	r3, r0
 800550c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800550e:	7bfb      	ldrb	r3, [r7, #15]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d113      	bne.n	800553c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	7858      	ldrb	r0, [r3, #1]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800551e:	2301      	movs	r3, #1
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	f7ff fcd5 	bl	8004ed0 <disk_read>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005532:	2301      	movs	r3, #1
 8005534:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
	...

08005548 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ff87 	bl	8005464 <sync_window>
 8005556:	4603      	mov	r3, r0
 8005558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d159      	bne.n	8005614 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b03      	cmp	r3, #3
 8005566:	d149      	bne.n	80055fc <sync_fs+0xb4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	791b      	ldrb	r3, [r3, #4]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d145      	bne.n	80055fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	899b      	ldrh	r3, [r3, #12]
 800557a:	461a      	mov	r2, r3
 800557c:	2100      	movs	r1, #0
 800557e:	f7ff fda8 	bl	80050d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3338      	adds	r3, #56	; 0x38
 8005586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800558a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fd37 	bl	8005002 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	3338      	adds	r3, #56	; 0x38
 8005598:	4921      	ldr	r1, [pc, #132]	; (8005620 <sync_fs+0xd8>)
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff fd4c 	bl	8005038 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3338      	adds	r3, #56	; 0x38
 80055a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80055a8:	491e      	ldr	r1, [pc, #120]	; (8005624 <sync_fs+0xdc>)
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff fd44 	bl	8005038 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3338      	adds	r3, #56	; 0x38
 80055b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	4619      	mov	r1, r3
 80055be:	4610      	mov	r0, r2
 80055c0:	f7ff fd3a 	bl	8005038 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3338      	adds	r3, #56	; 0x38
 80055c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	4619      	mov	r1, r3
 80055d2:	4610      	mov	r0, r2
 80055d4:	f7ff fd30 	bl	8005038 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7858      	ldrb	r0, [r3, #1]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f0:	2301      	movs	r3, #1
 80055f2:	f7ff fc8d 	bl	8004f10 <disk_write>
			fs->fsi_flag = 0;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	2200      	movs	r2, #0
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff fca3 	bl	8004f50 <disk_ioctl>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <sync_fs+0xcc>
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	41615252 	.word	0x41615252
 8005624:	61417272 	.word	0x61417272

08005628 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	3b02      	subs	r3, #2
 8005636:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	3b02      	subs	r3, #2
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	429a      	cmp	r2, r3
 8005642:	d301      	bcc.n	8005648 <clust2sect+0x20>
 8005644:	2300      	movs	r3, #0
 8005646:	e008      	b.n	800565a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	895b      	ldrh	r3, [r3, #10]
 800564c:	461a      	mov	r2, r3
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	fb03 f202 	mul.w	r2, r3, r2
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	4413      	add	r3, r2
}
 800565a:	4618      	mov	r0, r3
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr

08005666 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b086      	sub	sp, #24
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
 800566e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d904      	bls.n	8005686 <get_fat+0x20>
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <get_fat+0x26>
		val = 1;	/* Internal error */
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
 800568a:	e0b7      	b.n	80057fc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800568c:	f04f 33ff 	mov.w	r3, #4294967295
 8005690:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b02      	cmp	r3, #2
 8005698:	d05a      	beq.n	8005750 <get_fat+0xea>
 800569a:	2b03      	cmp	r3, #3
 800569c:	d07d      	beq.n	800579a <get_fat+0x134>
 800569e:	2b01      	cmp	r3, #1
 80056a0:	f040 80a2 	bne.w	80057e8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	085b      	lsrs	r3, r3, #1
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	899b      	ldrh	r3, [r3, #12]
 80056ba:	4619      	mov	r1, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	fbb3 f3f1 	udiv	r3, r3, r1
 80056c2:	4413      	add	r3, r2
 80056c4:	4619      	mov	r1, r3
 80056c6:	6938      	ldr	r0, [r7, #16]
 80056c8:	f7ff ff10 	bl	80054ec <move_window>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f040 808d 	bne.w	80057ee <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	60fa      	str	r2, [r7, #12]
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	8992      	ldrh	r2, [r2, #12]
 80056de:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e2:	fb02 f201 	mul.w	r2, r2, r1
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056f0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	899b      	ldrh	r3, [r3, #12]
 80056fa:	4619      	mov	r1, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8005702:	4413      	add	r3, r2
 8005704:	4619      	mov	r1, r3
 8005706:	6938      	ldr	r0, [r7, #16]
 8005708:	f7ff fef0 	bl	80054ec <move_window>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d16f      	bne.n	80057f2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	899b      	ldrh	r3, [r3, #12]
 8005716:	461a      	mov	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	fbb3 f1f2 	udiv	r1, r3, r2
 800571e:	fb02 f201 	mul.w	r2, r2, r1
 8005722:	1a9b      	subs	r3, r3, r2
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <get_fat+0xe0>
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	e002      	b.n	800574c <get_fat+0xe6>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800574c:	617b      	str	r3, [r7, #20]
			break;
 800574e:	e055      	b.n	80057fc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	899b      	ldrh	r3, [r3, #12]
 8005758:	085b      	lsrs	r3, r3, #1
 800575a:	b29b      	uxth	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	fbb3 f3f1 	udiv	r3, r3, r1
 8005764:	4413      	add	r3, r2
 8005766:	4619      	mov	r1, r3
 8005768:	6938      	ldr	r0, [r7, #16]
 800576a:	f7ff febf 	bl	80054ec <move_window>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d140      	bne.n	80057f6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	8992      	ldrh	r2, [r2, #12]
 8005782:	fbb3 f0f2 	udiv	r0, r3, r2
 8005786:	fb02 f200 	mul.w	r2, r2, r0
 800578a:	1a9b      	subs	r3, r3, r2
 800578c:	440b      	add	r3, r1
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff fbfc 	bl	8004f8c <ld_word>
 8005794:	4603      	mov	r3, r0
 8005796:	617b      	str	r3, [r7, #20]
			break;
 8005798:	e030      	b.n	80057fc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	899b      	ldrh	r3, [r3, #12]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4619      	mov	r1, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ae:	4413      	add	r3, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	6938      	ldr	r0, [r7, #16]
 80057b4:	f7ff fe9a 	bl	80054ec <move_window>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d11d      	bne.n	80057fa <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	8992      	ldrh	r2, [r2, #12]
 80057cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80057d0:	fb02 f200 	mul.w	r2, r2, r0
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	440b      	add	r3, r1
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fbef 	bl	8004fbc <ld_dword>
 80057de:	4603      	mov	r3, r0
 80057e0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80057e4:	617b      	str	r3, [r7, #20]
			break;
 80057e6:	e009      	b.n	80057fc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80057e8:	2301      	movs	r3, #1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	e006      	b.n	80057fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80057fa:	bf00      	nop
		}
	}

	return val;
 80057fc:	697b      	ldr	r3, [r7, #20]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005806:	b590      	push	{r4, r7, lr}
 8005808:	b089      	sub	sp, #36	; 0x24
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005812:	2302      	movs	r3, #2
 8005814:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	2b01      	cmp	r3, #1
 800581a:	f240 8106 	bls.w	8005a2a <put_fat+0x224>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	429a      	cmp	r2, r3
 8005826:	f080 8100 	bcs.w	8005a2a <put_fat+0x224>
		switch (fs->fs_type) {
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b02      	cmp	r3, #2
 8005830:	f000 8088 	beq.w	8005944 <put_fat+0x13e>
 8005834:	2b03      	cmp	r3, #3
 8005836:	f000 80b0 	beq.w	800599a <put_fat+0x194>
 800583a:	2b01      	cmp	r3, #1
 800583c:	f040 80f5 	bne.w	8005a2a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	085b      	lsrs	r3, r3, #1
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4413      	add	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	899b      	ldrh	r3, [r3, #12]
 8005856:	4619      	mov	r1, r3
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	fbb3 f3f1 	udiv	r3, r3, r1
 800585e:	4413      	add	r3, r2
 8005860:	4619      	mov	r1, r3
 8005862:	68f8      	ldr	r0, [r7, #12]
 8005864:	f7ff fe42 	bl	80054ec <move_window>
 8005868:	4603      	mov	r3, r0
 800586a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800586c:	7ffb      	ldrb	r3, [r7, #31]
 800586e:	2b00      	cmp	r3, #0
 8005870:	f040 80d4 	bne.w	8005a1c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	61ba      	str	r2, [r7, #24]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	8992      	ldrh	r2, [r2, #12]
 8005884:	fbb3 f0f2 	udiv	r0, r3, r2
 8005888:	fb02 f200 	mul.w	r2, r2, r0
 800588c:	1a9b      	subs	r3, r3, r2
 800588e:	440b      	add	r3, r1
 8005890:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00d      	beq.n	80058b8 <put_fat+0xb2>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b25b      	sxtb	r3, r3
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	b25a      	sxtb	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	4313      	orrs	r3, r2
 80058b2:	b25b      	sxtb	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	e001      	b.n	80058bc <put_fat+0xb6>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	899b      	ldrh	r3, [r3, #12]
 80058ce:	4619      	mov	r1, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80058d6:	4413      	add	r3, r2
 80058d8:	4619      	mov	r1, r3
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f7ff fe06 	bl	80054ec <move_window>
 80058e0:	4603      	mov	r3, r0
 80058e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80058e4:	7ffb      	ldrb	r3, [r7, #31]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f040 809a 	bne.w	8005a20 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	899b      	ldrh	r3, [r3, #12]
 80058f6:	461a      	mov	r2, r3
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80058fe:	fb02 f200 	mul.w	r2, r2, r0
 8005902:	1a9b      	subs	r3, r3, r2
 8005904:	440b      	add	r3, r1
 8005906:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <put_fat+0x114>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	091b      	lsrs	r3, r3, #4
 8005916:	b2db      	uxtb	r3, r3
 8005918:	e00e      	b.n	8005938 <put_fat+0x132>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	b25b      	sxtb	r3, r3
 8005920:	f023 030f 	bic.w	r3, r3, #15
 8005924:	b25a      	sxtb	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	0a1b      	lsrs	r3, r3, #8
 800592a:	b25b      	sxtb	r3, r3
 800592c:	f003 030f 	and.w	r3, r3, #15
 8005930:	b25b      	sxtb	r3, r3
 8005932:	4313      	orrs	r3, r2
 8005934:	b25b      	sxtb	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	70da      	strb	r2, [r3, #3]
			break;
 8005942:	e072      	b.n	8005a2a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	899b      	ldrh	r3, [r3, #12]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	4619      	mov	r1, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	fbb3 f3f1 	udiv	r3, r3, r1
 8005958:	4413      	add	r3, r2
 800595a:	4619      	mov	r1, r3
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f7ff fdc5 	bl	80054ec <move_window>
 8005962:	4603      	mov	r3, r0
 8005964:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005966:	7ffb      	ldrb	r3, [r7, #31]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d15b      	bne.n	8005a24 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	8992      	ldrh	r2, [r2, #12]
 800597a:	fbb3 f0f2 	udiv	r0, r3, r2
 800597e:	fb02 f200 	mul.w	r2, r2, r0
 8005982:	1a9b      	subs	r3, r3, r2
 8005984:	440b      	add	r3, r1
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	b292      	uxth	r2, r2
 800598a:	4611      	mov	r1, r2
 800598c:	4618      	mov	r0, r3
 800598e:	f7ff fb38 	bl	8005002 <st_word>
			fs->wflag = 1;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	70da      	strb	r2, [r3, #3]
			break;
 8005998:	e047      	b.n	8005a2a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	899b      	ldrh	r3, [r3, #12]
 80059a2:	089b      	lsrs	r3, r3, #2
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	4619      	mov	r1, r3
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80059ae:	4413      	add	r3, r2
 80059b0:	4619      	mov	r1, r3
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff fd9a 	bl	80054ec <move_window>
 80059b8:	4603      	mov	r3, r0
 80059ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80059bc:	7ffb      	ldrb	r3, [r7, #31]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d132      	bne.n	8005a28 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	8992      	ldrh	r2, [r2, #12]
 80059d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80059da:	fb02 f200 	mul.w	r2, r2, r0
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	440b      	add	r3, r1
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff faea 	bl	8004fbc <ld_dword>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80059ee:	4323      	orrs	r3, r4
 80059f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	8992      	ldrh	r2, [r2, #12]
 8005a00:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a04:	fb02 f200 	mul.w	r2, r2, r0
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	440b      	add	r3, r1
 8005a0c:	6879      	ldr	r1, [r7, #4]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fb12 	bl	8005038 <st_dword>
			fs->wflag = 1;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	70da      	strb	r2, [r3, #3]
			break;
 8005a1a:	e006      	b.n	8005a2a <put_fat+0x224>
			if (res != FR_OK) break;
 8005a1c:	bf00      	nop
 8005a1e:	e004      	b.n	8005a2a <put_fat+0x224>
			if (res != FR_OK) break;
 8005a20:	bf00      	nop
 8005a22:	e002      	b.n	8005a2a <put_fat+0x224>
			if (res != FR_OK) break;
 8005a24:	bf00      	nop
 8005a26:	e000      	b.n	8005a2a <put_fat+0x224>
			if (res != FR_OK) break;
 8005a28:	bf00      	nop
		}
	}
	return res;
 8005a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3724      	adds	r7, #36	; 0x24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd90      	pop	{r4, r7, pc}

08005a34 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d904      	bls.n	8005a5a <remove_chain+0x26>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d301      	bcc.n	8005a5e <remove_chain+0x2a>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e04b      	b.n	8005af6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00c      	beq.n	8005a7e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005a64:	f04f 32ff 	mov.w	r2, #4294967295
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	69b8      	ldr	r0, [r7, #24]
 8005a6c:	f7ff fecb 	bl	8005806 <put_fat>
 8005a70:	4603      	mov	r3, r0
 8005a72:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005a74:	7ffb      	ldrb	r3, [r7, #31]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <remove_chain+0x4a>
 8005a7a:	7ffb      	ldrb	r3, [r7, #31]
 8005a7c:	e03b      	b.n	8005af6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f7ff fdf0 	bl	8005666 <get_fat>
 8005a86:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d031      	beq.n	8005af2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d101      	bne.n	8005a98 <remove_chain+0x64>
 8005a94:	2302      	movs	r3, #2
 8005a96:	e02e      	b.n	8005af6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9e:	d101      	bne.n	8005aa4 <remove_chain+0x70>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e028      	b.n	8005af6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	69b8      	ldr	r0, [r7, #24]
 8005aaa:	f7ff feac 	bl	8005806 <put_fat>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005ab2:	7ffb      	ldrb	r3, [r7, #31]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <remove_chain+0x88>
 8005ab8:	7ffb      	ldrb	r3, [r7, #31]
 8005aba:	e01c      	b.n	8005af6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005abc:	69bb      	ldr	r3, [r7, #24]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	69db      	ldr	r3, [r3, #28]
 8005ac4:	3b02      	subs	r3, #2
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d20b      	bcs.n	8005ae2 <remove_chain+0xae>
			fs->free_clst++;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	699b      	ldr	r3, [r3, #24]
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	791b      	ldrb	r3, [r3, #4]
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d3c6      	bcc.n	8005a7e <remove_chain+0x4a>
 8005af0:	e000      	b.n	8005af4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005af2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3720      	adds	r7, #32
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}

08005afe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005afe:	b580      	push	{r7, lr}
 8005b00:	b088      	sub	sp, #32
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	695b      	ldr	r3, [r3, #20]
 8005b18:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <create_chain+0x2c>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	69db      	ldr	r3, [r3, #28]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d31b      	bcc.n	8005b62 <create_chain+0x64>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	61bb      	str	r3, [r7, #24]
 8005b2e:	e018      	b.n	8005b62 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005b30:	6839      	ldr	r1, [r7, #0]
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff fd97 	bl	8005666 <get_fat>
 8005b38:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d801      	bhi.n	8005b44 <create_chain+0x46>
 8005b40:	2301      	movs	r3, #1
 8005b42:	e070      	b.n	8005c26 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b4a:	d101      	bne.n	8005b50 <create_chain+0x52>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	e06a      	b.n	8005c26 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	69db      	ldr	r3, [r3, #28]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d201      	bcs.n	8005b5e <create_chain+0x60>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	e063      	b.n	8005c26 <create_chain+0x128>
		scl = clst;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	69db      	ldr	r3, [r3, #28]
 8005b70:	69fa      	ldr	r2, [r7, #28]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d307      	bcc.n	8005b86 <create_chain+0x88>
				ncl = 2;
 8005b76:	2302      	movs	r3, #2
 8005b78:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d901      	bls.n	8005b86 <create_chain+0x88>
 8005b82:	2300      	movs	r3, #0
 8005b84:	e04f      	b.n	8005c26 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005b86:	69f9      	ldr	r1, [r7, #28]
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fd6c 	bl	8005666 <get_fat>
 8005b8e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00e      	beq.n	8005bb4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d003      	beq.n	8005ba4 <create_chain+0xa6>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba2:	d101      	bne.n	8005ba8 <create_chain+0xaa>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	e03e      	b.n	8005c26 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005ba8:	69fa      	ldr	r2, [r7, #28]
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d1da      	bne.n	8005b66 <create_chain+0x68>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e038      	b.n	8005c26 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005bb4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	69f9      	ldr	r1, [r7, #28]
 8005bbc:	6938      	ldr	r0, [r7, #16]
 8005bbe:	f7ff fe22 	bl	8005806 <put_fat>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d109      	bne.n	8005be0 <create_chain+0xe2>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d006      	beq.n	8005be0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	6839      	ldr	r1, [r7, #0]
 8005bd6:	6938      	ldr	r0, [r7, #16]
 8005bd8:	f7ff fe15 	bl	8005806 <put_fat>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d116      	bne.n	8005c14 <create_chain+0x116>
		fs->last_clst = ncl;
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	69fa      	ldr	r2, [r7, #28]
 8005bea:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	3b02      	subs	r3, #2
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d804      	bhi.n	8005c04 <create_chain+0x106>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	1e5a      	subs	r2, r3, #1
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	f043 0301 	orr.w	r3, r3, #1
 8005c0c:	b2da      	uxtb	r2, r3
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	711a      	strb	r2, [r3, #4]
 8005c12:	e007      	b.n	8005c24 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005c14:	7dfb      	ldrb	r3, [r7, #23]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d102      	bne.n	8005c20 <create_chain+0x122>
 8005c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c1e:	e000      	b.n	8005c22 <create_chain+0x124>
 8005c20:	2301      	movs	r3, #1
 8005c22:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005c24:	69fb      	ldr	r3, [r7, #28]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3720      	adds	r7, #32
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b087      	sub	sp, #28
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	3304      	adds	r3, #4
 8005c44:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	899b      	ldrh	r3, [r3, #12]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	8952      	ldrh	r2, [r2, #10]
 8005c56:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c5a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1d1a      	adds	r2, r3, #4
 8005c60:	613a      	str	r2, [r7, #16]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d101      	bne.n	8005c70 <clmt_clust+0x42>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e010      	b.n	8005c92 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d307      	bcc.n	8005c88 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	3304      	adds	r3, #4
 8005c84:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005c86:	e7e9      	b.n	8005c5c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005c88:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b086      	sub	sp, #24
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cb4:	d204      	bcs.n	8005cc0 <dir_sdi+0x22>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005cc0:	2302      	movs	r3, #2
 8005cc2:	e071      	b.n	8005da8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <dir_sdi+0x46>
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d902      	bls.n	8005ce4 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10c      	bne.n	8005d04 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	095b      	lsrs	r3, r3, #5
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	8912      	ldrh	r2, [r2, #8]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d301      	bcc.n	8005cfa <dir_sdi+0x5c>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e056      	b.n	8005da8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	61da      	str	r2, [r3, #28]
 8005d02:	e02d      	b.n	8005d60 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	895b      	ldrh	r3, [r3, #10]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	899b      	ldrh	r3, [r3, #12]
 8005d0e:	fb03 f302 	mul.w	r3, r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d14:	e019      	b.n	8005d4a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6979      	ldr	r1, [r7, #20]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff fca3 	bl	8005666 <get_fat>
 8005d20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d28:	d101      	bne.n	8005d2e <dir_sdi+0x90>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e03c      	b.n	8005da8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d904      	bls.n	8005d3e <dir_sdi+0xa0>
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	69db      	ldr	r3, [r3, #28]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d301      	bcc.n	8005d42 <dir_sdi+0xa4>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e032      	b.n	8005da8 <dir_sdi+0x10a>
			ofs -= csz;
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	429a      	cmp	r2, r3
 8005d50:	d2e1      	bcs.n	8005d16 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005d52:	6979      	ldr	r1, [r7, #20]
 8005d54:	6938      	ldr	r0, [r7, #16]
 8005d56:	f7ff fc67 	bl	8005628 <clust2sect>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <dir_sdi+0xd4>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e01a      	b.n	8005da8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69da      	ldr	r2, [r3, #28]
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	899b      	ldrh	r3, [r3, #12]
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d82:	441a      	add	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	899b      	ldrh	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	fbb3 f0f2 	udiv	r0, r3, r2
 8005d9a:	fb02 f200 	mul.w	r2, r2, r0
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	18ca      	adds	r2, r1, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3718      	adds	r7, #24
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	3320      	adds	r3, #32
 8005dc6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <dir_next+0x28>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dd6:	d301      	bcc.n	8005ddc <dir_next+0x2c>
 8005dd8:	2304      	movs	r3, #4
 8005dda:	e0bb      	b.n	8005f54 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	899b      	ldrh	r3, [r3, #12]
 8005de0:	461a      	mov	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005de8:	fb02 f201 	mul.w	r2, r2, r1
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f040 809d 	bne.w	8005f2e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	095b      	lsrs	r3, r3, #5
 8005e0a:	68fa      	ldr	r2, [r7, #12]
 8005e0c:	8912      	ldrh	r2, [r2, #8]
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	f0c0 808d 	bcc.w	8005f2e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	61da      	str	r2, [r3, #28]
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	e09a      	b.n	8005f54 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	899b      	ldrh	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	8952      	ldrh	r2, [r2, #10]
 8005e2e:	3a01      	subs	r2, #1
 8005e30:	4013      	ands	r3, r2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d17b      	bne.n	8005f2e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f7ff fc11 	bl	8005666 <get_fat>
 8005e44:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d801      	bhi.n	8005e50 <dir_next+0xa0>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e081      	b.n	8005f54 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d101      	bne.n	8005e5c <dir_next+0xac>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e07b      	b.n	8005f54 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d359      	bcc.n	8005f1a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d104      	bne.n	8005e76 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	61da      	str	r2, [r3, #28]
 8005e72:	2304      	movs	r3, #4
 8005e74:	e06e      	b.n	8005f54 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	4610      	mov	r0, r2
 8005e80:	f7ff fe3d 	bl	8005afe <create_chain>
 8005e84:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d101      	bne.n	8005e90 <dir_next+0xe0>
 8005e8c:	2307      	movs	r3, #7
 8005e8e:	e061      	b.n	8005f54 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <dir_next+0xea>
 8005e96:	2302      	movs	r3, #2
 8005e98:	e05c      	b.n	8005f54 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d101      	bne.n	8005ea6 <dir_next+0xf6>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e056      	b.n	8005f54 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005ea6:	68f8      	ldr	r0, [r7, #12]
 8005ea8:	f7ff fadc 	bl	8005464 <sync_window>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <dir_next+0x106>
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e04e      	b.n	8005f54 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	899b      	ldrh	r3, [r3, #12]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	f7ff f905 	bl	80050d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ec8:	2300      	movs	r3, #0
 8005eca:	613b      	str	r3, [r7, #16]
 8005ecc:	6979      	ldr	r1, [r7, #20]
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fbaa 	bl	8005628 <clust2sect>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8005eda:	e012      	b.n	8005f02 <dir_next+0x152>
						fs->wflag = 1;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005ee2:	68f8      	ldr	r0, [r7, #12]
 8005ee4:	f7ff fabe 	bl	8005464 <sync_window>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d001      	beq.n	8005ef2 <dir_next+0x142>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e030      	b.n	8005f54 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	613b      	str	r3, [r7, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	635a      	str	r2, [r3, #52]	; 0x34
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	895b      	ldrh	r3, [r3, #10]
 8005f06:	461a      	mov	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d3e6      	bcc.n	8005edc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005f20:	6979      	ldr	r1, [r7, #20]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f7ff fb80 	bl	8005628 <clust2sect>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	899b      	ldrh	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	fbb3 f0f2 	udiv	r0, r3, r2
 8005f46:	fb02 f200 	mul.w	r2, r2, r0
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	18ca      	adds	r2, r1, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b086      	sub	sp, #24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7ff fe95 	bl	8005c9e <dir_sdi>
 8005f74:	4603      	mov	r3, r0
 8005f76:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d12b      	bne.n	8005fd6 <dir_alloc+0x7a>
		n = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69db      	ldr	r3, [r3, #28]
 8005f86:	4619      	mov	r1, r3
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff faaf 	bl	80054ec <move_window>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d11d      	bne.n	8005fd4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2be5      	cmp	r3, #229	; 0xe5
 8005fa0:	d004      	beq.n	8005fac <dir_alloc+0x50>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d107      	bne.n	8005fbc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	613b      	str	r3, [r7, #16]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d102      	bne.n	8005fc0 <dir_alloc+0x64>
 8005fba:	e00c      	b.n	8005fd6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff fef4 	bl	8005db0 <dir_next>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005fcc:	7dfb      	ldrb	r3, [r7, #23]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0d7      	beq.n	8005f82 <dir_alloc+0x26>
 8005fd2:	e000      	b.n	8005fd6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005fd4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d101      	bne.n	8005fe0 <dir_alloc+0x84>
 8005fdc:	2307      	movs	r3, #7
 8005fde:	75fb      	strb	r3, [r7, #23]
	return res;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3718      	adds	r7, #24
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	331a      	adds	r3, #26
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe ffc7 	bl	8004f8c <ld_word>
 8005ffe:	4603      	mov	r3, r0
 8006000:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d109      	bne.n	800601e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	4618      	mov	r0, r3
 8006010:	f7fe ffbc 	bl	8004f8c <ld_word>
 8006014:	4603      	mov	r3, r0
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4313      	orrs	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800601e:	68fb      	ldr	r3, [r7, #12]
}
 8006020:	4618      	mov	r0, r3
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	331a      	adds	r3, #26
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	b292      	uxth	r2, r2
 800603c:	4611      	mov	r1, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe ffdf 	bl	8005002 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d109      	bne.n	8006060 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	f103 0214 	add.w	r2, r3, #20
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	0c1b      	lsrs	r3, r3, #16
 8006056:	b29b      	uxth	r3, r3
 8006058:	4619      	mov	r1, r3
 800605a:	4610      	mov	r0, r2
 800605c:	f7fe ffd1 	bl	8005002 <st_word>
	}
}
 8006060:	bf00      	nop
 8006062:	3710      	adds	r7, #16
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	331a      	adds	r3, #26
 8006076:	4618      	mov	r0, r3
 8006078:	f7fe ff88 	bl	8004f8c <ld_word>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <cmp_lfn+0x1e>
 8006082:	2300      	movs	r3, #0
 8006084:	e059      	b.n	800613a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800608e:	1e5a      	subs	r2, r3, #1
 8006090:	4613      	mov	r3, r2
 8006092:	005b      	lsls	r3, r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800609c:	2301      	movs	r3, #1
 800609e:	81fb      	strh	r3, [r7, #14]
 80060a0:	2300      	movs	r3, #0
 80060a2:	613b      	str	r3, [r7, #16]
 80060a4:	e033      	b.n	800610e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80060a6:	4a27      	ldr	r2, [pc, #156]	; (8006144 <cmp_lfn+0xdc>)
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	4413      	add	r3, r2
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	4413      	add	r3, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe ff69 	bl	8004f8c <ld_word>
 80060ba:	4603      	mov	r3, r0
 80060bc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80060be:	89fb      	ldrh	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01a      	beq.n	80060fa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2bfe      	cmp	r3, #254	; 0xfe
 80060c8:	d812      	bhi.n	80060f0 <cmp_lfn+0x88>
 80060ca:	89bb      	ldrh	r3, [r7, #12]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f001 fd7f 	bl	8007bd0 <ff_wtoupper>
 80060d2:	4603      	mov	r3, r0
 80060d4:	461c      	mov	r4, r3
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	1c5a      	adds	r2, r3, #1
 80060da:	617a      	str	r2, [r7, #20]
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 fd73 	bl	8007bd0 <ff_wtoupper>
 80060ea:	4603      	mov	r3, r0
 80060ec:	429c      	cmp	r4, r3
 80060ee:	d001      	beq.n	80060f4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80060f0:	2300      	movs	r3, #0
 80060f2:	e022      	b.n	800613a <cmp_lfn+0xd2>
			}
			wc = uc;
 80060f4:	89bb      	ldrh	r3, [r7, #12]
 80060f6:	81fb      	strh	r3, [r7, #14]
 80060f8:	e006      	b.n	8006108 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80060fa:	89bb      	ldrh	r3, [r7, #12]
 80060fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006100:	4293      	cmp	r3, r2
 8006102:	d001      	beq.n	8006108 <cmp_lfn+0xa0>
 8006104:	2300      	movs	r3, #0
 8006106:	e018      	b.n	800613a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3301      	adds	r3, #1
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b0c      	cmp	r3, #12
 8006112:	d9c8      	bls.n	80060a6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <cmp_lfn+0xd0>
 8006120:	89fb      	ldrh	r3, [r7, #14]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d008      	beq.n	8006138 <cmp_lfn+0xd0>
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	005b      	lsls	r3, r3, #1
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	4413      	add	r3, r2
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <cmp_lfn+0xd0>
 8006134:	2300      	movs	r3, #0
 8006136:	e000      	b.n	800613a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006138:	2301      	movs	r3, #1
}
 800613a:	4618      	mov	r0, r3
 800613c:	371c      	adds	r7, #28
 800613e:	46bd      	mov	sp, r7
 8006140:	bd90      	pop	{r4, r7, pc}
 8006142:	bf00      	nop
 8006144:	08009900 	.word	0x08009900

08006148 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	4611      	mov	r1, r2
 8006154:	461a      	mov	r2, r3
 8006156:	460b      	mov	r3, r1
 8006158:	71fb      	strb	r3, [r7, #7]
 800615a:	4613      	mov	r3, r2
 800615c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	330d      	adds	r3, #13
 8006162:	79ba      	ldrb	r2, [r7, #6]
 8006164:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	330b      	adds	r3, #11
 800616a:	220f      	movs	r2, #15
 800616c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	330c      	adds	r3, #12
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	331a      	adds	r3, #26
 800617a:	2100      	movs	r1, #0
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe ff40 	bl	8005002 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	1e5a      	subs	r2, r3, #1
 8006186:	4613      	mov	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4413      	add	r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	82fb      	strh	r3, [r7, #22]
 8006196:	2300      	movs	r3, #0
 8006198:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800619a:	8afb      	ldrh	r3, [r7, #22]
 800619c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d007      	beq.n	80061b4 <put_lfn+0x6c>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	61fa      	str	r2, [r7, #28]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80061b4:	4a17      	ldr	r2, [pc, #92]	; (8006214 <put_lfn+0xcc>)
 80061b6:	69bb      	ldr	r3, [r7, #24]
 80061b8:	4413      	add	r3, r2
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	8afa      	ldrh	r2, [r7, #22]
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fe ff1b 	bl	8005002 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80061cc:	8afb      	ldrh	r3, [r7, #22]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <put_lfn+0x90>
 80061d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061d6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	3301      	adds	r3, #1
 80061dc:	61bb      	str	r3, [r7, #24]
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	2b0c      	cmp	r3, #12
 80061e2:	d9da      	bls.n	800619a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80061e4:	8afb      	ldrh	r3, [r7, #22]
 80061e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d006      	beq.n	80061fc <put_lfn+0xb4>
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d103      	bne.n	8006204 <put_lfn+0xbc>
 80061fc:	79fb      	ldrb	r3, [r7, #7]
 80061fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006202:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	79fa      	ldrb	r2, [r7, #7]
 8006208:	701a      	strb	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	08009900 	.word	0x08009900

08006218 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b08c      	sub	sp, #48	; 0x30
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006226:	220b      	movs	r2, #11
 8006228:	68b9      	ldr	r1, [r7, #8]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7fe ff30 	bl	8005090 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b05      	cmp	r3, #5
 8006234:	d92b      	bls.n	800628e <gen_numname+0x76>
		sr = seq;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800623a:	e022      	b.n	8006282 <gen_numname+0x6a>
			wc = *lfn++;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	1c9a      	adds	r2, r3, #2
 8006240:	607a      	str	r2, [r7, #4]
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006246:	2300      	movs	r3, #0
 8006248:	62bb      	str	r3, [r7, #40]	; 0x28
 800624a:	e017      	b.n	800627c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	005a      	lsls	r2, r3, #1
 8006250:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800625a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800625c:	085b      	lsrs	r3, r3, #1
 800625e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d005      	beq.n	8006276 <gen_numname+0x5e>
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006270:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006274:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	3301      	adds	r3, #1
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	2b0f      	cmp	r3, #15
 8006280:	d9e4      	bls.n	800624c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1d8      	bne.n	800623c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800628e:	2307      	movs	r3, #7
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	b2db      	uxtb	r3, r3
 800629c:	3330      	adds	r3, #48	; 0x30
 800629e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80062a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062a6:	2b39      	cmp	r3, #57	; 0x39
 80062a8:	d904      	bls.n	80062b4 <gen_numname+0x9c>
 80062aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80062ae:	3307      	adds	r3, #7
 80062b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80062b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b6:	1e5a      	subs	r2, r3, #1
 80062b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80062ba:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80062be:	4413      	add	r3, r2
 80062c0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80062c4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	091b      	lsrs	r3, r3, #4
 80062cc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1de      	bne.n	8006292 <gen_numname+0x7a>
	ns[i] = '~';
 80062d4:	f107 0214 	add.w	r2, r7, #20
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	4413      	add	r3, r2
 80062dc:	227e      	movs	r2, #126	; 0x7e
 80062de:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80062e0:	2300      	movs	r3, #0
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	e002      	b.n	80062ec <gen_numname+0xd4>
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	3301      	adds	r3, #1
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
 80062ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d205      	bcs.n	8006300 <gen_numname+0xe8>
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	4413      	add	r3, r2
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d1f2      	bne.n	80062e6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006302:	2b07      	cmp	r3, #7
 8006304:	d808      	bhi.n	8006318 <gen_numname+0x100>
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	62ba      	str	r2, [r7, #40]	; 0x28
 800630c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006310:	4413      	add	r3, r2
 8006312:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006316:	e000      	b.n	800631a <gen_numname+0x102>
 8006318:	2120      	movs	r1, #32
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	1c5a      	adds	r2, r3, #1
 800631e:	627a      	str	r2, [r7, #36]	; 0x24
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	460a      	mov	r2, r1
 8006326:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	2b07      	cmp	r3, #7
 800632c:	d9e8      	bls.n	8006300 <gen_numname+0xe8>
}
 800632e:	bf00      	nop
 8006330:	3730      	adds	r7, #48	; 0x30
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006342:	230b      	movs	r3, #11
 8006344:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006346:	7bfb      	ldrb	r3, [r7, #15]
 8006348:	b2da      	uxtb	r2, r3
 800634a:	0852      	lsrs	r2, r2, #1
 800634c:	01db      	lsls	r3, r3, #7
 800634e:	4313      	orrs	r3, r2
 8006350:	b2da      	uxtb	r2, r3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	6079      	str	r1, [r7, #4]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4413      	add	r3, r2
 800635c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	3b01      	subs	r3, #1
 8006362:	60bb      	str	r3, [r7, #8]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1ed      	bne.n	8006346 <sum_sfn+0x10>
	return sum;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3714      	adds	r7, #20
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006386:	2100      	movs	r1, #0
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fc88 	bl	8005c9e <dir_sdi>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d001      	beq.n	800639c <dir_find+0x24>
 8006398:	7dfb      	ldrb	r3, [r7, #23]
 800639a:	e0a9      	b.n	80064f0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800639c:	23ff      	movs	r3, #255	; 0xff
 800639e:	753b      	strb	r3, [r7, #20]
 80063a0:	7d3b      	ldrb	r3, [r7, #20]
 80063a2:	757b      	strb	r3, [r7, #21]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f04f 32ff 	mov.w	r2, #4294967295
 80063aa:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	69db      	ldr	r3, [r3, #28]
 80063b0:	4619      	mov	r1, r3
 80063b2:	6938      	ldr	r0, [r7, #16]
 80063b4:	f7ff f89a 	bl	80054ec <move_window>
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f040 8090 	bne.w	80064e4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063cc:	7dbb      	ldrb	r3, [r7, #22]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d102      	bne.n	80063d8 <dir_find+0x60>
 80063d2:	2304      	movs	r3, #4
 80063d4:	75fb      	strb	r3, [r7, #23]
 80063d6:	e08a      	b.n	80064ee <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	330b      	adds	r3, #11
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e4:	73fb      	strb	r3, [r7, #15]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	7bfa      	ldrb	r2, [r7, #15]
 80063ea:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80063ec:	7dbb      	ldrb	r3, [r7, #22]
 80063ee:	2be5      	cmp	r3, #229	; 0xe5
 80063f0:	d007      	beq.n	8006402 <dir_find+0x8a>
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	f003 0308 	and.w	r3, r3, #8
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d009      	beq.n	8006410 <dir_find+0x98>
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d006      	beq.n	8006410 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006402:	23ff      	movs	r3, #255	; 0xff
 8006404:	757b      	strb	r3, [r7, #21]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f04f 32ff 	mov.w	r2, #4294967295
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
 800640e:	e05e      	b.n	80064ce <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	2b0f      	cmp	r3, #15
 8006414:	d136      	bne.n	8006484 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800641c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006420:	2b00      	cmp	r3, #0
 8006422:	d154      	bne.n	80064ce <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006424:	7dbb      	ldrb	r3, [r7, #22]
 8006426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00d      	beq.n	800644a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	7b5b      	ldrb	r3, [r3, #13]
 8006434:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006436:	7dbb      	ldrb	r3, [r7, #22]
 8006438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800643c:	75bb      	strb	r3, [r7, #22]
 800643e:	7dbb      	ldrb	r3, [r7, #22]
 8006440:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800644a:	7dba      	ldrb	r2, [r7, #22]
 800644c:	7d7b      	ldrb	r3, [r7, #21]
 800644e:	429a      	cmp	r2, r3
 8006450:	d115      	bne.n	800647e <dir_find+0x106>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
 8006456:	330d      	adds	r3, #13
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	7d3a      	ldrb	r2, [r7, #20]
 800645c:	429a      	cmp	r2, r3
 800645e:	d10e      	bne.n	800647e <dir_find+0x106>
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	4619      	mov	r1, r3
 800646a:	4610      	mov	r0, r2
 800646c:	f7ff fdfc 	bl	8006068 <cmp_lfn>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <dir_find+0x106>
 8006476:	7d7b      	ldrb	r3, [r7, #21]
 8006478:	3b01      	subs	r3, #1
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e000      	b.n	8006480 <dir_find+0x108>
 800647e:	23ff      	movs	r3, #255	; 0xff
 8006480:	757b      	strb	r3, [r7, #21]
 8006482:	e024      	b.n	80064ce <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006484:	7d7b      	ldrb	r3, [r7, #21]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <dir_find+0x126>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff ff51 	bl	8006336 <sum_sfn>
 8006494:	4603      	mov	r3, r0
 8006496:	461a      	mov	r2, r3
 8006498:	7d3b      	ldrb	r3, [r7, #20]
 800649a:	4293      	cmp	r3, r2
 800649c:	d024      	beq.n	80064e8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80064a4:	f003 0301 	and.w	r3, r3, #1
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <dir_find+0x14a>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a18      	ldr	r0, [r3, #32]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3324      	adds	r3, #36	; 0x24
 80064b4:	220b      	movs	r2, #11
 80064b6:	4619      	mov	r1, r3
 80064b8:	f7fe fe25 	bl	8005106 <mem_cmp>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d014      	beq.n	80064ec <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80064c2:	23ff      	movs	r3, #255	; 0xff
 80064c4:	757b      	strb	r3, [r7, #21]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f04f 32ff 	mov.w	r2, #4294967295
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80064ce:	2100      	movs	r1, #0
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fc6d 	bl	8005db0 <dir_next>
 80064d6:	4603      	mov	r3, r0
 80064d8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80064da:	7dfb      	ldrb	r3, [r7, #23]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f43f af65 	beq.w	80063ac <dir_find+0x34>
 80064e2:	e004      	b.n	80064ee <dir_find+0x176>
		if (res != FR_OK) break;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80064ec:	bf00      	nop

	return res;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08c      	sub	sp, #48	; 0x30
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800650c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <dir_register+0x20>
 8006514:	2306      	movs	r3, #6
 8006516:	e0e0      	b.n	80066da <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006518:	2300      	movs	r3, #0
 800651a:	627b      	str	r3, [r7, #36]	; 0x24
 800651c:	e002      	b.n	8006524 <dir_register+0x2c>
 800651e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006520:	3301      	adds	r3, #1
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1f4      	bne.n	800651e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800653a:	f107 030c 	add.w	r3, r7, #12
 800653e:	220c      	movs	r2, #12
 8006540:	4618      	mov	r0, r3
 8006542:	f7fe fda5 	bl	8005090 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006546:	7dfb      	ldrb	r3, [r7, #23]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d032      	beq.n	80065b6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2240      	movs	r2, #64	; 0x40
 8006554:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006558:	2301      	movs	r3, #1
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
 800655c:	e016      	b.n	800658c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	f107 010c 	add.w	r1, r7, #12
 800656c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656e:	f7ff fe53 	bl	8006218 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff00 	bl	8006378 <dir_find>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800657e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	3301      	adds	r3, #1
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
 800658c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658e:	2b63      	cmp	r3, #99	; 0x63
 8006590:	d9e5      	bls.n	800655e <dir_register+0x66>
 8006592:	e000      	b.n	8006596 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006594:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	2b64      	cmp	r3, #100	; 0x64
 800659a:	d101      	bne.n	80065a0 <dir_register+0xa8>
 800659c:	2307      	movs	r3, #7
 800659e:	e09c      	b.n	80066da <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80065a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d002      	beq.n	80065ae <dir_register+0xb6>
 80065a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065ac:	e095      	b.n	80066da <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80065ae:	7dfa      	ldrb	r2, [r7, #23]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <dir_register+0xd8>
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	330c      	adds	r3, #12
 80065c4:	4a47      	ldr	r2, [pc, #284]	; (80066e4 <dir_register+0x1ec>)
 80065c6:	fba2 2303 	umull	r2, r3, r2, r3
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	3301      	adds	r3, #1
 80065ce:	e000      	b.n	80065d2 <dir_register+0xda>
 80065d0:	2301      	movs	r3, #1
 80065d2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80065d4:	6a39      	ldr	r1, [r7, #32]
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f7ff fcc0 	bl	8005f5c <dir_alloc>
 80065dc:	4603      	mov	r3, r0
 80065de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80065e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d148      	bne.n	800667c <dir_register+0x184>
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	3b01      	subs	r3, #1
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d042      	beq.n	800667c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	695a      	ldr	r2, [r3, #20]
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	015b      	lsls	r3, r3, #5
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	4619      	mov	r1, r3
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7ff fb4b 	bl	8005c9e <dir_sdi>
 8006608:	4603      	mov	r3, r0
 800660a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800660e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006612:	2b00      	cmp	r3, #0
 8006614:	d132      	bne.n	800667c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	3324      	adds	r3, #36	; 0x24
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fe8b 	bl	8006336 <sum_sfn>
 8006620:	4603      	mov	r3, r0
 8006622:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	4619      	mov	r1, r3
 800662a:	69f8      	ldr	r0, [r7, #28]
 800662c:	f7fe ff5e 	bl	80054ec <move_window>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11d      	bne.n	800667a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	6918      	ldr	r0, [r3, #16]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a19      	ldr	r1, [r3, #32]
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	b2da      	uxtb	r2, r3
 800664a:	7efb      	ldrb	r3, [r7, #27]
 800664c:	f7ff fd7c 	bl	8006148 <put_lfn>
				fs->wflag = 1;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	2201      	movs	r2, #1
 8006654:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006656:	2100      	movs	r1, #0
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff fba9 	bl	8005db0 <dir_next>
 800665e:	4603      	mov	r3, r0
 8006660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006668:	2b00      	cmp	r3, #0
 800666a:	d107      	bne.n	800667c <dir_register+0x184>
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	3b01      	subs	r3, #1
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1d5      	bne.n	8006624 <dir_register+0x12c>
 8006678:	e000      	b.n	800667c <dir_register+0x184>
				if (res != FR_OK) break;
 800667a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800667c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006680:	2b00      	cmp	r3, #0
 8006682:	d128      	bne.n	80066d6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	4619      	mov	r1, r3
 800668a:	69f8      	ldr	r0, [r7, #28]
 800668c:	f7fe ff2e 	bl	80054ec <move_window>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800669a:	2b00      	cmp	r3, #0
 800669c:	d11b      	bne.n	80066d6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	2220      	movs	r2, #32
 80066a4:	2100      	movs	r1, #0
 80066a6:	4618      	mov	r0, r3
 80066a8:	f7fe fd13 	bl	80050d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a18      	ldr	r0, [r3, #32]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	3324      	adds	r3, #36	; 0x24
 80066b4:	220b      	movs	r2, #11
 80066b6:	4619      	mov	r1, r3
 80066b8:	f7fe fcea 	bl	8005090 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	330c      	adds	r3, #12
 80066c8:	f002 0218 	and.w	r2, r2, #24
 80066cc:	b2d2      	uxtb	r2, r2
 80066ce:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	2201      	movs	r2, #1
 80066d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80066d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3730      	adds	r7, #48	; 0x30
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	4ec4ec4f 	.word	0x4ec4ec4f

080066e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	60fb      	str	r3, [r7, #12]
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	61ba      	str	r2, [r7, #24]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4413      	add	r3, r2
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006716:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006718:	2b1f      	cmp	r3, #31
 800671a:	d940      	bls.n	800679e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800671c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800671e:	2b2f      	cmp	r3, #47	; 0x2f
 8006720:	d006      	beq.n	8006730 <create_name+0x48>
 8006722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006724:	2b5c      	cmp	r3, #92	; 0x5c
 8006726:	d110      	bne.n	800674a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006728:	e002      	b.n	8006730 <create_name+0x48>
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	3301      	adds	r3, #1
 800672e:	61bb      	str	r3, [r7, #24]
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	4413      	add	r3, r2
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b2f      	cmp	r3, #47	; 0x2f
 800673a:	d0f6      	beq.n	800672a <create_name+0x42>
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	4413      	add	r3, r2
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b5c      	cmp	r3, #92	; 0x5c
 8006746:	d0f0      	beq.n	800672a <create_name+0x42>
			break;
 8006748:	e02a      	b.n	80067a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2bfe      	cmp	r3, #254	; 0xfe
 800674e:	d901      	bls.n	8006754 <create_name+0x6c>
 8006750:	2306      	movs	r3, #6
 8006752:	e177      	b.n	8006a44 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006754:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006756:	b2db      	uxtb	r3, r3
 8006758:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800675a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800675c:	2101      	movs	r1, #1
 800675e:	4618      	mov	r0, r3
 8006760:	f001 f9fa 	bl	8007b58 <ff_convert>
 8006764:	4603      	mov	r3, r0
 8006766:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800676a:	2b00      	cmp	r3, #0
 800676c:	d101      	bne.n	8006772 <create_name+0x8a>
 800676e:	2306      	movs	r3, #6
 8006770:	e168      	b.n	8006a44 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006774:	2b7f      	cmp	r3, #127	; 0x7f
 8006776:	d809      	bhi.n	800678c <create_name+0xa4>
 8006778:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800677a:	4619      	mov	r1, r3
 800677c:	48b3      	ldr	r0, [pc, #716]	; (8006a4c <create_name+0x364>)
 800677e:	f7fe fce9 	bl	8005154 <chk_chr>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d001      	beq.n	800678c <create_name+0xa4>
 8006788:	2306      	movs	r3, #6
 800678a:	e15b      	b.n	8006a44 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	1c5a      	adds	r2, r3, #1
 8006790:	617a      	str	r2, [r7, #20]
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800679a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800679c:	e7b4      	b.n	8006708 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800679e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	441a      	add	r2, r3
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80067aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ac:	2b1f      	cmp	r3, #31
 80067ae:	d801      	bhi.n	80067b4 <create_name+0xcc>
 80067b0:	2304      	movs	r3, #4
 80067b2:	e000      	b.n	80067b6 <create_name+0xce>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80067ba:	e011      	b.n	80067e0 <create_name+0xf8>
		w = lfn[di - 1];
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80067c2:	3b01      	subs	r3, #1
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80067ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d002      	beq.n	80067da <create_name+0xf2>
 80067d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067d6:	2b2e      	cmp	r3, #46	; 0x2e
 80067d8:	d106      	bne.n	80067e8 <create_name+0x100>
		di--;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	3b01      	subs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1ea      	bne.n	80067bc <create_name+0xd4>
 80067e6:	e000      	b.n	80067ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80067e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	005b      	lsls	r3, r3, #1
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	4413      	add	r3, r2
 80067f2:	2200      	movs	r2, #0
 80067f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <create_name+0x118>
 80067fc:	2306      	movs	r3, #6
 80067fe:	e121      	b.n	8006a44 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3324      	adds	r3, #36	; 0x24
 8006804:	220b      	movs	r2, #11
 8006806:	2120      	movs	r1, #32
 8006808:	4618      	mov	r0, r3
 800680a:	f7fe fc62 	bl	80050d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	e002      	b.n	800681a <create_name+0x132>
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	3301      	adds	r3, #1
 8006818:	61bb      	str	r3, [r7, #24]
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	2b20      	cmp	r3, #32
 8006826:	d0f5      	beq.n	8006814 <create_name+0x12c>
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	68fa      	ldr	r2, [r7, #12]
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	2b2e      	cmp	r3, #46	; 0x2e
 8006834:	d0ee      	beq.n	8006814 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <create_name+0x168>
 800683c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006840:	f043 0303 	orr.w	r3, r3, #3
 8006844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006848:	e002      	b.n	8006850 <create_name+0x168>
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	3b01      	subs	r3, #1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d009      	beq.n	800686a <create_name+0x182>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800685c:	3b01      	subs	r3, #1
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4413      	add	r3, r2
 8006864:	881b      	ldrh	r3, [r3, #0]
 8006866:	2b2e      	cmp	r3, #46	; 0x2e
 8006868:	d1ef      	bne.n	800684a <create_name+0x162>

	i = b = 0; ni = 8;
 800686a:	2300      	movs	r3, #0
 800686c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006870:	2300      	movs	r3, #0
 8006872:	623b      	str	r3, [r7, #32]
 8006874:	2308      	movs	r3, #8
 8006876:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	61ba      	str	r2, [r7, #24]
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	881b      	ldrh	r3, [r3, #0]
 8006886:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	f000 8090 	beq.w	80069b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006892:	2b20      	cmp	r3, #32
 8006894:	d006      	beq.n	80068a4 <create_name+0x1bc>
 8006896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006898:	2b2e      	cmp	r3, #46	; 0x2e
 800689a:	d10a      	bne.n	80068b2 <create_name+0x1ca>
 800689c:	69ba      	ldr	r2, [r7, #24]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d006      	beq.n	80068b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80068a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068a8:	f043 0303 	orr.w	r3, r3, #3
 80068ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068b0:	e07d      	b.n	80069ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80068b2:	6a3a      	ldr	r2, [r7, #32]
 80068b4:	69fb      	ldr	r3, [r7, #28]
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d203      	bcs.n	80068c2 <create_name+0x1da>
 80068ba:	69ba      	ldr	r2, [r7, #24]
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	429a      	cmp	r2, r3
 80068c0:	d123      	bne.n	800690a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	2b0b      	cmp	r3, #11
 80068c6:	d106      	bne.n	80068d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80068c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068cc:	f043 0303 	orr.w	r3, r3, #3
 80068d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068d4:	e06f      	b.n	80069b6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d005      	beq.n	80068ea <create_name+0x202>
 80068de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068e2:	f043 0303 	orr.w	r3, r3, #3
 80068e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80068ea:	69ba      	ldr	r2, [r7, #24]
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d860      	bhi.n	80069b4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	61bb      	str	r3, [r7, #24]
 80068f6:	2308      	movs	r3, #8
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	230b      	movs	r3, #11
 80068fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80068fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006908:	e051      	b.n	80069ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800690a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800690c:	2b7f      	cmp	r3, #127	; 0x7f
 800690e:	d914      	bls.n	800693a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006912:	2100      	movs	r1, #0
 8006914:	4618      	mov	r0, r3
 8006916:	f001 f91f 	bl	8007b58 <ff_convert>
 800691a:	4603      	mov	r3, r0
 800691c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800691e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <create_name+0x246>
 8006924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006926:	3b80      	subs	r3, #128	; 0x80
 8006928:	4a49      	ldr	r2, [pc, #292]	; (8006a50 <create_name+0x368>)
 800692a:	5cd3      	ldrb	r3, [r2, r3]
 800692c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800692e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006932:	f043 0302 	orr.w	r3, r3, #2
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800693a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800693c:	2b00      	cmp	r3, #0
 800693e:	d007      	beq.n	8006950 <create_name+0x268>
 8006940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006942:	4619      	mov	r1, r3
 8006944:	4843      	ldr	r0, [pc, #268]	; (8006a54 <create_name+0x36c>)
 8006946:	f7fe fc05 	bl	8005154 <chk_chr>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d008      	beq.n	8006962 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006950:	235f      	movs	r3, #95	; 0x5f
 8006952:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006958:	f043 0303 	orr.w	r3, r3, #3
 800695c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006960:	e01b      	b.n	800699a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006964:	2b40      	cmp	r3, #64	; 0x40
 8006966:	d909      	bls.n	800697c <create_name+0x294>
 8006968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800696a:	2b5a      	cmp	r3, #90	; 0x5a
 800696c:	d806      	bhi.n	800697c <create_name+0x294>
					b |= 2;
 800696e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006972:	f043 0302 	orr.w	r3, r3, #2
 8006976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800697a:	e00e      	b.n	800699a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800697c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800697e:	2b60      	cmp	r3, #96	; 0x60
 8006980:	d90b      	bls.n	800699a <create_name+0x2b2>
 8006982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006984:	2b7a      	cmp	r3, #122	; 0x7a
 8006986:	d808      	bhi.n	800699a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006996:	3b20      	subs	r3, #32
 8006998:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	623a      	str	r2, [r7, #32]
 80069a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80069a2:	b2d1      	uxtb	r1, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4413      	add	r3, r2
 80069a8:	460a      	mov	r2, r1
 80069aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80069ae:	e763      	b.n	8006878 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80069b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80069bc:	2be5      	cmp	r3, #229	; 0xe5
 80069be:	d103      	bne.n	80069c8 <create_name+0x2e0>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2205      	movs	r2, #5
 80069c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d104      	bne.n	80069d8 <create_name+0x2f0>
 80069ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80069d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069dc:	f003 030c 	and.w	r3, r3, #12
 80069e0:	2b0c      	cmp	r3, #12
 80069e2:	d005      	beq.n	80069f0 <create_name+0x308>
 80069e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80069e8:	f003 0303 	and.w	r3, r3, #3
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d105      	bne.n	80069fc <create_name+0x314>
 80069f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069f4:	f043 0302 	orr.w	r3, r3, #2
 80069f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80069fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d117      	bne.n	8006a38 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006a08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a0c:	f003 0303 	and.w	r3, r3, #3
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d105      	bne.n	8006a20 <create_name+0x338>
 8006a14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a18:	f043 0310 	orr.w	r3, r3, #16
 8006a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d105      	bne.n	8006a38 <create_name+0x350>
 8006a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a30:	f043 0308 	orr.w	r3, r3, #8
 8006a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006a3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006a42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	3728      	adds	r7, #40	; 0x28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	08009828 	.word	0x08009828
 8006a50:	08009880 	.word	0x08009880
 8006a54:	08009834 	.word	0x08009834

08006a58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006a6c:	e002      	b.n	8006a74 <follow_path+0x1c>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	3301      	adds	r3, #1
 8006a72:	603b      	str	r3, [r7, #0]
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b2f      	cmp	r3, #47	; 0x2f
 8006a7a:	d0f8      	beq.n	8006a6e <follow_path+0x16>
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b5c      	cmp	r3, #92	; 0x5c
 8006a82:	d0f4      	beq.n	8006a6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2200      	movs	r2, #0
 8006a88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b1f      	cmp	r3, #31
 8006a90:	d80a      	bhi.n	8006aa8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f7ff f8fe 	bl	8005c9e <dir_sdi>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	75fb      	strb	r3, [r7, #23]
 8006aa6:	e048      	b.n	8006b3a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f7ff fe1b 	bl	80066e8 <create_name>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006ab6:	7dfb      	ldrb	r3, [r7, #23]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d139      	bne.n	8006b30 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7ff fc5b 	bl	8006378 <dir_find>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006acc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006ace:	7dfb      	ldrb	r3, [r7, #23]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d00a      	beq.n	8006aea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d12c      	bne.n	8006b34 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006ada:	7afb      	ldrb	r3, [r7, #11]
 8006adc:	f003 0304 	and.w	r3, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d127      	bne.n	8006b34 <follow_path+0xdc>
 8006ae4:	2305      	movs	r3, #5
 8006ae6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006ae8:	e024      	b.n	8006b34 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d121      	bne.n	8006b38 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	799b      	ldrb	r3, [r3, #6]
 8006af8:	f003 0310 	and.w	r3, r3, #16
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d102      	bne.n	8006b06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006b00:	2305      	movs	r3, #5
 8006b02:	75fb      	strb	r3, [r7, #23]
 8006b04:	e019      	b.n	8006b3a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	8992      	ldrh	r2, [r2, #12]
 8006b14:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b18:	fb02 f200 	mul.w	r2, r2, r0
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	440b      	add	r3, r1
 8006b20:	4619      	mov	r1, r3
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f7ff fa61 	bl	8005fea <ld_clust>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b2e:	e7bb      	b.n	8006aa8 <follow_path+0x50>
			if (res != FR_OK) break;
 8006b30:	bf00      	nop
 8006b32:	e002      	b.n	8006b3a <follow_path+0xe2>
				break;
 8006b34:	bf00      	nop
 8006b36:	e000      	b.n	8006b3a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006b38:	bf00      	nop
			}
		}
	}

	return res;
 8006b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3718      	adds	r7, #24
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006b50:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d031      	beq.n	8006bbe <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	e002      	b.n	8006b68 <get_ldnumber+0x24>
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	3301      	adds	r3, #1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b1f      	cmp	r3, #31
 8006b6e:	d903      	bls.n	8006b78 <get_ldnumber+0x34>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b3a      	cmp	r3, #58	; 0x3a
 8006b76:	d1f4      	bne.n	8006b62 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	2b3a      	cmp	r3, #58	; 0x3a
 8006b7e:	d11c      	bne.n	8006bba <get_ldnumber+0x76>
			tp = *path;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1c5a      	adds	r2, r3, #1
 8006b8a:	60fa      	str	r2, [r7, #12]
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	3b30      	subs	r3, #48	; 0x30
 8006b90:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	d80e      	bhi.n	8006bb6 <get_ldnumber+0x72>
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d10a      	bne.n	8006bb6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d107      	bne.n	8006bb6 <get_ldnumber+0x72>
					vol = (int)i;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	3301      	adds	r3, #1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	697a      	ldr	r2, [r7, #20]
 8006bb4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	e002      	b.n	8006bc0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006bbe:	693b      	ldr	r3, [r7, #16]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	70da      	strb	r2, [r3, #3]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f7fe fc80 	bl	80054ec <move_window>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <check_fs+0x2a>
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	e038      	b.n	8006c68 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	3338      	adds	r3, #56	; 0x38
 8006bfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe f9c4 	bl	8004f8c <ld_word>
 8006c04:	4603      	mov	r3, r0
 8006c06:	461a      	mov	r2, r3
 8006c08:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d001      	beq.n	8006c14 <check_fs+0x48>
 8006c10:	2303      	movs	r3, #3
 8006c12:	e029      	b.n	8006c68 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c1a:	2be9      	cmp	r3, #233	; 0xe9
 8006c1c:	d009      	beq.n	8006c32 <check_fs+0x66>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c24:	2beb      	cmp	r3, #235	; 0xeb
 8006c26:	d11e      	bne.n	8006c66 <check_fs+0x9a>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c2e:	2b90      	cmp	r3, #144	; 0x90
 8006c30:	d119      	bne.n	8006c66 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3338      	adds	r3, #56	; 0x38
 8006c36:	3336      	adds	r3, #54	; 0x36
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fe f9bf 	bl	8004fbc <ld_dword>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006c44:	4a0a      	ldr	r2, [pc, #40]	; (8006c70 <check_fs+0xa4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d101      	bne.n	8006c4e <check_fs+0x82>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e00c      	b.n	8006c68 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	3338      	adds	r3, #56	; 0x38
 8006c52:	3352      	adds	r3, #82	; 0x52
 8006c54:	4618      	mov	r0, r3
 8006c56:	f7fe f9b1 	bl	8004fbc <ld_dword>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <check_fs+0xa8>)
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d101      	bne.n	8006c66 <check_fs+0x9a>
 8006c62:	2300      	movs	r3, #0
 8006c64:	e000      	b.n	8006c68 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006c66:	2302      	movs	r3, #2
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3708      	adds	r7, #8
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	00544146 	.word	0x00544146
 8006c74:	33544146 	.word	0x33544146

08006c78 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b096      	sub	sp, #88	; 0x58
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	4613      	mov	r3, r2
 8006c84:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f7ff ff59 	bl	8006b44 <get_ldnumber>
 8006c92:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da01      	bge.n	8006c9e <find_volume+0x26>
 8006c9a:	230b      	movs	r3, #11
 8006c9c:	e268      	b.n	8007170 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c9e:	4ab0      	ldr	r2, [pc, #704]	; (8006f60 <find_volume+0x2e8>)
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <find_volume+0x3a>
 8006cae:	230c      	movs	r3, #12
 8006cb0:	e25e      	b.n	8007170 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cb6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006cb8:	79fb      	ldrb	r3, [r7, #7]
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d01a      	beq.n	8006cfe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	785b      	ldrb	r3, [r3, #1]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe f8bf 	bl	8004e50 <disk_status>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10c      	bne.n	8006cfe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006ce4:	79fb      	ldrb	r3, [r7, #7]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <find_volume+0x82>
 8006cea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006cf6:	230a      	movs	r3, #10
 8006cf8:	e23a      	b.n	8007170 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e238      	b.n	8007170 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7fe f8b7 	bl	8004e84 <disk_initialize>
 8006d16:	4603      	mov	r3, r0
 8006d18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006d1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e221      	b.n	8007170 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006d2c:	79fb      	ldrb	r3, [r7, #7]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <find_volume+0xca>
 8006d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006d36:	f003 0304 	and.w	r3, r3, #4
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006d3e:	230a      	movs	r3, #10
 8006d40:	e216      	b.n	8007170 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8006d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d44:	7858      	ldrb	r0, [r3, #1]
 8006d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d48:	330c      	adds	r3, #12
 8006d4a:	461a      	mov	r2, r3
 8006d4c:	2102      	movs	r1, #2
 8006d4e:	f7fe f8ff 	bl	8004f50 <disk_ioctl>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <find_volume+0xe4>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e209      	b.n	8007170 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5e:	899b      	ldrh	r3, [r3, #12]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d80d      	bhi.n	8006d82 <find_volume+0x10a>
 8006d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d68:	899b      	ldrh	r3, [r3, #12]
 8006d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6e:	d308      	bcc.n	8006d82 <find_volume+0x10a>
 8006d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d72:	899b      	ldrh	r3, [r3, #12]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	899b      	ldrh	r3, [r3, #12]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <find_volume+0x10e>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e1f4      	b.n	8007170 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006d86:	2300      	movs	r3, #0
 8006d88:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006d8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d8e:	f7ff ff1d 	bl	8006bcc <check_fs>
 8006d92:	4603      	mov	r3, r0
 8006d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d14b      	bne.n	8006e38 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006da0:	2300      	movs	r3, #0
 8006da2:	643b      	str	r3, [r7, #64]	; 0x40
 8006da4:	e01f      	b.n	8006de6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006db4:	4413      	add	r3, r2
 8006db6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	3304      	adds	r3, #4
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d006      	beq.n	8006dd0 <find_volume+0x158>
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7fe f8f8 	bl	8004fbc <ld_dword>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	e000      	b.n	8006dd2 <find_volume+0x15a>
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006dda:	440b      	add	r3, r1
 8006ddc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de2:	3301      	adds	r3, #1
 8006de4:	643b      	str	r3, [r7, #64]	; 0x40
 8006de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de8:	2b03      	cmp	r3, #3
 8006dea:	d9dc      	bls.n	8006da6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006dec:	2300      	movs	r3, #0
 8006dee:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006df0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <find_volume+0x184>
 8006df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e04:	4413      	add	r3, r2
 8006e06:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e0a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006e0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d005      	beq.n	8006e1e <find_volume+0x1a6>
 8006e12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e16:	f7ff fed9 	bl	8006bcc <check_fs>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	e000      	b.n	8006e20 <find_volume+0x1a8>
 8006e1e:	2303      	movs	r3, #3
 8006e20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d905      	bls.n	8006e38 <find_volume+0x1c0>
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e2e:	3301      	adds	r3, #1
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	2b03      	cmp	r3, #3
 8006e36:	d9e1      	bls.n	8006dfc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d101      	bne.n	8006e44 <find_volume+0x1cc>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e195      	b.n	8007170 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006e44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d901      	bls.n	8006e50 <find_volume+0x1d8>
 8006e4c:	230d      	movs	r3, #13
 8006e4e:	e18f      	b.n	8007170 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	3338      	adds	r3, #56	; 0x38
 8006e54:	330b      	adds	r3, #11
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe f898 	bl	8004f8c <ld_word>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	461a      	mov	r2, r3
 8006e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e62:	899b      	ldrh	r3, [r3, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d001      	beq.n	8006e6c <find_volume+0x1f4>
 8006e68:	230d      	movs	r3, #13
 8006e6a:	e181      	b.n	8007170 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e6e:	3338      	adds	r3, #56	; 0x38
 8006e70:	3316      	adds	r3, #22
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fe f88a 	bl	8004f8c <ld_word>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <find_volume+0x218>
 8006e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e84:	3338      	adds	r3, #56	; 0x38
 8006e86:	3324      	adds	r3, #36	; 0x24
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fe f897 	bl	8004fbc <ld_dword>
 8006e8e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e94:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea2:	789b      	ldrb	r3, [r3, #2]
 8006ea4:	2b01      	cmp	r3, #1
 8006ea6:	d005      	beq.n	8006eb4 <find_volume+0x23c>
 8006ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eaa:	789b      	ldrb	r3, [r3, #2]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d001      	beq.n	8006eb4 <find_volume+0x23c>
 8006eb0:	230d      	movs	r3, #13
 8006eb2:	e15d      	b.n	8007170 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eb6:	789b      	ldrb	r3, [r3, #2]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ebc:	fb02 f303 	mul.w	r3, r2, r3
 8006ec0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ecc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	895b      	ldrh	r3, [r3, #10]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d008      	beq.n	8006ee8 <find_volume+0x270>
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	895b      	ldrh	r3, [r3, #10]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ede:	895b      	ldrh	r3, [r3, #10]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <find_volume+0x274>
 8006ee8:	230d      	movs	r3, #13
 8006eea:	e141      	b.n	8007170 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eee:	3338      	adds	r3, #56	; 0x38
 8006ef0:	3311      	adds	r3, #17
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe f84a 	bl	8004f8c <ld_word>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	461a      	mov	r2, r3
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	891b      	ldrh	r3, [r3, #8]
 8006f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f06:	8992      	ldrh	r2, [r2, #12]
 8006f08:	0952      	lsrs	r2, r2, #5
 8006f0a:	b292      	uxth	r2, r2
 8006f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f10:	fb02 f201 	mul.w	r2, r2, r1
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <find_volume+0x2a8>
 8006f1c:	230d      	movs	r3, #13
 8006f1e:	e127      	b.n	8007170 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	3338      	adds	r3, #56	; 0x38
 8006f24:	3313      	adds	r3, #19
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe f830 	bl	8004f8c <ld_word>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d106      	bne.n	8006f44 <find_volume+0x2cc>
 8006f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f38:	3338      	adds	r3, #56	; 0x38
 8006f3a:	3320      	adds	r3, #32
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fe f83d 	bl	8004fbc <ld_dword>
 8006f42:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	3338      	adds	r3, #56	; 0x38
 8006f48:	330e      	adds	r3, #14
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe f81e 	bl	8004f8c <ld_word>
 8006f50:	4603      	mov	r3, r0
 8006f52:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d104      	bne.n	8006f64 <find_volume+0x2ec>
 8006f5a:	230d      	movs	r3, #13
 8006f5c:	e108      	b.n	8007170 <find_volume+0x4f8>
 8006f5e:	bf00      	nop
 8006f60:	200000c4 	.word	0x200000c4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006f64:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	4413      	add	r3, r2
 8006f6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6c:	8911      	ldrh	r1, [r2, #8]
 8006f6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f70:	8992      	ldrh	r2, [r2, #12]
 8006f72:	0952      	lsrs	r2, r2, #5
 8006f74:	b292      	uxth	r2, r2
 8006f76:	fbb1 f2f2 	udiv	r2, r1, r2
 8006f7a:	b292      	uxth	r2, r2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006f80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d201      	bcs.n	8006f8c <find_volume+0x314>
 8006f88:	230d      	movs	r3, #13
 8006f8a:	e0f1      	b.n	8007170 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f94:	8952      	ldrh	r2, [r2, #10]
 8006f96:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f9a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d101      	bne.n	8006fa6 <find_volume+0x32e>
 8006fa2:	230d      	movs	r3, #13
 8006fa4:	e0e4      	b.n	8007170 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d802      	bhi.n	8006fbc <find_volume+0x344>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d802      	bhi.n	8006fcc <find_volume+0x354>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	1c9a      	adds	r2, r3, #2
 8006fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd2:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fd8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006fda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fde:	441a      	add	r2, r3
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006fe4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	441a      	add	r2, r3
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006fee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d11e      	bne.n	8007034 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff8:	3338      	adds	r3, #56	; 0x38
 8006ffa:	332a      	adds	r3, #42	; 0x2a
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7fd ffc5 	bl	8004f8c <ld_word>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <find_volume+0x394>
 8007008:	230d      	movs	r3, #13
 800700a:	e0b1      	b.n	8007170 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	891b      	ldrh	r3, [r3, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <find_volume+0x3a0>
 8007014:	230d      	movs	r3, #13
 8007016:	e0ab      	b.n	8007170 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800701a:	3338      	adds	r3, #56	; 0x38
 800701c:	332c      	adds	r3, #44	; 0x2c
 800701e:	4618      	mov	r0, r3
 8007020:	f7fd ffcc 	bl	8004fbc <ld_dword>
 8007024:	4602      	mov	r2, r0
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800702a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	647b      	str	r3, [r7, #68]	; 0x44
 8007032:	e01f      	b.n	8007074 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	891b      	ldrh	r3, [r3, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <find_volume+0x3c8>
 800703c:	230d      	movs	r3, #13
 800703e:	e097      	b.n	8007170 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007042:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007046:	441a      	add	r2, r3
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800704c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007050:	2b02      	cmp	r3, #2
 8007052:	d103      	bne.n	800705c <find_volume+0x3e4>
 8007054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	e00a      	b.n	8007072 <find_volume+0x3fa>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	69da      	ldr	r2, [r3, #28]
 8007060:	4613      	mov	r3, r2
 8007062:	005b      	lsls	r3, r3, #1
 8007064:	4413      	add	r3, r2
 8007066:	085a      	lsrs	r2, r3, #1
 8007068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800706a:	69db      	ldr	r3, [r3, #28]
 800706c:	f003 0301 	and.w	r3, r3, #1
 8007070:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007072:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800707a:	899b      	ldrh	r3, [r3, #12]
 800707c:	4619      	mov	r1, r3
 800707e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007080:	440b      	add	r3, r1
 8007082:	3b01      	subs	r3, #1
 8007084:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007086:	8989      	ldrh	r1, [r1, #12]
 8007088:	fbb3 f3f1 	udiv	r3, r3, r1
 800708c:	429a      	cmp	r2, r3
 800708e:	d201      	bcs.n	8007094 <find_volume+0x41c>
 8007090:	230d      	movs	r3, #13
 8007092:	e06d      	b.n	8007170 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007096:	f04f 32ff 	mov.w	r2, #4294967295
 800709a:	619a      	str	r2, [r3, #24]
 800709c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709e:	699a      	ldr	r2, [r3, #24]
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80070a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80070aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d149      	bne.n	8007146 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80070b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b4:	3338      	adds	r3, #56	; 0x38
 80070b6:	3330      	adds	r3, #48	; 0x30
 80070b8:	4618      	mov	r0, r3
 80070ba:	f7fd ff67 	bl	8004f8c <ld_word>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d140      	bne.n	8007146 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80070c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c6:	3301      	adds	r3, #1
 80070c8:	4619      	mov	r1, r3
 80070ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070cc:	f7fe fa0e 	bl	80054ec <move_window>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d137      	bne.n	8007146 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80070d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d8:	2200      	movs	r2, #0
 80070da:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	3338      	adds	r3, #56	; 0x38
 80070e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fd ff51 	bl	8004f8c <ld_word>
 80070ea:	4603      	mov	r3, r0
 80070ec:	461a      	mov	r2, r3
 80070ee:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d127      	bne.n	8007146 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	3338      	adds	r3, #56	; 0x38
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fd ff5e 	bl	8004fbc <ld_dword>
 8007100:	4602      	mov	r2, r0
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <find_volume+0x500>)
 8007104:	429a      	cmp	r2, r3
 8007106:	d11e      	bne.n	8007146 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	3338      	adds	r3, #56	; 0x38
 800710c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007110:	4618      	mov	r0, r3
 8007112:	f7fd ff53 	bl	8004fbc <ld_dword>
 8007116:	4602      	mov	r2, r0
 8007118:	4b18      	ldr	r3, [pc, #96]	; (800717c <find_volume+0x504>)
 800711a:	429a      	cmp	r2, r3
 800711c:	d113      	bne.n	8007146 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	3338      	adds	r3, #56	; 0x38
 8007122:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007126:	4618      	mov	r0, r3
 8007128:	f7fd ff48 	bl	8004fbc <ld_dword>
 800712c:	4602      	mov	r2, r0
 800712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007130:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	3338      	adds	r3, #56	; 0x38
 8007136:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800713a:	4618      	mov	r0, r3
 800713c:	f7fd ff3e 	bl	8004fbc <ld_dword>
 8007140:	4602      	mov	r2, r0
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007148:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800714c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800714e:	4b0c      	ldr	r3, [pc, #48]	; (8007180 <find_volume+0x508>)
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	3301      	adds	r3, #1
 8007154:	b29a      	uxth	r2, r3
 8007156:	4b0a      	ldr	r3, [pc, #40]	; (8007180 <find_volume+0x508>)
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	4b09      	ldr	r3, [pc, #36]	; (8007180 <find_volume+0x508>)
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	4a07      	ldr	r2, [pc, #28]	; (8007184 <find_volume+0x50c>)
 8007166:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800716a:	f7fe f957 	bl	800541c <clear_lock>
#endif
	return FR_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3758      	adds	r7, #88	; 0x58
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	41615252 	.word	0x41615252
 800717c:	61417272 	.word	0x61417272
 8007180:	200000c8 	.word	0x200000c8
 8007184:	200000ec 	.word	0x200000ec

08007188 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007192:	2309      	movs	r3, #9
 8007194:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d01c      	beq.n	80071d6 <validate+0x4e>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d018      	beq.n	80071d6 <validate+0x4e>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d013      	beq.n	80071d6 <validate+0x4e>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	889a      	ldrh	r2, [r3, #4]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	88db      	ldrh	r3, [r3, #6]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d10c      	bne.n	80071d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	785b      	ldrb	r3, [r3, #1]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7fd fe44 	bl	8004e50 <disk_status>
 80071c8:	4603      	mov	r3, r0
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d101      	bne.n	80071d6 <validate+0x4e>
			res = FR_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80071d6:	7bfb      	ldrb	r3, [r7, #15]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <validate+0x5a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	e000      	b.n	80071e4 <validate+0x5c>
 80071e2:	2300      	movs	r3, #0
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	6013      	str	r3, [r2, #0]
	return res;
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
	...

080071f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007206:	f107 0310 	add.w	r3, r7, #16
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fc9a 	bl	8006b44 <get_ldnumber>
 8007210:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da01      	bge.n	800721c <f_mount+0x28>
 8007218:	230b      	movs	r3, #11
 800721a:	e02b      	b.n	8007274 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <f_mount+0x88>)
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007224:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800722c:	69b8      	ldr	r0, [r7, #24]
 800722e:	f7fe f8f5 	bl	800541c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d002      	beq.n	8007244 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	490d      	ldr	r1, [pc, #52]	; (800727c <f_mount+0x88>)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <f_mount+0x66>
 8007254:	79fb      	ldrb	r3, [r7, #7]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d001      	beq.n	800725e <f_mount+0x6a>
 800725a:	2300      	movs	r3, #0
 800725c:	e00a      	b.n	8007274 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800725e:	f107 010c 	add.w	r1, r7, #12
 8007262:	f107 0308 	add.w	r3, r7, #8
 8007266:	2200      	movs	r2, #0
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fd05 	bl	8006c78 <find_volume>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007272:	7dfb      	ldrb	r3, [r7, #23]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3720      	adds	r7, #32
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	200000c4 	.word	0x200000c4

08007280 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b09a      	sub	sp, #104	; 0x68
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	4613      	mov	r3, r2
 800728c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <f_open+0x18>
 8007294:	2309      	movs	r3, #9
 8007296:	e1bb      	b.n	8007610 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800729e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	f107 0114 	add.w	r1, r7, #20
 80072a6:	f107 0308 	add.w	r3, r7, #8
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fce4 	bl	8006c78 <find_volume>
 80072b0:	4603      	mov	r3, r0
 80072b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80072b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f040 819f 	bne.w	80075fe <f_open+0x37e>
		dj.obj.fs = fs;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	f107 0318 	add.w	r3, r7, #24
 80072ca:	4611      	mov	r1, r2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fbc3 	bl	8006a58 <follow_path>
 80072d2:	4603      	mov	r3, r0
 80072d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80072d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11a      	bne.n	8007316 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80072e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	da03      	bge.n	80072f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80072ea:	2306      	movs	r3, #6
 80072ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80072f0:	e011      	b.n	8007316 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	f023 0301 	bic.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
 8007302:	461a      	mov	r2, r3
 8007304:	f107 0318 	add.w	r3, r7, #24
 8007308:	4611      	mov	r1, r2
 800730a:	4618      	mov	r0, r3
 800730c:	f7fd ff3e 	bl	800518c <chk_lock>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007316:	79fb      	ldrb	r3, [r7, #7]
 8007318:	f003 031c 	and.w	r3, r3, #28
 800731c:	2b00      	cmp	r3, #0
 800731e:	d07f      	beq.n	8007420 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007320:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007324:	2b00      	cmp	r3, #0
 8007326:	d017      	beq.n	8007358 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007328:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800732c:	2b04      	cmp	r3, #4
 800732e:	d10e      	bne.n	800734e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007330:	f7fd ff88 	bl	8005244 <enq_lock>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <f_open+0xc8>
 800733a:	f107 0318 	add.w	r3, r7, #24
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff f8da 	bl	80064f8 <dir_register>
 8007344:	4603      	mov	r3, r0
 8007346:	e000      	b.n	800734a <f_open+0xca>
 8007348:	2312      	movs	r3, #18
 800734a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800734e:	79fb      	ldrb	r3, [r7, #7]
 8007350:	f043 0308 	orr.w	r3, r3, #8
 8007354:	71fb      	strb	r3, [r7, #7]
 8007356:	e010      	b.n	800737a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007358:	7fbb      	ldrb	r3, [r7, #30]
 800735a:	f003 0311 	and.w	r3, r3, #17
 800735e:	2b00      	cmp	r3, #0
 8007360:	d003      	beq.n	800736a <f_open+0xea>
					res = FR_DENIED;
 8007362:	2307      	movs	r3, #7
 8007364:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007368:	e007      	b.n	800737a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b00      	cmp	r3, #0
 8007372:	d002      	beq.n	800737a <f_open+0xfa>
 8007374:	2308      	movs	r3, #8
 8007376:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800737a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800737e:	2b00      	cmp	r3, #0
 8007380:	d168      	bne.n	8007454 <f_open+0x1d4>
 8007382:	79fb      	ldrb	r3, [r7, #7]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d063      	beq.n	8007454 <f_open+0x1d4>
				dw = GET_FATTIME();
 800738c:	f7fd fcfe 	bl	8004d8c <get_fattime>
 8007390:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	330e      	adds	r3, #14
 8007396:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007398:	4618      	mov	r0, r3
 800739a:	f7fd fe4d 	bl	8005038 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800739e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a0:	3316      	adds	r3, #22
 80073a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fd fe47 	bl	8005038 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80073aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ac:	330b      	adds	r3, #11
 80073ae:	2220      	movs	r2, #32
 80073b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073b6:	4611      	mov	r1, r2
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe fe16 	bl	8005fea <ld_clust>
 80073be:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073c4:	2200      	movs	r2, #0
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fe fe2e 	bl	8006028 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	331c      	adds	r3, #28
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fd fe30 	bl	8005038 <st_dword>
					fs->wflag = 1;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	2201      	movs	r2, #1
 80073dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80073de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d037      	beq.n	8007454 <f_open+0x1d4>
						dw = fs->winsect;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80073ea:	f107 0318 	add.w	r3, r7, #24
 80073ee:	2200      	movs	r2, #0
 80073f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fb1e 	bl	8005a34 <remove_chain>
 80073f8:	4603      	mov	r3, r0
 80073fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80073fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007402:	2b00      	cmp	r3, #0
 8007404:	d126      	bne.n	8007454 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800740a:	4618      	mov	r0, r3
 800740c:	f7fe f86e 	bl	80054ec <move_window>
 8007410:	4603      	mov	r3, r0
 8007412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800741a:	3a01      	subs	r2, #1
 800741c:	615a      	str	r2, [r3, #20]
 800741e:	e019      	b.n	8007454 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007424:	2b00      	cmp	r3, #0
 8007426:	d115      	bne.n	8007454 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007428:	7fbb      	ldrb	r3, [r7, #30]
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <f_open+0x1ba>
					res = FR_NO_FILE;
 8007432:	2304      	movs	r3, #4
 8007434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007438:	e00c      	b.n	8007454 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d007      	beq.n	8007454 <f_open+0x1d4>
 8007444:	7fbb      	ldrb	r3, [r7, #30]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <f_open+0x1d4>
						res = FR_DENIED;
 800744e:	2307      	movs	r3, #7
 8007450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007454:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007458:	2b00      	cmp	r3, #0
 800745a:	d128      	bne.n	80074ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800745c:	79fb      	ldrb	r3, [r7, #7]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800746c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	f023 0301 	bic.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	f107 0318 	add.w	r3, r7, #24
 8007492:	4611      	mov	r1, r2
 8007494:	4618      	mov	r0, r3
 8007496:	f7fd fef7 	bl	8005288 <inc_lock>
 800749a:	4602      	mov	r2, r0
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	691b      	ldr	r3, [r3, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <f_open+0x22e>
 80074a8:	2302      	movs	r3, #2
 80074aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80074ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f040 80a3 	bne.w	80075fe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074bc:	4611      	mov	r1, r2
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fe fd93 	bl	8005fea <ld_clust>
 80074c4:	4602      	mov	r2, r0
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	331c      	adds	r3, #28
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fd fd74 	bl	8004fbc <ld_dword>
 80074d4:	4602      	mov	r2, r0
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	88da      	ldrh	r2, [r3, #6]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	79fa      	ldrb	r2, [r7, #7]
 80074f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3330      	adds	r3, #48	; 0x30
 800750a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f7fd fdde 	bl	80050d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007516:	79fb      	ldrb	r3, [r7, #7]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d06e      	beq.n	80075fe <f_open+0x37e>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d06a      	beq.n	80075fe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	895b      	ldrh	r3, [r3, #10]
 8007534:	461a      	mov	r2, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	899b      	ldrh	r3, [r3, #12]
 800753a:	fb03 f302 	mul.w	r3, r3, r2
 800753e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	68db      	ldr	r3, [r3, #12]
 800754a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800754c:	e016      	b.n	800757c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe f887 	bl	8005666 <get_fat>
 8007558:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800755a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800755c:	2b01      	cmp	r3, #1
 800755e:	d802      	bhi.n	8007566 <f_open+0x2e6>
 8007560:	2302      	movs	r3, #2
 8007562:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800756c:	d102      	bne.n	8007574 <f_open+0x2f4>
 800756e:	2301      	movs	r3, #1
 8007570:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800757c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <f_open+0x30c>
 8007584:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007588:	429a      	cmp	r2, r3
 800758a:	d8e0      	bhi.n	800754e <f_open+0x2ce>
				}
				fp->clust = clst;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007590:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007592:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007596:	2b00      	cmp	r3, #0
 8007598:	d131      	bne.n	80075fe <f_open+0x37e>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	899b      	ldrh	r3, [r3, #12]
 800759e:	461a      	mov	r2, r3
 80075a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a6:	fb02 f201 	mul.w	r2, r2, r1
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d026      	beq.n	80075fe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7fe f837 	bl	8005628 <clust2sect>
 80075ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d103      	bne.n	80075ca <f_open+0x34a>
						res = FR_INT_ERR;
 80075c2:	2302      	movs	r3, #2
 80075c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80075c8:	e019      	b.n	80075fe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	899b      	ldrh	r3, [r3, #12]
 80075ce:	461a      	mov	r2, r3
 80075d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80075d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075d8:	441a      	add	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	7858      	ldrb	r0, [r3, #1]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a1a      	ldr	r2, [r3, #32]
 80075ec:	2301      	movs	r3, #1
 80075ee:	f7fd fc6f 	bl	8004ed0 <disk_read>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d002      	beq.n	80075fe <f_open+0x37e>
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80075fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007602:	2b00      	cmp	r3, #0
 8007604:	d002      	beq.n	800760c <f_open+0x38c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800760c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007610:	4618      	mov	r0, r3
 8007612:	3768      	adds	r7, #104	; 0x68
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08e      	sub	sp, #56	; 0x38
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2200      	movs	r2, #0
 800762e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f107 0214 	add.w	r2, r7, #20
 8007636:	4611      	mov	r1, r2
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fda5 	bl	8007188 <validate>
 800763e:	4603      	mov	r3, r0
 8007640:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007648:	2b00      	cmp	r3, #0
 800764a:	d107      	bne.n	800765c <f_read+0x44>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	7d5b      	ldrb	r3, [r3, #21]
 8007650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8007654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007658:	2b00      	cmp	r3, #0
 800765a:	d002      	beq.n	8007662 <f_read+0x4a>
 800765c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007660:	e135      	b.n	80078ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	7d1b      	ldrb	r3, [r3, #20]
 8007666:	f003 0301 	and.w	r3, r3, #1
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <f_read+0x5a>
 800766e:	2307      	movs	r3, #7
 8007670:	e12d      	b.n	80078ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	68da      	ldr	r2, [r3, #12]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	1ad3      	subs	r3, r2, r3
 800767c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	429a      	cmp	r2, r3
 8007684:	f240 811e 	bls.w	80078c4 <f_read+0x2ac>
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800768c:	e11a      	b.n	80078c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	8992      	ldrh	r2, [r2, #12]
 8007696:	fbb3 f1f2 	udiv	r1, r3, r2
 800769a:	fb02 f201 	mul.w	r2, r2, r1
 800769e:	1a9b      	subs	r3, r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 80d5 	bne.w	8007850 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	8992      	ldrh	r2, [r2, #12]
 80076ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	8952      	ldrh	r2, [r2, #10]
 80076b6:	3a01      	subs	r2, #1
 80076b8:	4013      	ands	r3, r2
 80076ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d12f      	bne.n	8007722 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d103      	bne.n	80076d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	633b      	str	r3, [r7, #48]	; 0x30
 80076d0:	e013      	b.n	80076fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	4619      	mov	r1, r3
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f7fe faa4 	bl	8005c2e <clmt_clust>
 80076e6:	6338      	str	r0, [r7, #48]	; 0x30
 80076e8:	e007      	b.n	80076fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	69db      	ldr	r3, [r3, #28]
 80076f0:	4619      	mov	r1, r3
 80076f2:	4610      	mov	r0, r2
 80076f4:	f7fd ffb7 	bl	8005666 <get_fat>
 80076f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d804      	bhi.n	800770a <f_read+0xf2>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2202      	movs	r2, #2
 8007704:	755a      	strb	r2, [r3, #21]
 8007706:	2302      	movs	r3, #2
 8007708:	e0e1      	b.n	80078ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d104      	bne.n	800771c <f_read+0x104>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	755a      	strb	r2, [r3, #21]
 8007718:	2301      	movs	r3, #1
 800771a:	e0d8      	b.n	80078ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007720:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f7fd ff7c 	bl	8005628 <clust2sect>
 8007730:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d104      	bne.n	8007742 <f_read+0x12a>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2202      	movs	r2, #2
 800773c:	755a      	strb	r2, [r3, #21]
 800773e:	2302      	movs	r3, #2
 8007740:	e0c5      	b.n	80078ce <f_read+0x2b6>
			sect += csect;
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	899b      	ldrh	r3, [r3, #12]
 800774e:	461a      	mov	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	fbb3 f3f2 	udiv	r3, r3, r2
 8007756:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	2b00      	cmp	r3, #0
 800775c:	d041      	beq.n	80077e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800775e:	69fa      	ldr	r2, [r7, #28]
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	4413      	add	r3, r2
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	8952      	ldrh	r2, [r2, #10]
 8007768:	4293      	cmp	r3, r2
 800776a:	d905      	bls.n	8007778 <f_read+0x160>
					cc = fs->csize - csect;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	895b      	ldrh	r3, [r3, #10]
 8007770:	461a      	mov	r2, r3
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	7858      	ldrb	r0, [r3, #1]
 800777c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007782:	f7fd fba5 	bl	8004ed0 <disk_read>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <f_read+0x17e>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	755a      	strb	r2, [r3, #21]
 8007792:	2301      	movs	r3, #1
 8007794:	e09b      	b.n	80078ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	7d1b      	ldrb	r3, [r3, #20]
 800779a:	b25b      	sxtb	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	da18      	bge.n	80077d2 <f_read+0x1ba>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6a1a      	ldr	r2, [r3, #32]
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d911      	bls.n	80077d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1a      	ldr	r2, [r3, #32]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	8992      	ldrh	r2, [r2, #12]
 80077ba:	fb02 f303 	mul.w	r3, r2, r3
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	18d0      	adds	r0, r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	899b      	ldrh	r3, [r3, #12]
 80077cc:	461a      	mov	r2, r3
 80077ce:	f7fd fc5f 	bl	8005090 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	899b      	ldrh	r3, [r3, #12]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	fb02 f303 	mul.w	r3, r2, r3
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80077e0:	e05c      	b.n	800789c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d02e      	beq.n	800784a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	7d1b      	ldrb	r3, [r3, #20]
 80077f0:	b25b      	sxtb	r3, r3
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	da18      	bge.n	8007828 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	7858      	ldrb	r0, [r3, #1]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6a1a      	ldr	r2, [r3, #32]
 8007804:	2301      	movs	r3, #1
 8007806:	f7fd fb83 	bl	8004f10 <disk_write>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <f_read+0x202>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	755a      	strb	r2, [r3, #21]
 8007816:	2301      	movs	r3, #1
 8007818:	e059      	b.n	80078ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	7d1b      	ldrb	r3, [r3, #20]
 800781e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007822:	b2da      	uxtb	r2, r3
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	7858      	ldrb	r0, [r3, #1]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007832:	2301      	movs	r3, #1
 8007834:	69ba      	ldr	r2, [r7, #24]
 8007836:	f7fd fb4b 	bl	8004ed0 <disk_read>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <f_read+0x232>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	755a      	strb	r2, [r3, #21]
 8007846:	2301      	movs	r3, #1
 8007848:	e041      	b.n	80078ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	69ba      	ldr	r2, [r7, #24]
 800784e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007850:	697b      	ldr	r3, [r7, #20]
 8007852:	899b      	ldrh	r3, [r3, #12]
 8007854:	4618      	mov	r0, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	8992      	ldrh	r2, [r2, #12]
 800785e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007862:	fb02 f201 	mul.w	r2, r2, r1
 8007866:	1a9b      	subs	r3, r3, r2
 8007868:	1ac3      	subs	r3, r0, r3
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800786c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d901      	bls.n	8007878 <f_read+0x260>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	697a      	ldr	r2, [r7, #20]
 8007884:	8992      	ldrh	r2, [r2, #12]
 8007886:	fbb3 f0f2 	udiv	r0, r3, r2
 800788a:	fb02 f200 	mul.w	r2, r2, r0
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	440b      	add	r3, r1
 8007892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007894:	4619      	mov	r1, r3
 8007896:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007898:	f7fd fbfa 	bl	8005090 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800789c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	4413      	add	r3, r2
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	699a      	ldr	r2, [r3, #24]
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	441a      	add	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	619a      	str	r2, [r3, #24]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	441a      	add	r2, r3
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f47f aee1 	bne.w	800768e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3738      	adds	r7, #56	; 0x38
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b086      	sub	sp, #24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f107 0208 	add.w	r2, r7, #8
 80078e4:	4611      	mov	r1, r2
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7ff fc4e 	bl	8007188 <validate>
 80078ec:	4603      	mov	r3, r0
 80078ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80078f0:	7dfb      	ldrb	r3, [r7, #23]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d168      	bne.n	80079c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7d1b      	ldrb	r3, [r3, #20]
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d062      	beq.n	80079c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7d1b      	ldrb	r3, [r3, #20]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	da15      	bge.n	8007938 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	7858      	ldrb	r0, [r3, #1]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a1a      	ldr	r2, [r3, #32]
 800791a:	2301      	movs	r3, #1
 800791c:	f7fd faf8 	bl	8004f10 <disk_write>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <f_sync+0x54>
 8007926:	2301      	movs	r3, #1
 8007928:	e04f      	b.n	80079ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7d1b      	ldrb	r3, [r3, #20]
 800792e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007932:	b2da      	uxtb	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007938:	f7fd fa28 	bl	8004d8c <get_fattime>
 800793c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	4619      	mov	r1, r3
 8007946:	4610      	mov	r0, r2
 8007948:	f7fd fdd0 	bl	80054ec <move_window>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d138      	bne.n	80079c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	330b      	adds	r3, #11
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	330b      	adds	r3, #11
 8007966:	f042 0220 	orr.w	r2, r2, #32
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6818      	ldr	r0, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	461a      	mov	r2, r3
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	f7fe fb55 	bl	8006028 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f103 021c 	add.w	r2, r3, #28
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	4619      	mov	r1, r3
 800798a:	4610      	mov	r0, r2
 800798c:	f7fd fb54 	bl	8005038 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3316      	adds	r3, #22
 8007994:	6939      	ldr	r1, [r7, #16]
 8007996:	4618      	mov	r0, r3
 8007998:	f7fd fb4e 	bl	8005038 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	3312      	adds	r3, #18
 80079a0:	2100      	movs	r1, #0
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7fd fb2d 	bl	8005002 <st_word>
					fs->wflag = 1;
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2201      	movs	r2, #1
 80079ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fd fdc9 	bl	8005548 <sync_fs>
 80079b6:	4603      	mov	r3, r0
 80079b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	7d1b      	ldrb	r3, [r3, #20]
 80079be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80079c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7ff ff7b 	bl	80078d6 <f_sync>
 80079e0:	4603      	mov	r3, r0
 80079e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80079e4:	7bfb      	ldrb	r3, [r7, #15]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d118      	bne.n	8007a1c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f107 0208 	add.w	r2, r7, #8
 80079f0:	4611      	mov	r1, r2
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fbc8 	bl	8007188 <validate>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10c      	bne.n	8007a1c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7fd fccc 	bl	80053a4 <dec_lock>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d102      	bne.n	8007a1c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b088      	sub	sp, #32
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
	int n = 0;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007a3a:	e01b      	b.n	8007a74 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8007a3c:	f107 0310 	add.w	r3, r7, #16
 8007a40:	f107 0114 	add.w	r1, r7, #20
 8007a44:	2201      	movs	r2, #1
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fde6 	bl	8007618 <f_read>
		if (rc != 1) break;
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d116      	bne.n	8007a80 <f_gets+0x5a>
		c = s[0];
 8007a52:	7d3b      	ldrb	r3, [r7, #20]
 8007a54:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8007a56:	7dfb      	ldrb	r3, [r7, #23]
 8007a58:	2b0d      	cmp	r3, #13
 8007a5a:	d100      	bne.n	8007a5e <f_gets+0x38>
 8007a5c:	e00a      	b.n	8007a74 <f_gets+0x4e>
		*p++ = c;
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	61ba      	str	r2, [r7, #24]
 8007a64:	7dfa      	ldrb	r2, [r7, #23]
 8007a66:	701a      	strb	r2, [r3, #0]
		n++;
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	2b0a      	cmp	r3, #10
 8007a72:	d007      	beq.n	8007a84 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	3b01      	subs	r3, #1
 8007a78:	69fa      	ldr	r2, [r7, #28]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	dbde      	blt.n	8007a3c <f_gets+0x16>
 8007a7e:	e002      	b.n	8007a86 <f_gets+0x60>
		if (rc != 1) break;
 8007a80:	bf00      	nop
 8007a82:	e000      	b.n	8007a86 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8007a84:	bf00      	nop
	}
	*p = 0;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <f_gets+0x70>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	e000      	b.n	8007a98 <f_gets+0x72>
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ab6:	4b1f      	ldr	r3, [pc, #124]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ab8:	7a5b      	ldrb	r3, [r3, #9]
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d131      	bne.n	8007b24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ac0:	4b1c      	ldr	r3, [pc, #112]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ac2:	7a5b      	ldrb	r3, [r3, #9]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	4b1a      	ldr	r3, [pc, #104]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007aca:	2100      	movs	r1, #0
 8007acc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007ace:	4b19      	ldr	r3, [pc, #100]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ad0:	7a5b      	ldrb	r3, [r3, #9]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	4a17      	ldr	r2, [pc, #92]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007ade:	4b15      	ldr	r3, [pc, #84]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ae0:	7a5b      	ldrb	r3, [r3, #9]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007ae8:	4413      	add	r3, r2
 8007aea:	79fa      	ldrb	r2, [r7, #7]
 8007aec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007aee:	4b11      	ldr	r3, [pc, #68]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007af0:	7a5b      	ldrb	r3, [r3, #9]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	1c5a      	adds	r2, r3, #1
 8007af6:	b2d1      	uxtb	r1, r2
 8007af8:	4a0e      	ldr	r2, [pc, #56]	; (8007b34 <FATFS_LinkDriverEx+0x94>)
 8007afa:	7251      	strb	r1, [r2, #9]
 8007afc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007afe:	7dbb      	ldrb	r3, [r7, #22]
 8007b00:	3330      	adds	r3, #48	; 0x30
 8007b02:	b2da      	uxtb	r2, r3
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	223a      	movs	r2, #58	; 0x3a
 8007b0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	3302      	adds	r3, #2
 8007b14:	222f      	movs	r2, #47	; 0x2f
 8007b16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	3303      	adds	r3, #3
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	200002ec 	.word	0x200002ec

08007b38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007b42:	2200      	movs	r2, #0
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff ffaa 	bl	8007aa0 <FATFS_LinkDriverEx>
 8007b4c:	4603      	mov	r3, r0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3708      	adds	r7, #8
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	6039      	str	r1, [r7, #0]
 8007b62:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007b64:	88fb      	ldrh	r3, [r7, #6]
 8007b66:	2b7f      	cmp	r3, #127	; 0x7f
 8007b68:	d802      	bhi.n	8007b70 <ff_convert+0x18>
		c = chr;
 8007b6a:	88fb      	ldrh	r3, [r7, #6]
 8007b6c:	81fb      	strh	r3, [r7, #14]
 8007b6e:	e025      	b.n	8007bbc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007b76:	88fb      	ldrh	r3, [r7, #6]
 8007b78:	2bff      	cmp	r3, #255	; 0xff
 8007b7a:	d805      	bhi.n	8007b88 <ff_convert+0x30>
 8007b7c:	88fb      	ldrh	r3, [r7, #6]
 8007b7e:	3b80      	subs	r3, #128	; 0x80
 8007b80:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <ff_convert+0x74>)
 8007b82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b86:	e000      	b.n	8007b8a <ff_convert+0x32>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	81fb      	strh	r3, [r7, #14]
 8007b8c:	e016      	b.n	8007bbc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007b8e:	2300      	movs	r3, #0
 8007b90:	81fb      	strh	r3, [r7, #14]
 8007b92:	e009      	b.n	8007ba8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007b94:	89fb      	ldrh	r3, [r7, #14]
 8007b96:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <ff_convert+0x74>)
 8007b98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b9c:	88fa      	ldrh	r2, [r7, #6]
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d006      	beq.n	8007bb0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007ba2:	89fb      	ldrh	r3, [r7, #14]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	81fb      	strh	r3, [r7, #14]
 8007ba8:	89fb      	ldrh	r3, [r7, #14]
 8007baa:	2b7f      	cmp	r3, #127	; 0x7f
 8007bac:	d9f2      	bls.n	8007b94 <ff_convert+0x3c>
 8007bae:	e000      	b.n	8007bb2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007bb0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	3380      	adds	r3, #128	; 0x80
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007bbc:	89fb      	ldrh	r3, [r7, #14]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr
 8007bca:	bf00      	nop
 8007bcc:	08009910 	.word	0x08009910

08007bd0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b087      	sub	sp, #28
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be0:	d201      	bcs.n	8007be6 <ff_wtoupper+0x16>
 8007be2:	4b3e      	ldr	r3, [pc, #248]	; (8007cdc <ff_wtoupper+0x10c>)
 8007be4:	e000      	b.n	8007be8 <ff_wtoupper+0x18>
 8007be6:	4b3e      	ldr	r3, [pc, #248]	; (8007ce0 <ff_wtoupper+0x110>)
 8007be8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	1c9a      	adds	r2, r3, #2
 8007bee:	617a      	str	r2, [r7, #20]
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007bf4:	8a7b      	ldrh	r3, [r7, #18]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d068      	beq.n	8007ccc <ff_wtoupper+0xfc>
 8007bfa:	88fa      	ldrh	r2, [r7, #6]
 8007bfc:	8a7b      	ldrh	r3, [r7, #18]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d364      	bcc.n	8007ccc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	1c9a      	adds	r2, r3, #2
 8007c06:	617a      	str	r2, [r7, #20]
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	823b      	strh	r3, [r7, #16]
 8007c0c:	8a3b      	ldrh	r3, [r7, #16]
 8007c0e:	0a1b      	lsrs	r3, r3, #8
 8007c10:	81fb      	strh	r3, [r7, #14]
 8007c12:	8a3b      	ldrh	r3, [r7, #16]
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007c18:	88fa      	ldrh	r2, [r7, #6]
 8007c1a:	8a79      	ldrh	r1, [r7, #18]
 8007c1c:	8a3b      	ldrh	r3, [r7, #16]
 8007c1e:	440b      	add	r3, r1
 8007c20:	429a      	cmp	r2, r3
 8007c22:	da49      	bge.n	8007cb8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007c24:	89fb      	ldrh	r3, [r7, #14]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d84f      	bhi.n	8007cca <ff_wtoupper+0xfa>
 8007c2a:	a201      	add	r2, pc, #4	; (adr r2, 8007c30 <ff_wtoupper+0x60>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c55 	.word	0x08007c55
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c7d 	.word	0x08007c7d
 8007c3c:	08007c85 	.word	0x08007c85
 8007c40:	08007c8d 	.word	0x08007c8d
 8007c44:	08007c95 	.word	0x08007c95
 8007c48:	08007c9d 	.word	0x08007c9d
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007cad 	.word	0x08007cad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007c54:	88fa      	ldrh	r2, [r7, #6]
 8007c56:	8a7b      	ldrh	r3, [r7, #18]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	697a      	ldr	r2, [r7, #20]
 8007c5e:	4413      	add	r3, r2
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	80fb      	strh	r3, [r7, #6]
 8007c64:	e027      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007c66:	88fa      	ldrh	r2, [r7, #6]
 8007c68:	8a7b      	ldrh	r3, [r7, #18]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	88fa      	ldrh	r2, [r7, #6]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	80fb      	strh	r3, [r7, #6]
 8007c7a:	e01c      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	3b10      	subs	r3, #16
 8007c80:	80fb      	strh	r3, [r7, #6]
 8007c82:	e018      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007c84:	88fb      	ldrh	r3, [r7, #6]
 8007c86:	3b20      	subs	r3, #32
 8007c88:	80fb      	strh	r3, [r7, #6]
 8007c8a:	e014      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007c8c:	88fb      	ldrh	r3, [r7, #6]
 8007c8e:	3b30      	subs	r3, #48	; 0x30
 8007c90:	80fb      	strh	r3, [r7, #6]
 8007c92:	e010      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	3b1a      	subs	r3, #26
 8007c98:	80fb      	strh	r3, [r7, #6]
 8007c9a:	e00c      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007c9c:	88fb      	ldrh	r3, [r7, #6]
 8007c9e:	3308      	adds	r3, #8
 8007ca0:	80fb      	strh	r3, [r7, #6]
 8007ca2:	e008      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007ca4:	88fb      	ldrh	r3, [r7, #6]
 8007ca6:	3b50      	subs	r3, #80	; 0x50
 8007ca8:	80fb      	strh	r3, [r7, #6]
 8007caa:	e004      	b.n	8007cb6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007cac:	88fb      	ldrh	r3, [r7, #6]
 8007cae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007cb2:	80fb      	strh	r3, [r7, #6]
 8007cb4:	bf00      	nop
			}
			break;
 8007cb6:	e008      	b.n	8007cca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d195      	bne.n	8007bea <ff_wtoupper+0x1a>
 8007cbe:	8a3b      	ldrh	r3, [r7, #16]
 8007cc0:	005b      	lsls	r3, r3, #1
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007cc8:	e78f      	b.n	8007bea <ff_wtoupper+0x1a>
			break;
 8007cca:	bf00      	nop
	}

	return chr;
 8007ccc:	88fb      	ldrh	r3, [r7, #6]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	08009a10 	.word	0x08009a10
 8007ce0:	08009c04 	.word	0x08009c04

08007ce4 <__errno>:
 8007ce4:	4b01      	ldr	r3, [pc, #4]	; (8007cec <__errno+0x8>)
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	20000028 	.word	0x20000028

08007cf0 <__libc_init_array>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	4e0d      	ldr	r6, [pc, #52]	; (8007d28 <__libc_init_array+0x38>)
 8007cf4:	4c0d      	ldr	r4, [pc, #52]	; (8007d2c <__libc_init_array+0x3c>)
 8007cf6:	1ba4      	subs	r4, r4, r6
 8007cf8:	10a4      	asrs	r4, r4, #2
 8007cfa:	2500      	movs	r5, #0
 8007cfc:	42a5      	cmp	r5, r4
 8007cfe:	d109      	bne.n	8007d14 <__libc_init_array+0x24>
 8007d00:	4e0b      	ldr	r6, [pc, #44]	; (8007d30 <__libc_init_array+0x40>)
 8007d02:	4c0c      	ldr	r4, [pc, #48]	; (8007d34 <__libc_init_array+0x44>)
 8007d04:	f001 f882 	bl	8008e0c <_init>
 8007d08:	1ba4      	subs	r4, r4, r6
 8007d0a:	10a4      	asrs	r4, r4, #2
 8007d0c:	2500      	movs	r5, #0
 8007d0e:	42a5      	cmp	r5, r4
 8007d10:	d105      	bne.n	8007d1e <__libc_init_array+0x2e>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d18:	4798      	blx	r3
 8007d1a:	3501      	adds	r5, #1
 8007d1c:	e7ee      	b.n	8007cfc <__libc_init_array+0xc>
 8007d1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007d22:	4798      	blx	r3
 8007d24:	3501      	adds	r5, #1
 8007d26:	e7f2      	b.n	8007d0e <__libc_init_array+0x1e>
 8007d28:	08009d10 	.word	0x08009d10
 8007d2c:	08009d10 	.word	0x08009d10
 8007d30:	08009d10 	.word	0x08009d10
 8007d34:	08009d14 	.word	0x08009d14

08007d38 <memcpy>:
 8007d38:	b510      	push	{r4, lr}
 8007d3a:	1e43      	subs	r3, r0, #1
 8007d3c:	440a      	add	r2, r1
 8007d3e:	4291      	cmp	r1, r2
 8007d40:	d100      	bne.n	8007d44 <memcpy+0xc>
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d4c:	e7f7      	b.n	8007d3e <memcpy+0x6>

08007d4e <memset>:
 8007d4e:	4402      	add	r2, r0
 8007d50:	4603      	mov	r3, r0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d100      	bne.n	8007d58 <memset+0xa>
 8007d56:	4770      	bx	lr
 8007d58:	f803 1b01 	strb.w	r1, [r3], #1
 8007d5c:	e7f9      	b.n	8007d52 <memset+0x4>
	...

08007d60 <pow>:
 8007d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	ed2d 8b04 	vpush	{d8-d9}
 8007d68:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800803c <pow+0x2dc>
 8007d6c:	b08d      	sub	sp, #52	; 0x34
 8007d6e:	ec57 6b10 	vmov	r6, r7, d0
 8007d72:	ec55 4b11 	vmov	r4, r5, d1
 8007d76:	f000 f963 	bl	8008040 <__ieee754_pow>
 8007d7a:	f999 3000 	ldrsb.w	r3, [r9]
 8007d7e:	9300      	str	r3, [sp, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	eeb0 8a40 	vmov.f32	s16, s0
 8007d86:	eef0 8a60 	vmov.f32	s17, s1
 8007d8a:	46c8      	mov	r8, r9
 8007d8c:	d05f      	beq.n	8007e4e <pow+0xee>
 8007d8e:	4622      	mov	r2, r4
 8007d90:	462b      	mov	r3, r5
 8007d92:	4620      	mov	r0, r4
 8007d94:	4629      	mov	r1, r5
 8007d96:	f7f8 fe7d 	bl	8000a94 <__aeabi_dcmpun>
 8007d9a:	4683      	mov	fp, r0
 8007d9c:	2800      	cmp	r0, #0
 8007d9e:	d156      	bne.n	8007e4e <pow+0xee>
 8007da0:	4632      	mov	r2, r6
 8007da2:	463b      	mov	r3, r7
 8007da4:	4630      	mov	r0, r6
 8007da6:	4639      	mov	r1, r7
 8007da8:	f7f8 fe74 	bl	8000a94 <__aeabi_dcmpun>
 8007dac:	9001      	str	r0, [sp, #4]
 8007dae:	b1e8      	cbz	r0, 8007dec <pow+0x8c>
 8007db0:	2200      	movs	r2, #0
 8007db2:	2300      	movs	r3, #0
 8007db4:	4620      	mov	r0, r4
 8007db6:	4629      	mov	r1, r5
 8007db8:	f7f8 fe3a 	bl	8000a30 <__aeabi_dcmpeq>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	d046      	beq.n	8007e4e <pow+0xee>
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9302      	str	r3, [sp, #8]
 8007dc4:	4b96      	ldr	r3, [pc, #600]	; (8008020 <pow+0x2c0>)
 8007dc6:	9303      	str	r3, [sp, #12]
 8007dc8:	4b96      	ldr	r3, [pc, #600]	; (8008024 <pow+0x2c4>)
 8007dca:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007dce:	2200      	movs	r2, #0
 8007dd0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007dd4:	9b00      	ldr	r3, [sp, #0]
 8007dd6:	2b02      	cmp	r3, #2
 8007dd8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ddc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007de0:	d033      	beq.n	8007e4a <pow+0xea>
 8007de2:	a802      	add	r0, sp, #8
 8007de4:	f000 fefb 	bl	8008bde <matherr>
 8007de8:	bb48      	cbnz	r0, 8007e3e <pow+0xde>
 8007dea:	e05d      	b.n	8007ea8 <pow+0x148>
 8007dec:	f04f 0a00 	mov.w	sl, #0
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	4652      	mov	r2, sl
 8007df6:	465b      	mov	r3, fp
 8007df8:	4630      	mov	r0, r6
 8007dfa:	4639      	mov	r1, r7
 8007dfc:	f7f8 fe18 	bl	8000a30 <__aeabi_dcmpeq>
 8007e00:	ec4b ab19 	vmov	d9, sl, fp
 8007e04:	2800      	cmp	r0, #0
 8007e06:	d054      	beq.n	8007eb2 <pow+0x152>
 8007e08:	4652      	mov	r2, sl
 8007e0a:	465b      	mov	r3, fp
 8007e0c:	4620      	mov	r0, r4
 8007e0e:	4629      	mov	r1, r5
 8007e10:	f7f8 fe0e 	bl	8000a30 <__aeabi_dcmpeq>
 8007e14:	4680      	mov	r8, r0
 8007e16:	b318      	cbz	r0, 8007e60 <pow+0x100>
 8007e18:	2301      	movs	r3, #1
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	4b80      	ldr	r3, [pc, #512]	; (8008020 <pow+0x2c0>)
 8007e1e:	9303      	str	r3, [sp, #12]
 8007e20:	9b01      	ldr	r3, [sp, #4]
 8007e22:	930a      	str	r3, [sp, #40]	; 0x28
 8007e24:	9b00      	ldr	r3, [sp, #0]
 8007e26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0d5      	beq.n	8007de2 <pow+0x82>
 8007e36:	4b7b      	ldr	r3, [pc, #492]	; (8008024 <pow+0x2c4>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e40:	b11b      	cbz	r3, 8007e4a <pow+0xea>
 8007e42:	f7ff ff4f 	bl	8007ce4 <__errno>
 8007e46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e48:	6003      	str	r3, [r0, #0]
 8007e4a:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8007e52:	eef0 0a68 	vmov.f32	s1, s17
 8007e56:	b00d      	add	sp, #52	; 0x34
 8007e58:	ecbd 8b04 	vpop	{d8-d9}
 8007e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e60:	ec45 4b10 	vmov	d0, r4, r5
 8007e64:	f000 feb3 	bl	8008bce <finite>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	d0f0      	beq.n	8007e4e <pow+0xee>
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	465b      	mov	r3, fp
 8007e70:	4620      	mov	r0, r4
 8007e72:	4629      	mov	r1, r5
 8007e74:	f7f8 fde6 	bl	8000a44 <__aeabi_dcmplt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	d0e8      	beq.n	8007e4e <pow+0xee>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	9302      	str	r3, [sp, #8]
 8007e80:	4b67      	ldr	r3, [pc, #412]	; (8008020 <pow+0x2c0>)
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	f999 3000 	ldrsb.w	r3, [r9]
 8007e88:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007e8c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e90:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007e94:	b913      	cbnz	r3, 8007e9c <pow+0x13c>
 8007e96:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007e9a:	e7a2      	b.n	8007de2 <pow+0x82>
 8007e9c:	4962      	ldr	r1, [pc, #392]	; (8008028 <pow+0x2c8>)
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d19c      	bne.n	8007de2 <pow+0x82>
 8007ea8:	f7ff ff1c 	bl	8007ce4 <__errno>
 8007eac:	2321      	movs	r3, #33	; 0x21
 8007eae:	6003      	str	r3, [r0, #0]
 8007eb0:	e7c5      	b.n	8007e3e <pow+0xde>
 8007eb2:	eeb0 0a48 	vmov.f32	s0, s16
 8007eb6:	eef0 0a68 	vmov.f32	s1, s17
 8007eba:	f000 fe88 	bl	8008bce <finite>
 8007ebe:	9000      	str	r0, [sp, #0]
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	f040 8081 	bne.w	8007fc8 <pow+0x268>
 8007ec6:	ec47 6b10 	vmov	d0, r6, r7
 8007eca:	f000 fe80 	bl	8008bce <finite>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d07a      	beq.n	8007fc8 <pow+0x268>
 8007ed2:	ec45 4b10 	vmov	d0, r4, r5
 8007ed6:	f000 fe7a 	bl	8008bce <finite>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d074      	beq.n	8007fc8 <pow+0x268>
 8007ede:	ec53 2b18 	vmov	r2, r3, d8
 8007ee2:	ee18 0a10 	vmov	r0, s16
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	f7f8 fdd4 	bl	8000a94 <__aeabi_dcmpun>
 8007eec:	f999 9000 	ldrsb.w	r9, [r9]
 8007ef0:	4b4b      	ldr	r3, [pc, #300]	; (8008020 <pow+0x2c0>)
 8007ef2:	b1b0      	cbz	r0, 8007f22 <pow+0x1c2>
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007efa:	9b00      	ldr	r3, [sp, #0]
 8007efc:	930a      	str	r3, [sp, #40]	; 0x28
 8007efe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f02:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f06:	f1b9 0f00 	cmp.w	r9, #0
 8007f0a:	d0c4      	beq.n	8007e96 <pow+0x136>
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	465b      	mov	r3, fp
 8007f10:	4650      	mov	r0, sl
 8007f12:	4659      	mov	r1, fp
 8007f14:	f7f8 fc4e 	bl	80007b4 <__aeabi_ddiv>
 8007f18:	f1b9 0f02 	cmp.w	r9, #2
 8007f1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007f20:	e7c1      	b.n	8007ea6 <pow+0x146>
 8007f22:	2203      	movs	r2, #3
 8007f24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f28:	900a      	str	r0, [sp, #40]	; 0x28
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	2200      	movs	r2, #0
 8007f30:	4b3e      	ldr	r3, [pc, #248]	; (800802c <pow+0x2cc>)
 8007f32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007f36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f3a:	f7f8 fb11 	bl	8000560 <__aeabi_dmul>
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	f1b9 0f00 	cmp.w	r9, #0
 8007f46:	d124      	bne.n	8007f92 <pow+0x232>
 8007f48:	4b39      	ldr	r3, [pc, #228]	; (8008030 <pow+0x2d0>)
 8007f4a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f4e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f52:	4630      	mov	r0, r6
 8007f54:	4652      	mov	r2, sl
 8007f56:	465b      	mov	r3, fp
 8007f58:	4639      	mov	r1, r7
 8007f5a:	f7f8 fd73 	bl	8000a44 <__aeabi_dcmplt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d056      	beq.n	8008010 <pow+0x2b0>
 8007f62:	ec45 4b10 	vmov	d0, r4, r5
 8007f66:	f000 fe47 	bl	8008bf8 <rint>
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	ec51 0b10 	vmov	r0, r1, d0
 8007f72:	f7f8 fd5d 	bl	8000a30 <__aeabi_dcmpeq>
 8007f76:	b920      	cbnz	r0, 8007f82 <pow+0x222>
 8007f78:	4b2e      	ldr	r3, [pc, #184]	; (8008034 <pow+0x2d4>)
 8007f7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007f7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f82:	f998 3000 	ldrsb.w	r3, [r8]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d142      	bne.n	8008010 <pow+0x2b0>
 8007f8a:	f7ff feab 	bl	8007ce4 <__errno>
 8007f8e:	2322      	movs	r3, #34	; 0x22
 8007f90:	e78d      	b.n	8007eae <pow+0x14e>
 8007f92:	4b29      	ldr	r3, [pc, #164]	; (8008038 <pow+0x2d8>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	4652      	mov	r2, sl
 8007f9e:	465b      	mov	r3, fp
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 fd4f 	bl	8000a44 <__aeabi_dcmplt>
 8007fa6:	2800      	cmp	r0, #0
 8007fa8:	d0eb      	beq.n	8007f82 <pow+0x222>
 8007faa:	ec45 4b10 	vmov	d0, r4, r5
 8007fae:	f000 fe23 	bl	8008bf8 <rint>
 8007fb2:	4622      	mov	r2, r4
 8007fb4:	462b      	mov	r3, r5
 8007fb6:	ec51 0b10 	vmov	r0, r1, d0
 8007fba:	f7f8 fd39 	bl	8000a30 <__aeabi_dcmpeq>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d1df      	bne.n	8007f82 <pow+0x222>
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4b18      	ldr	r3, [pc, #96]	; (8008028 <pow+0x2c8>)
 8007fc6:	e7da      	b.n	8007f7e <pow+0x21e>
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2300      	movs	r3, #0
 8007fcc:	ec51 0b18 	vmov	r0, r1, d8
 8007fd0:	f7f8 fd2e 	bl	8000a30 <__aeabi_dcmpeq>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f43f af3a 	beq.w	8007e4e <pow+0xee>
 8007fda:	ec47 6b10 	vmov	d0, r6, r7
 8007fde:	f000 fdf6 	bl	8008bce <finite>
 8007fe2:	2800      	cmp	r0, #0
 8007fe4:	f43f af33 	beq.w	8007e4e <pow+0xee>
 8007fe8:	ec45 4b10 	vmov	d0, r4, r5
 8007fec:	f000 fdef 	bl	8008bce <finite>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f43f af2c 	beq.w	8007e4e <pow+0xee>
 8007ff6:	2304      	movs	r3, #4
 8007ff8:	9302      	str	r3, [sp, #8]
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <pow+0x2c0>)
 8007ffc:	9303      	str	r3, [sp, #12]
 8007ffe:	2300      	movs	r3, #0
 8008000:	930a      	str	r3, [sp, #40]	; 0x28
 8008002:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008006:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800800a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800800e:	e7b8      	b.n	8007f82 <pow+0x222>
 8008010:	a802      	add	r0, sp, #8
 8008012:	f000 fde4 	bl	8008bde <matherr>
 8008016:	2800      	cmp	r0, #0
 8008018:	f47f af11 	bne.w	8007e3e <pow+0xde>
 800801c:	e7b5      	b.n	8007f8a <pow+0x22a>
 800801e:	bf00      	nop
 8008020:	08009cc0 	.word	0x08009cc0
 8008024:	3ff00000 	.word	0x3ff00000
 8008028:	fff00000 	.word	0xfff00000
 800802c:	3fe00000 	.word	0x3fe00000
 8008030:	47efffff 	.word	0x47efffff
 8008034:	c7efffff 	.word	0xc7efffff
 8008038:	7ff00000 	.word	0x7ff00000
 800803c:	2000008c 	.word	0x2000008c

08008040 <__ieee754_pow>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	b091      	sub	sp, #68	; 0x44
 8008046:	ed8d 1b00 	vstr	d1, [sp]
 800804a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800804e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008052:	ea58 0302 	orrs.w	r3, r8, r2
 8008056:	ec57 6b10 	vmov	r6, r7, d0
 800805a:	f000 84be 	beq.w	80089da <__ieee754_pow+0x99a>
 800805e:	4b7a      	ldr	r3, [pc, #488]	; (8008248 <__ieee754_pow+0x208>)
 8008060:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008064:	429c      	cmp	r4, r3
 8008066:	463d      	mov	r5, r7
 8008068:	ee10 aa10 	vmov	sl, s0
 800806c:	dc09      	bgt.n	8008082 <__ieee754_pow+0x42>
 800806e:	d103      	bne.n	8008078 <__ieee754_pow+0x38>
 8008070:	b93e      	cbnz	r6, 8008082 <__ieee754_pow+0x42>
 8008072:	45a0      	cmp	r8, r4
 8008074:	dc0d      	bgt.n	8008092 <__ieee754_pow+0x52>
 8008076:	e001      	b.n	800807c <__ieee754_pow+0x3c>
 8008078:	4598      	cmp	r8, r3
 800807a:	dc02      	bgt.n	8008082 <__ieee754_pow+0x42>
 800807c:	4598      	cmp	r8, r3
 800807e:	d10e      	bne.n	800809e <__ieee754_pow+0x5e>
 8008080:	b16a      	cbz	r2, 800809e <__ieee754_pow+0x5e>
 8008082:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008086:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800808a:	ea54 030a 	orrs.w	r3, r4, sl
 800808e:	f000 84a4 	beq.w	80089da <__ieee754_pow+0x99a>
 8008092:	486e      	ldr	r0, [pc, #440]	; (800824c <__ieee754_pow+0x20c>)
 8008094:	b011      	add	sp, #68	; 0x44
 8008096:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	f000 bda5 	b.w	8008be8 <nan>
 800809e:	2d00      	cmp	r5, #0
 80080a0:	da53      	bge.n	800814a <__ieee754_pow+0x10a>
 80080a2:	4b6b      	ldr	r3, [pc, #428]	; (8008250 <__ieee754_pow+0x210>)
 80080a4:	4598      	cmp	r8, r3
 80080a6:	dc4d      	bgt.n	8008144 <__ieee754_pow+0x104>
 80080a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80080ac:	4598      	cmp	r8, r3
 80080ae:	dd4c      	ble.n	800814a <__ieee754_pow+0x10a>
 80080b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80080b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80080b8:	2b14      	cmp	r3, #20
 80080ba:	dd26      	ble.n	800810a <__ieee754_pow+0xca>
 80080bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80080c0:	fa22 f103 	lsr.w	r1, r2, r3
 80080c4:	fa01 f303 	lsl.w	r3, r1, r3
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d13e      	bne.n	800814a <__ieee754_pow+0x10a>
 80080cc:	f001 0101 	and.w	r1, r1, #1
 80080d0:	f1c1 0b02 	rsb	fp, r1, #2
 80080d4:	2a00      	cmp	r2, #0
 80080d6:	d15b      	bne.n	8008190 <__ieee754_pow+0x150>
 80080d8:	4b5b      	ldr	r3, [pc, #364]	; (8008248 <__ieee754_pow+0x208>)
 80080da:	4598      	cmp	r8, r3
 80080dc:	d124      	bne.n	8008128 <__ieee754_pow+0xe8>
 80080de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80080e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80080e6:	ea53 030a 	orrs.w	r3, r3, sl
 80080ea:	f000 8476 	beq.w	80089da <__ieee754_pow+0x99a>
 80080ee:	4b59      	ldr	r3, [pc, #356]	; (8008254 <__ieee754_pow+0x214>)
 80080f0:	429c      	cmp	r4, r3
 80080f2:	dd2d      	ble.n	8008150 <__ieee754_pow+0x110>
 80080f4:	f1b9 0f00 	cmp.w	r9, #0
 80080f8:	f280 8473 	bge.w	80089e2 <__ieee754_pow+0x9a2>
 80080fc:	2000      	movs	r0, #0
 80080fe:	2100      	movs	r1, #0
 8008100:	ec41 0b10 	vmov	d0, r0, r1
 8008104:	b011      	add	sp, #68	; 0x44
 8008106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800810a:	2a00      	cmp	r2, #0
 800810c:	d13e      	bne.n	800818c <__ieee754_pow+0x14c>
 800810e:	f1c3 0314 	rsb	r3, r3, #20
 8008112:	fa48 f103 	asr.w	r1, r8, r3
 8008116:	fa01 f303 	lsl.w	r3, r1, r3
 800811a:	4543      	cmp	r3, r8
 800811c:	f040 8469 	bne.w	80089f2 <__ieee754_pow+0x9b2>
 8008120:	f001 0101 	and.w	r1, r1, #1
 8008124:	f1c1 0b02 	rsb	fp, r1, #2
 8008128:	4b4b      	ldr	r3, [pc, #300]	; (8008258 <__ieee754_pow+0x218>)
 800812a:	4598      	cmp	r8, r3
 800812c:	d118      	bne.n	8008160 <__ieee754_pow+0x120>
 800812e:	f1b9 0f00 	cmp.w	r9, #0
 8008132:	f280 845a 	bge.w	80089ea <__ieee754_pow+0x9aa>
 8008136:	4948      	ldr	r1, [pc, #288]	; (8008258 <__ieee754_pow+0x218>)
 8008138:	4632      	mov	r2, r6
 800813a:	463b      	mov	r3, r7
 800813c:	2000      	movs	r0, #0
 800813e:	f7f8 fb39 	bl	80007b4 <__aeabi_ddiv>
 8008142:	e7dd      	b.n	8008100 <__ieee754_pow+0xc0>
 8008144:	f04f 0b02 	mov.w	fp, #2
 8008148:	e7c4      	b.n	80080d4 <__ieee754_pow+0x94>
 800814a:	f04f 0b00 	mov.w	fp, #0
 800814e:	e7c1      	b.n	80080d4 <__ieee754_pow+0x94>
 8008150:	f1b9 0f00 	cmp.w	r9, #0
 8008154:	dad2      	bge.n	80080fc <__ieee754_pow+0xbc>
 8008156:	e9dd 0300 	ldrd	r0, r3, [sp]
 800815a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800815e:	e7cf      	b.n	8008100 <__ieee754_pow+0xc0>
 8008160:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008164:	d106      	bne.n	8008174 <__ieee754_pow+0x134>
 8008166:	4632      	mov	r2, r6
 8008168:	463b      	mov	r3, r7
 800816a:	4610      	mov	r0, r2
 800816c:	4619      	mov	r1, r3
 800816e:	f7f8 f9f7 	bl	8000560 <__aeabi_dmul>
 8008172:	e7c5      	b.n	8008100 <__ieee754_pow+0xc0>
 8008174:	4b39      	ldr	r3, [pc, #228]	; (800825c <__ieee754_pow+0x21c>)
 8008176:	4599      	cmp	r9, r3
 8008178:	d10a      	bne.n	8008190 <__ieee754_pow+0x150>
 800817a:	2d00      	cmp	r5, #0
 800817c:	db08      	blt.n	8008190 <__ieee754_pow+0x150>
 800817e:	ec47 6b10 	vmov	d0, r6, r7
 8008182:	b011      	add	sp, #68	; 0x44
 8008184:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	f000 bc68 	b.w	8008a5c <__ieee754_sqrt>
 800818c:	f04f 0b00 	mov.w	fp, #0
 8008190:	ec47 6b10 	vmov	d0, r6, r7
 8008194:	f000 fd12 	bl	8008bbc <fabs>
 8008198:	ec51 0b10 	vmov	r0, r1, d0
 800819c:	f1ba 0f00 	cmp.w	sl, #0
 80081a0:	d127      	bne.n	80081f2 <__ieee754_pow+0x1b2>
 80081a2:	b124      	cbz	r4, 80081ae <__ieee754_pow+0x16e>
 80081a4:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <__ieee754_pow+0x218>)
 80081a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d121      	bne.n	80081f2 <__ieee754_pow+0x1b2>
 80081ae:	f1b9 0f00 	cmp.w	r9, #0
 80081b2:	da05      	bge.n	80081c0 <__ieee754_pow+0x180>
 80081b4:	4602      	mov	r2, r0
 80081b6:	460b      	mov	r3, r1
 80081b8:	2000      	movs	r0, #0
 80081ba:	4927      	ldr	r1, [pc, #156]	; (8008258 <__ieee754_pow+0x218>)
 80081bc:	f7f8 fafa 	bl	80007b4 <__aeabi_ddiv>
 80081c0:	2d00      	cmp	r5, #0
 80081c2:	da9d      	bge.n	8008100 <__ieee754_pow+0xc0>
 80081c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80081c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80081cc:	ea54 030b 	orrs.w	r3, r4, fp
 80081d0:	d108      	bne.n	80081e4 <__ieee754_pow+0x1a4>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4610      	mov	r0, r2
 80081d8:	4619      	mov	r1, r3
 80081da:	f7f8 f809 	bl	80001f0 <__aeabi_dsub>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	e7ac      	b.n	800813e <__ieee754_pow+0xfe>
 80081e4:	f1bb 0f01 	cmp.w	fp, #1
 80081e8:	d18a      	bne.n	8008100 <__ieee754_pow+0xc0>
 80081ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80081ee:	4619      	mov	r1, r3
 80081f0:	e786      	b.n	8008100 <__ieee754_pow+0xc0>
 80081f2:	0fed      	lsrs	r5, r5, #31
 80081f4:	1e6b      	subs	r3, r5, #1
 80081f6:	930d      	str	r3, [sp, #52]	; 0x34
 80081f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80081fc:	d102      	bne.n	8008204 <__ieee754_pow+0x1c4>
 80081fe:	4632      	mov	r2, r6
 8008200:	463b      	mov	r3, r7
 8008202:	e7e8      	b.n	80081d6 <__ieee754_pow+0x196>
 8008204:	4b16      	ldr	r3, [pc, #88]	; (8008260 <__ieee754_pow+0x220>)
 8008206:	4598      	cmp	r8, r3
 8008208:	f340 80fe 	ble.w	8008408 <__ieee754_pow+0x3c8>
 800820c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008210:	4598      	cmp	r8, r3
 8008212:	dd0a      	ble.n	800822a <__ieee754_pow+0x1ea>
 8008214:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <__ieee754_pow+0x214>)
 8008216:	429c      	cmp	r4, r3
 8008218:	dc0d      	bgt.n	8008236 <__ieee754_pow+0x1f6>
 800821a:	f1b9 0f00 	cmp.w	r9, #0
 800821e:	f6bf af6d 	bge.w	80080fc <__ieee754_pow+0xbc>
 8008222:	a307      	add	r3, pc, #28	; (adr r3, 8008240 <__ieee754_pow+0x200>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	e79f      	b.n	800816a <__ieee754_pow+0x12a>
 800822a:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <__ieee754_pow+0x224>)
 800822c:	429c      	cmp	r4, r3
 800822e:	ddf4      	ble.n	800821a <__ieee754_pow+0x1da>
 8008230:	4b09      	ldr	r3, [pc, #36]	; (8008258 <__ieee754_pow+0x218>)
 8008232:	429c      	cmp	r4, r3
 8008234:	dd18      	ble.n	8008268 <__ieee754_pow+0x228>
 8008236:	f1b9 0f00 	cmp.w	r9, #0
 800823a:	dcf2      	bgt.n	8008222 <__ieee754_pow+0x1e2>
 800823c:	e75e      	b.n	80080fc <__ieee754_pow+0xbc>
 800823e:	bf00      	nop
 8008240:	8800759c 	.word	0x8800759c
 8008244:	7e37e43c 	.word	0x7e37e43c
 8008248:	7ff00000 	.word	0x7ff00000
 800824c:	08009cc3 	.word	0x08009cc3
 8008250:	433fffff 	.word	0x433fffff
 8008254:	3fefffff 	.word	0x3fefffff
 8008258:	3ff00000 	.word	0x3ff00000
 800825c:	3fe00000 	.word	0x3fe00000
 8008260:	41e00000 	.word	0x41e00000
 8008264:	3feffffe 	.word	0x3feffffe
 8008268:	2200      	movs	r2, #0
 800826a:	4b63      	ldr	r3, [pc, #396]	; (80083f8 <__ieee754_pow+0x3b8>)
 800826c:	f7f7 ffc0 	bl	80001f0 <__aeabi_dsub>
 8008270:	a355      	add	r3, pc, #340	; (adr r3, 80083c8 <__ieee754_pow+0x388>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
 800827a:	f7f8 f971 	bl	8000560 <__aeabi_dmul>
 800827e:	a354      	add	r3, pc, #336	; (adr r3, 80083d0 <__ieee754_pow+0x390>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	4606      	mov	r6, r0
 8008286:	460f      	mov	r7, r1
 8008288:	4620      	mov	r0, r4
 800828a:	4629      	mov	r1, r5
 800828c:	f7f8 f968 	bl	8000560 <__aeabi_dmul>
 8008290:	2200      	movs	r2, #0
 8008292:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008296:	4b59      	ldr	r3, [pc, #356]	; (80083fc <__ieee754_pow+0x3bc>)
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	f7f8 f960 	bl	8000560 <__aeabi_dmul>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	a14c      	add	r1, pc, #304	; (adr r1, 80083d8 <__ieee754_pow+0x398>)
 80082a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082aa:	f7f7 ffa1 	bl	80001f0 <__aeabi_dsub>
 80082ae:	4622      	mov	r2, r4
 80082b0:	462b      	mov	r3, r5
 80082b2:	f7f8 f955 	bl	8000560 <__aeabi_dmul>
 80082b6:	4602      	mov	r2, r0
 80082b8:	460b      	mov	r3, r1
 80082ba:	2000      	movs	r0, #0
 80082bc:	4950      	ldr	r1, [pc, #320]	; (8008400 <__ieee754_pow+0x3c0>)
 80082be:	f7f7 ff97 	bl	80001f0 <__aeabi_dsub>
 80082c2:	4622      	mov	r2, r4
 80082c4:	462b      	mov	r3, r5
 80082c6:	4680      	mov	r8, r0
 80082c8:	4689      	mov	r9, r1
 80082ca:	4620      	mov	r0, r4
 80082cc:	4629      	mov	r1, r5
 80082ce:	f7f8 f947 	bl	8000560 <__aeabi_dmul>
 80082d2:	4602      	mov	r2, r0
 80082d4:	460b      	mov	r3, r1
 80082d6:	4640      	mov	r0, r8
 80082d8:	4649      	mov	r1, r9
 80082da:	f7f8 f941 	bl	8000560 <__aeabi_dmul>
 80082de:	a340      	add	r3, pc, #256	; (adr r3, 80083e0 <__ieee754_pow+0x3a0>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f8 f93c 	bl	8000560 <__aeabi_dmul>
 80082e8:	4602      	mov	r2, r0
 80082ea:	460b      	mov	r3, r1
 80082ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082f0:	f7f7 ff7e 	bl	80001f0 <__aeabi_dsub>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4604      	mov	r4, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	4630      	mov	r0, r6
 80082fe:	4639      	mov	r1, r7
 8008300:	f7f7 ff78 	bl	80001f4 <__adddf3>
 8008304:	2000      	movs	r0, #0
 8008306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800830a:	4632      	mov	r2, r6
 800830c:	463b      	mov	r3, r7
 800830e:	f7f7 ff6f 	bl	80001f0 <__aeabi_dsub>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	4620      	mov	r0, r4
 8008318:	4629      	mov	r1, r5
 800831a:	f7f7 ff69 	bl	80001f0 <__aeabi_dsub>
 800831e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008320:	f10b 33ff 	add.w	r3, fp, #4294967295
 8008324:	4313      	orrs	r3, r2
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	f040 81eb 	bne.w	8008704 <__ieee754_pow+0x6c4>
 800832e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80083e8 <__ieee754_pow+0x3a8>
 8008332:	e9dd 4500 	ldrd	r4, r5, [sp]
 8008336:	2400      	movs	r4, #0
 8008338:	4622      	mov	r2, r4
 800833a:	462b      	mov	r3, r5
 800833c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008344:	f7f7 ff54 	bl	80001f0 <__aeabi_dsub>
 8008348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834c:	f7f8 f908 	bl	8000560 <__aeabi_dmul>
 8008350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008354:	4680      	mov	r8, r0
 8008356:	4689      	mov	r9, r1
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 f900 	bl	8000560 <__aeabi_dmul>
 8008360:	4602      	mov	r2, r0
 8008362:	460b      	mov	r3, r1
 8008364:	4640      	mov	r0, r8
 8008366:	4649      	mov	r1, r9
 8008368:	f7f7 ff44 	bl	80001f4 <__adddf3>
 800836c:	4622      	mov	r2, r4
 800836e:	462b      	mov	r3, r5
 8008370:	4680      	mov	r8, r0
 8008372:	4689      	mov	r9, r1
 8008374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008378:	f7f8 f8f2 	bl	8000560 <__aeabi_dmul>
 800837c:	460b      	mov	r3, r1
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	4602      	mov	r2, r0
 8008384:	4649      	mov	r1, r9
 8008386:	4640      	mov	r0, r8
 8008388:	e9cd 4500 	strd	r4, r5, [sp]
 800838c:	f7f7 ff32 	bl	80001f4 <__adddf3>
 8008390:	4b1c      	ldr	r3, [pc, #112]	; (8008404 <__ieee754_pow+0x3c4>)
 8008392:	4299      	cmp	r1, r3
 8008394:	4606      	mov	r6, r0
 8008396:	460f      	mov	r7, r1
 8008398:	468b      	mov	fp, r1
 800839a:	f340 82f7 	ble.w	800898c <__ieee754_pow+0x94c>
 800839e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80083a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80083a6:	4303      	orrs	r3, r0
 80083a8:	f000 81ea 	beq.w	8008780 <__ieee754_pow+0x740>
 80083ac:	a310      	add	r3, pc, #64	; (adr r3, 80083f0 <__ieee754_pow+0x3b0>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083b6:	f7f8 f8d3 	bl	8000560 <__aeabi_dmul>
 80083ba:	a30d      	add	r3, pc, #52	; (adr r3, 80083f0 <__ieee754_pow+0x3b0>)
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	e6d5      	b.n	800816e <__ieee754_pow+0x12e>
 80083c2:	bf00      	nop
 80083c4:	f3af 8000 	nop.w
 80083c8:	60000000 	.word	0x60000000
 80083cc:	3ff71547 	.word	0x3ff71547
 80083d0:	f85ddf44 	.word	0xf85ddf44
 80083d4:	3e54ae0b 	.word	0x3e54ae0b
 80083d8:	55555555 	.word	0x55555555
 80083dc:	3fd55555 	.word	0x3fd55555
 80083e0:	652b82fe 	.word	0x652b82fe
 80083e4:	3ff71547 	.word	0x3ff71547
 80083e8:	00000000 	.word	0x00000000
 80083ec:	bff00000 	.word	0xbff00000
 80083f0:	8800759c 	.word	0x8800759c
 80083f4:	7e37e43c 	.word	0x7e37e43c
 80083f8:	3ff00000 	.word	0x3ff00000
 80083fc:	3fd00000 	.word	0x3fd00000
 8008400:	3fe00000 	.word	0x3fe00000
 8008404:	408fffff 	.word	0x408fffff
 8008408:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	da05      	bge.n	800841e <__ieee754_pow+0x3de>
 8008412:	4bd3      	ldr	r3, [pc, #844]	; (8008760 <__ieee754_pow+0x720>)
 8008414:	f7f8 f8a4 	bl	8000560 <__aeabi_dmul>
 8008418:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800841c:	460c      	mov	r4, r1
 800841e:	1523      	asrs	r3, r4, #20
 8008420:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008424:	4413      	add	r3, r2
 8008426:	9309      	str	r3, [sp, #36]	; 0x24
 8008428:	4bce      	ldr	r3, [pc, #824]	; (8008764 <__ieee754_pow+0x724>)
 800842a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800842e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008432:	429c      	cmp	r4, r3
 8008434:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008438:	dd08      	ble.n	800844c <__ieee754_pow+0x40c>
 800843a:	4bcb      	ldr	r3, [pc, #812]	; (8008768 <__ieee754_pow+0x728>)
 800843c:	429c      	cmp	r4, r3
 800843e:	f340 815e 	ble.w	80086fe <__ieee754_pow+0x6be>
 8008442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008444:	3301      	adds	r3, #1
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800844c:	f04f 0a00 	mov.w	sl, #0
 8008450:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008454:	930c      	str	r3, [sp, #48]	; 0x30
 8008456:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008458:	4bc4      	ldr	r3, [pc, #784]	; (800876c <__ieee754_pow+0x72c>)
 800845a:	4413      	add	r3, r2
 800845c:	ed93 7b00 	vldr	d7, [r3]
 8008460:	4629      	mov	r1, r5
 8008462:	ec53 2b17 	vmov	r2, r3, d7
 8008466:	ed8d 7b06 	vstr	d7, [sp, #24]
 800846a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800846e:	f7f7 febf 	bl	80001f0 <__aeabi_dsub>
 8008472:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008476:	4606      	mov	r6, r0
 8008478:	460f      	mov	r7, r1
 800847a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800847e:	f7f7 feb9 	bl	80001f4 <__adddf3>
 8008482:	4602      	mov	r2, r0
 8008484:	460b      	mov	r3, r1
 8008486:	2000      	movs	r0, #0
 8008488:	49b9      	ldr	r1, [pc, #740]	; (8008770 <__ieee754_pow+0x730>)
 800848a:	f7f8 f993 	bl	80007b4 <__aeabi_ddiv>
 800848e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4630      	mov	r0, r6
 8008498:	4639      	mov	r1, r7
 800849a:	f7f8 f861 	bl	8000560 <__aeabi_dmul>
 800849e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80084aa:	2300      	movs	r3, #0
 80084ac:	9302      	str	r3, [sp, #8]
 80084ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80084b2:	106d      	asrs	r5, r5, #1
 80084b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80084b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80084bc:	2200      	movs	r2, #0
 80084be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	4614      	mov	r4, r2
 80084c8:	461d      	mov	r5, r3
 80084ca:	f7f8 f849 	bl	8000560 <__aeabi_dmul>
 80084ce:	4602      	mov	r2, r0
 80084d0:	460b      	mov	r3, r1
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f7 fe8b 	bl	80001f0 <__aeabi_dsub>
 80084da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084de:	4606      	mov	r6, r0
 80084e0:	460f      	mov	r7, r1
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f7 fe83 	bl	80001f0 <__aeabi_dsub>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084f2:	f7f7 fe7d 	bl	80001f0 <__aeabi_dsub>
 80084f6:	4642      	mov	r2, r8
 80084f8:	464b      	mov	r3, r9
 80084fa:	f7f8 f831 	bl	8000560 <__aeabi_dmul>
 80084fe:	4602      	mov	r2, r0
 8008500:	460b      	mov	r3, r1
 8008502:	4630      	mov	r0, r6
 8008504:	4639      	mov	r1, r7
 8008506:	f7f7 fe73 	bl	80001f0 <__aeabi_dsub>
 800850a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800850e:	f7f8 f827 	bl	8000560 <__aeabi_dmul>
 8008512:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008516:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800851a:	4610      	mov	r0, r2
 800851c:	4619      	mov	r1, r3
 800851e:	f7f8 f81f 	bl	8000560 <__aeabi_dmul>
 8008522:	a37b      	add	r3, pc, #492	; (adr r3, 8008710 <__ieee754_pow+0x6d0>)
 8008524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008528:	4604      	mov	r4, r0
 800852a:	460d      	mov	r5, r1
 800852c:	f7f8 f818 	bl	8000560 <__aeabi_dmul>
 8008530:	a379      	add	r3, pc, #484	; (adr r3, 8008718 <__ieee754_pow+0x6d8>)
 8008532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008536:	f7f7 fe5d 	bl	80001f4 <__adddf3>
 800853a:	4622      	mov	r2, r4
 800853c:	462b      	mov	r3, r5
 800853e:	f7f8 f80f 	bl	8000560 <__aeabi_dmul>
 8008542:	a377      	add	r3, pc, #476	; (adr r3, 8008720 <__ieee754_pow+0x6e0>)
 8008544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008548:	f7f7 fe54 	bl	80001f4 <__adddf3>
 800854c:	4622      	mov	r2, r4
 800854e:	462b      	mov	r3, r5
 8008550:	f7f8 f806 	bl	8000560 <__aeabi_dmul>
 8008554:	a374      	add	r3, pc, #464	; (adr r3, 8008728 <__ieee754_pow+0x6e8>)
 8008556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855a:	f7f7 fe4b 	bl	80001f4 <__adddf3>
 800855e:	4622      	mov	r2, r4
 8008560:	462b      	mov	r3, r5
 8008562:	f7f7 fffd 	bl	8000560 <__aeabi_dmul>
 8008566:	a372      	add	r3, pc, #456	; (adr r3, 8008730 <__ieee754_pow+0x6f0>)
 8008568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856c:	f7f7 fe42 	bl	80001f4 <__adddf3>
 8008570:	4622      	mov	r2, r4
 8008572:	462b      	mov	r3, r5
 8008574:	f7f7 fff4 	bl	8000560 <__aeabi_dmul>
 8008578:	a36f      	add	r3, pc, #444	; (adr r3, 8008738 <__ieee754_pow+0x6f8>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	f7f7 fe39 	bl	80001f4 <__adddf3>
 8008582:	4622      	mov	r2, r4
 8008584:	4606      	mov	r6, r0
 8008586:	460f      	mov	r7, r1
 8008588:	462b      	mov	r3, r5
 800858a:	4620      	mov	r0, r4
 800858c:	4629      	mov	r1, r5
 800858e:	f7f7 ffe7 	bl	8000560 <__aeabi_dmul>
 8008592:	4602      	mov	r2, r0
 8008594:	460b      	mov	r3, r1
 8008596:	4630      	mov	r0, r6
 8008598:	4639      	mov	r1, r7
 800859a:	f7f7 ffe1 	bl	8000560 <__aeabi_dmul>
 800859e:	4642      	mov	r2, r8
 80085a0:	4604      	mov	r4, r0
 80085a2:	460d      	mov	r5, r1
 80085a4:	464b      	mov	r3, r9
 80085a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085aa:	f7f7 fe23 	bl	80001f4 <__adddf3>
 80085ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085b2:	f7f7 ffd5 	bl	8000560 <__aeabi_dmul>
 80085b6:	4622      	mov	r2, r4
 80085b8:	462b      	mov	r3, r5
 80085ba:	f7f7 fe1b 	bl	80001f4 <__adddf3>
 80085be:	4642      	mov	r2, r8
 80085c0:	4606      	mov	r6, r0
 80085c2:	460f      	mov	r7, r1
 80085c4:	464b      	mov	r3, r9
 80085c6:	4640      	mov	r0, r8
 80085c8:	4649      	mov	r1, r9
 80085ca:	f7f7 ffc9 	bl	8000560 <__aeabi_dmul>
 80085ce:	2200      	movs	r2, #0
 80085d0:	4b68      	ldr	r3, [pc, #416]	; (8008774 <__ieee754_pow+0x734>)
 80085d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80085d6:	f7f7 fe0d 	bl	80001f4 <__adddf3>
 80085da:	4632      	mov	r2, r6
 80085dc:	463b      	mov	r3, r7
 80085de:	f7f7 fe09 	bl	80001f4 <__adddf3>
 80085e2:	9802      	ldr	r0, [sp, #8]
 80085e4:	460d      	mov	r5, r1
 80085e6:	4604      	mov	r4, r0
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	4640      	mov	r0, r8
 80085ee:	4649      	mov	r1, r9
 80085f0:	f7f7 ffb6 	bl	8000560 <__aeabi_dmul>
 80085f4:	2200      	movs	r2, #0
 80085f6:	4680      	mov	r8, r0
 80085f8:	4689      	mov	r9, r1
 80085fa:	4b5e      	ldr	r3, [pc, #376]	; (8008774 <__ieee754_pow+0x734>)
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	f7f7 fdf6 	bl	80001f0 <__aeabi_dsub>
 8008604:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008608:	f7f7 fdf2 	bl	80001f0 <__aeabi_dsub>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4630      	mov	r0, r6
 8008612:	4639      	mov	r1, r7
 8008614:	f7f7 fdec 	bl	80001f0 <__aeabi_dsub>
 8008618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861c:	f7f7 ffa0 	bl	8000560 <__aeabi_dmul>
 8008620:	4622      	mov	r2, r4
 8008622:	4606      	mov	r6, r0
 8008624:	460f      	mov	r7, r1
 8008626:	462b      	mov	r3, r5
 8008628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800862c:	f7f7 ff98 	bl	8000560 <__aeabi_dmul>
 8008630:	4602      	mov	r2, r0
 8008632:	460b      	mov	r3, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 fddc 	bl	80001f4 <__adddf3>
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	4602      	mov	r2, r0
 8008642:	460b      	mov	r3, r1
 8008644:	4640      	mov	r0, r8
 8008646:	4649      	mov	r1, r9
 8008648:	f7f7 fdd4 	bl	80001f4 <__adddf3>
 800864c:	9802      	ldr	r0, [sp, #8]
 800864e:	a33c      	add	r3, pc, #240	; (adr r3, 8008740 <__ieee754_pow+0x700>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4604      	mov	r4, r0
 8008656:	460d      	mov	r5, r1
 8008658:	f7f7 ff82 	bl	8000560 <__aeabi_dmul>
 800865c:	4642      	mov	r2, r8
 800865e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008662:	464b      	mov	r3, r9
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 fdc2 	bl	80001f0 <__aeabi_dsub>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 fdbc 	bl	80001f0 <__aeabi_dsub>
 8008678:	a333      	add	r3, pc, #204	; (adr r3, 8008748 <__ieee754_pow+0x708>)
 800867a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800867e:	f7f7 ff6f 	bl	8000560 <__aeabi_dmul>
 8008682:	a333      	add	r3, pc, #204	; (adr r3, 8008750 <__ieee754_pow+0x710>)
 8008684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	4620      	mov	r0, r4
 800868e:	4629      	mov	r1, r5
 8008690:	f7f7 ff66 	bl	8000560 <__aeabi_dmul>
 8008694:	4602      	mov	r2, r0
 8008696:	460b      	mov	r3, r1
 8008698:	4630      	mov	r0, r6
 800869a:	4639      	mov	r1, r7
 800869c:	f7f7 fdaa 	bl	80001f4 <__adddf3>
 80086a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a2:	4b35      	ldr	r3, [pc, #212]	; (8008778 <__ieee754_pow+0x738>)
 80086a4:	4413      	add	r3, r2
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f7 fda3 	bl	80001f4 <__adddf3>
 80086ae:	4604      	mov	r4, r0
 80086b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086b2:	460d      	mov	r5, r1
 80086b4:	f7f7 feea 	bl	800048c <__aeabi_i2d>
 80086b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086ba:	4b30      	ldr	r3, [pc, #192]	; (800877c <__ieee754_pow+0x73c>)
 80086bc:	4413      	add	r3, r2
 80086be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c2:	4606      	mov	r6, r0
 80086c4:	460f      	mov	r7, r1
 80086c6:	4622      	mov	r2, r4
 80086c8:	462b      	mov	r3, r5
 80086ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086ce:	f7f7 fd91 	bl	80001f4 <__adddf3>
 80086d2:	4642      	mov	r2, r8
 80086d4:	464b      	mov	r3, r9
 80086d6:	f7f7 fd8d 	bl	80001f4 <__adddf3>
 80086da:	4632      	mov	r2, r6
 80086dc:	463b      	mov	r3, r7
 80086de:	f7f7 fd89 	bl	80001f4 <__adddf3>
 80086e2:	9802      	ldr	r0, [sp, #8]
 80086e4:	4632      	mov	r2, r6
 80086e6:	463b      	mov	r3, r7
 80086e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ec:	f7f7 fd80 	bl	80001f0 <__aeabi_dsub>
 80086f0:	4642      	mov	r2, r8
 80086f2:	464b      	mov	r3, r9
 80086f4:	f7f7 fd7c 	bl	80001f0 <__aeabi_dsub>
 80086f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086fc:	e607      	b.n	800830e <__ieee754_pow+0x2ce>
 80086fe:	f04f 0a01 	mov.w	sl, #1
 8008702:	e6a5      	b.n	8008450 <__ieee754_pow+0x410>
 8008704:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008758 <__ieee754_pow+0x718>
 8008708:	e613      	b.n	8008332 <__ieee754_pow+0x2f2>
 800870a:	bf00      	nop
 800870c:	f3af 8000 	nop.w
 8008710:	4a454eef 	.word	0x4a454eef
 8008714:	3fca7e28 	.word	0x3fca7e28
 8008718:	93c9db65 	.word	0x93c9db65
 800871c:	3fcd864a 	.word	0x3fcd864a
 8008720:	a91d4101 	.word	0xa91d4101
 8008724:	3fd17460 	.word	0x3fd17460
 8008728:	518f264d 	.word	0x518f264d
 800872c:	3fd55555 	.word	0x3fd55555
 8008730:	db6fabff 	.word	0xdb6fabff
 8008734:	3fdb6db6 	.word	0x3fdb6db6
 8008738:	33333303 	.word	0x33333303
 800873c:	3fe33333 	.word	0x3fe33333
 8008740:	e0000000 	.word	0xe0000000
 8008744:	3feec709 	.word	0x3feec709
 8008748:	dc3a03fd 	.word	0xdc3a03fd
 800874c:	3feec709 	.word	0x3feec709
 8008750:	145b01f5 	.word	0x145b01f5
 8008754:	be3e2fe0 	.word	0xbe3e2fe0
 8008758:	00000000 	.word	0x00000000
 800875c:	3ff00000 	.word	0x3ff00000
 8008760:	43400000 	.word	0x43400000
 8008764:	0003988e 	.word	0x0003988e
 8008768:	000bb679 	.word	0x000bb679
 800876c:	08009cc8 	.word	0x08009cc8
 8008770:	3ff00000 	.word	0x3ff00000
 8008774:	40080000 	.word	0x40080000
 8008778:	08009ce8 	.word	0x08009ce8
 800877c:	08009cd8 	.word	0x08009cd8
 8008780:	a3b4      	add	r3, pc, #720	; (adr r3, 8008a54 <__ieee754_pow+0xa14>)
 8008782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008786:	4640      	mov	r0, r8
 8008788:	4649      	mov	r1, r9
 800878a:	f7f7 fd33 	bl	80001f4 <__adddf3>
 800878e:	4622      	mov	r2, r4
 8008790:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008794:	462b      	mov	r3, r5
 8008796:	4630      	mov	r0, r6
 8008798:	4639      	mov	r1, r7
 800879a:	f7f7 fd29 	bl	80001f0 <__aeabi_dsub>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a6:	f7f8 f96b 	bl	8000a80 <__aeabi_dcmpgt>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	f47f adfe 	bne.w	80083ac <__ieee754_pow+0x36c>
 80087b0:	4aa3      	ldr	r2, [pc, #652]	; (8008a40 <__ieee754_pow+0xa00>)
 80087b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087b6:	4293      	cmp	r3, r2
 80087b8:	f340 810a 	ble.w	80089d0 <__ieee754_pow+0x990>
 80087bc:	151b      	asrs	r3, r3, #20
 80087be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80087c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80087c6:	fa4a f303 	asr.w	r3, sl, r3
 80087ca:	445b      	add	r3, fp
 80087cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80087d0:	4e9c      	ldr	r6, [pc, #624]	; (8008a44 <__ieee754_pow+0xa04>)
 80087d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80087d6:	4116      	asrs	r6, r2
 80087d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80087dc:	2000      	movs	r0, #0
 80087de:	ea23 0106 	bic.w	r1, r3, r6
 80087e2:	f1c2 0214 	rsb	r2, r2, #20
 80087e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80087ea:	fa4a fa02 	asr.w	sl, sl, r2
 80087ee:	f1bb 0f00 	cmp.w	fp, #0
 80087f2:	4602      	mov	r2, r0
 80087f4:	460b      	mov	r3, r1
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	bfb8      	it	lt
 80087fc:	f1ca 0a00 	rsblt	sl, sl, #0
 8008800:	f7f7 fcf6 	bl	80001f0 <__aeabi_dsub>
 8008804:	e9cd 0100 	strd	r0, r1, [sp]
 8008808:	4642      	mov	r2, r8
 800880a:	464b      	mov	r3, r9
 800880c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008810:	f7f7 fcf0 	bl	80001f4 <__adddf3>
 8008814:	2000      	movs	r0, #0
 8008816:	a378      	add	r3, pc, #480	; (adr r3, 80089f8 <__ieee754_pow+0x9b8>)
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	4604      	mov	r4, r0
 800881e:	460d      	mov	r5, r1
 8008820:	f7f7 fe9e 	bl	8000560 <__aeabi_dmul>
 8008824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008828:	4606      	mov	r6, r0
 800882a:	460f      	mov	r7, r1
 800882c:	4620      	mov	r0, r4
 800882e:	4629      	mov	r1, r5
 8008830:	f7f7 fcde 	bl	80001f0 <__aeabi_dsub>
 8008834:	4602      	mov	r2, r0
 8008836:	460b      	mov	r3, r1
 8008838:	4640      	mov	r0, r8
 800883a:	4649      	mov	r1, r9
 800883c:	f7f7 fcd8 	bl	80001f0 <__aeabi_dsub>
 8008840:	a36f      	add	r3, pc, #444	; (adr r3, 8008a00 <__ieee754_pow+0x9c0>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fe8b 	bl	8000560 <__aeabi_dmul>
 800884a:	a36f      	add	r3, pc, #444	; (adr r3, 8008a08 <__ieee754_pow+0x9c8>)
 800884c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008850:	4680      	mov	r8, r0
 8008852:	4689      	mov	r9, r1
 8008854:	4620      	mov	r0, r4
 8008856:	4629      	mov	r1, r5
 8008858:	f7f7 fe82 	bl	8000560 <__aeabi_dmul>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fcc6 	bl	80001f4 <__adddf3>
 8008868:	4604      	mov	r4, r0
 800886a:	460d      	mov	r5, r1
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4630      	mov	r0, r6
 8008872:	4639      	mov	r1, r7
 8008874:	f7f7 fcbe 	bl	80001f4 <__adddf3>
 8008878:	4632      	mov	r2, r6
 800887a:	463b      	mov	r3, r7
 800887c:	4680      	mov	r8, r0
 800887e:	4689      	mov	r9, r1
 8008880:	f7f7 fcb6 	bl	80001f0 <__aeabi_dsub>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4620      	mov	r0, r4
 800888a:	4629      	mov	r1, r5
 800888c:	f7f7 fcb0 	bl	80001f0 <__aeabi_dsub>
 8008890:	4642      	mov	r2, r8
 8008892:	4606      	mov	r6, r0
 8008894:	460f      	mov	r7, r1
 8008896:	464b      	mov	r3, r9
 8008898:	4640      	mov	r0, r8
 800889a:	4649      	mov	r1, r9
 800889c:	f7f7 fe60 	bl	8000560 <__aeabi_dmul>
 80088a0:	a35b      	add	r3, pc, #364	; (adr r3, 8008a10 <__ieee754_pow+0x9d0>)
 80088a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a6:	4604      	mov	r4, r0
 80088a8:	460d      	mov	r5, r1
 80088aa:	f7f7 fe59 	bl	8000560 <__aeabi_dmul>
 80088ae:	a35a      	add	r3, pc, #360	; (adr r3, 8008a18 <__ieee754_pow+0x9d8>)
 80088b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b4:	f7f7 fc9c 	bl	80001f0 <__aeabi_dsub>
 80088b8:	4622      	mov	r2, r4
 80088ba:	462b      	mov	r3, r5
 80088bc:	f7f7 fe50 	bl	8000560 <__aeabi_dmul>
 80088c0:	a357      	add	r3, pc, #348	; (adr r3, 8008a20 <__ieee754_pow+0x9e0>)
 80088c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c6:	f7f7 fc95 	bl	80001f4 <__adddf3>
 80088ca:	4622      	mov	r2, r4
 80088cc:	462b      	mov	r3, r5
 80088ce:	f7f7 fe47 	bl	8000560 <__aeabi_dmul>
 80088d2:	a355      	add	r3, pc, #340	; (adr r3, 8008a28 <__ieee754_pow+0x9e8>)
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	f7f7 fc8a 	bl	80001f0 <__aeabi_dsub>
 80088dc:	4622      	mov	r2, r4
 80088de:	462b      	mov	r3, r5
 80088e0:	f7f7 fe3e 	bl	8000560 <__aeabi_dmul>
 80088e4:	a352      	add	r3, pc, #328	; (adr r3, 8008a30 <__ieee754_pow+0x9f0>)
 80088e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ea:	f7f7 fc83 	bl	80001f4 <__adddf3>
 80088ee:	4622      	mov	r2, r4
 80088f0:	462b      	mov	r3, r5
 80088f2:	f7f7 fe35 	bl	8000560 <__aeabi_dmul>
 80088f6:	4602      	mov	r2, r0
 80088f8:	460b      	mov	r3, r1
 80088fa:	4640      	mov	r0, r8
 80088fc:	4649      	mov	r1, r9
 80088fe:	f7f7 fc77 	bl	80001f0 <__aeabi_dsub>
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4640      	mov	r0, r8
 800890c:	4649      	mov	r1, r9
 800890e:	f7f7 fe27 	bl	8000560 <__aeabi_dmul>
 8008912:	2200      	movs	r2, #0
 8008914:	e9cd 0100 	strd	r0, r1, [sp]
 8008918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800891c:	4620      	mov	r0, r4
 800891e:	4629      	mov	r1, r5
 8008920:	f7f7 fc66 	bl	80001f0 <__aeabi_dsub>
 8008924:	4602      	mov	r2, r0
 8008926:	460b      	mov	r3, r1
 8008928:	e9dd 0100 	ldrd	r0, r1, [sp]
 800892c:	f7f7 ff42 	bl	80007b4 <__aeabi_ddiv>
 8008930:	4632      	mov	r2, r6
 8008932:	4604      	mov	r4, r0
 8008934:	460d      	mov	r5, r1
 8008936:	463b      	mov	r3, r7
 8008938:	4640      	mov	r0, r8
 800893a:	4649      	mov	r1, r9
 800893c:	f7f7 fe10 	bl	8000560 <__aeabi_dmul>
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	f7f7 fc56 	bl	80001f4 <__adddf3>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4620      	mov	r0, r4
 800894e:	4629      	mov	r1, r5
 8008950:	f7f7 fc4e 	bl	80001f0 <__aeabi_dsub>
 8008954:	4642      	mov	r2, r8
 8008956:	464b      	mov	r3, r9
 8008958:	f7f7 fc4a 	bl	80001f0 <__aeabi_dsub>
 800895c:	4602      	mov	r2, r0
 800895e:	460b      	mov	r3, r1
 8008960:	2000      	movs	r0, #0
 8008962:	4939      	ldr	r1, [pc, #228]	; (8008a48 <__ieee754_pow+0xa08>)
 8008964:	f7f7 fc44 	bl	80001f0 <__aeabi_dsub>
 8008968:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800896c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	da2f      	bge.n	80089d6 <__ieee754_pow+0x996>
 8008976:	4650      	mov	r0, sl
 8008978:	ec43 2b10 	vmov	d0, r2, r3
 800897c:	f000 f9c0 	bl	8008d00 <scalbn>
 8008980:	ec51 0b10 	vmov	r0, r1, d0
 8008984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008988:	f7ff bbf1 	b.w	800816e <__ieee754_pow+0x12e>
 800898c:	4b2f      	ldr	r3, [pc, #188]	; (8008a4c <__ieee754_pow+0xa0c>)
 800898e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008992:	429e      	cmp	r6, r3
 8008994:	f77f af0c 	ble.w	80087b0 <__ieee754_pow+0x770>
 8008998:	4b2d      	ldr	r3, [pc, #180]	; (8008a50 <__ieee754_pow+0xa10>)
 800899a:	440b      	add	r3, r1
 800899c:	4303      	orrs	r3, r0
 800899e:	d00b      	beq.n	80089b8 <__ieee754_pow+0x978>
 80089a0:	a325      	add	r3, pc, #148	; (adr r3, 8008a38 <__ieee754_pow+0x9f8>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089aa:	f7f7 fdd9 	bl	8000560 <__aeabi_dmul>
 80089ae:	a322      	add	r3, pc, #136	; (adr r3, 8008a38 <__ieee754_pow+0x9f8>)
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7ff bbdb 	b.w	800816e <__ieee754_pow+0x12e>
 80089b8:	4622      	mov	r2, r4
 80089ba:	462b      	mov	r3, r5
 80089bc:	f7f7 fc18 	bl	80001f0 <__aeabi_dsub>
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f7f8 f852 	bl	8000a6c <__aeabi_dcmpge>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	f43f aef1 	beq.w	80087b0 <__ieee754_pow+0x770>
 80089ce:	e7e7      	b.n	80089a0 <__ieee754_pow+0x960>
 80089d0:	f04f 0a00 	mov.w	sl, #0
 80089d4:	e718      	b.n	8008808 <__ieee754_pow+0x7c8>
 80089d6:	4621      	mov	r1, r4
 80089d8:	e7d4      	b.n	8008984 <__ieee754_pow+0x944>
 80089da:	2000      	movs	r0, #0
 80089dc:	491a      	ldr	r1, [pc, #104]	; (8008a48 <__ieee754_pow+0xa08>)
 80089de:	f7ff bb8f 	b.w	8008100 <__ieee754_pow+0xc0>
 80089e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089e6:	f7ff bb8b 	b.w	8008100 <__ieee754_pow+0xc0>
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7ff bb87 	b.w	8008100 <__ieee754_pow+0xc0>
 80089f2:	4693      	mov	fp, r2
 80089f4:	f7ff bb98 	b.w	8008128 <__ieee754_pow+0xe8>
 80089f8:	00000000 	.word	0x00000000
 80089fc:	3fe62e43 	.word	0x3fe62e43
 8008a00:	fefa39ef 	.word	0xfefa39ef
 8008a04:	3fe62e42 	.word	0x3fe62e42
 8008a08:	0ca86c39 	.word	0x0ca86c39
 8008a0c:	be205c61 	.word	0xbe205c61
 8008a10:	72bea4d0 	.word	0x72bea4d0
 8008a14:	3e663769 	.word	0x3e663769
 8008a18:	c5d26bf1 	.word	0xc5d26bf1
 8008a1c:	3ebbbd41 	.word	0x3ebbbd41
 8008a20:	af25de2c 	.word	0xaf25de2c
 8008a24:	3f11566a 	.word	0x3f11566a
 8008a28:	16bebd93 	.word	0x16bebd93
 8008a2c:	3f66c16c 	.word	0x3f66c16c
 8008a30:	5555553e 	.word	0x5555553e
 8008a34:	3fc55555 	.word	0x3fc55555
 8008a38:	c2f8f359 	.word	0xc2f8f359
 8008a3c:	01a56e1f 	.word	0x01a56e1f
 8008a40:	3fe00000 	.word	0x3fe00000
 8008a44:	000fffff 	.word	0x000fffff
 8008a48:	3ff00000 	.word	0x3ff00000
 8008a4c:	4090cbff 	.word	0x4090cbff
 8008a50:	3f6f3400 	.word	0x3f6f3400
 8008a54:	652b82fe 	.word	0x652b82fe
 8008a58:	3c971547 	.word	0x3c971547

08008a5c <__ieee754_sqrt>:
 8008a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a60:	4955      	ldr	r1, [pc, #340]	; (8008bb8 <__ieee754_sqrt+0x15c>)
 8008a62:	ec55 4b10 	vmov	r4, r5, d0
 8008a66:	43a9      	bics	r1, r5
 8008a68:	462b      	mov	r3, r5
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	d112      	bne.n	8008a94 <__ieee754_sqrt+0x38>
 8008a6e:	ee10 2a10 	vmov	r2, s0
 8008a72:	ee10 0a10 	vmov	r0, s0
 8008a76:	4629      	mov	r1, r5
 8008a78:	f7f7 fd72 	bl	8000560 <__aeabi_dmul>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4620      	mov	r0, r4
 8008a82:	4629      	mov	r1, r5
 8008a84:	f7f7 fbb6 	bl	80001f4 <__adddf3>
 8008a88:	4604      	mov	r4, r0
 8008a8a:	460d      	mov	r5, r1
 8008a8c:	ec45 4b10 	vmov	d0, r4, r5
 8008a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a94:	2d00      	cmp	r5, #0
 8008a96:	ee10 0a10 	vmov	r0, s0
 8008a9a:	4621      	mov	r1, r4
 8008a9c:	dc0f      	bgt.n	8008abe <__ieee754_sqrt+0x62>
 8008a9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008aa2:	4330      	orrs	r0, r6
 8008aa4:	d0f2      	beq.n	8008a8c <__ieee754_sqrt+0x30>
 8008aa6:	b155      	cbz	r5, 8008abe <__ieee754_sqrt+0x62>
 8008aa8:	ee10 2a10 	vmov	r2, s0
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fb9e 	bl	80001f0 <__aeabi_dsub>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	f7f7 fe7c 	bl	80007b4 <__aeabi_ddiv>
 8008abc:	e7e4      	b.n	8008a88 <__ieee754_sqrt+0x2c>
 8008abe:	151b      	asrs	r3, r3, #20
 8008ac0:	d073      	beq.n	8008baa <__ieee754_sqrt+0x14e>
 8008ac2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008ac6:	07dd      	lsls	r5, r3, #31
 8008ac8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008acc:	bf48      	it	mi
 8008ace:	0fc8      	lsrmi	r0, r1, #31
 8008ad0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008ad4:	bf44      	itt	mi
 8008ad6:	0049      	lslmi	r1, r1, #1
 8008ad8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008adc:	2500      	movs	r5, #0
 8008ade:	1058      	asrs	r0, r3, #1
 8008ae0:	0fcb      	lsrs	r3, r1, #31
 8008ae2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008ae6:	0049      	lsls	r1, r1, #1
 8008ae8:	2316      	movs	r3, #22
 8008aea:	462c      	mov	r4, r5
 8008aec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008af0:	19a7      	adds	r7, r4, r6
 8008af2:	4297      	cmp	r7, r2
 8008af4:	bfde      	ittt	le
 8008af6:	19bc      	addle	r4, r7, r6
 8008af8:	1bd2      	suble	r2, r2, r7
 8008afa:	19ad      	addle	r5, r5, r6
 8008afc:	0fcf      	lsrs	r7, r1, #31
 8008afe:	3b01      	subs	r3, #1
 8008b00:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008b04:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b08:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b0c:	d1f0      	bne.n	8008af0 <__ieee754_sqrt+0x94>
 8008b0e:	f04f 0c20 	mov.w	ip, #32
 8008b12:	469e      	mov	lr, r3
 8008b14:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b18:	42a2      	cmp	r2, r4
 8008b1a:	eb06 070e 	add.w	r7, r6, lr
 8008b1e:	dc02      	bgt.n	8008b26 <__ieee754_sqrt+0xca>
 8008b20:	d112      	bne.n	8008b48 <__ieee754_sqrt+0xec>
 8008b22:	428f      	cmp	r7, r1
 8008b24:	d810      	bhi.n	8008b48 <__ieee754_sqrt+0xec>
 8008b26:	2f00      	cmp	r7, #0
 8008b28:	eb07 0e06 	add.w	lr, r7, r6
 8008b2c:	da42      	bge.n	8008bb4 <__ieee754_sqrt+0x158>
 8008b2e:	f1be 0f00 	cmp.w	lr, #0
 8008b32:	db3f      	blt.n	8008bb4 <__ieee754_sqrt+0x158>
 8008b34:	f104 0801 	add.w	r8, r4, #1
 8008b38:	1b12      	subs	r2, r2, r4
 8008b3a:	428f      	cmp	r7, r1
 8008b3c:	bf88      	it	hi
 8008b3e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008b42:	1bc9      	subs	r1, r1, r7
 8008b44:	4433      	add	r3, r6
 8008b46:	4644      	mov	r4, r8
 8008b48:	0052      	lsls	r2, r2, #1
 8008b4a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008b4e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008b52:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b56:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008b5a:	d1dd      	bne.n	8008b18 <__ieee754_sqrt+0xbc>
 8008b5c:	430a      	orrs	r2, r1
 8008b5e:	d006      	beq.n	8008b6e <__ieee754_sqrt+0x112>
 8008b60:	1c5c      	adds	r4, r3, #1
 8008b62:	bf13      	iteet	ne
 8008b64:	3301      	addne	r3, #1
 8008b66:	3501      	addeq	r5, #1
 8008b68:	4663      	moveq	r3, ip
 8008b6a:	f023 0301 	bicne.w	r3, r3, #1
 8008b6e:	106a      	asrs	r2, r5, #1
 8008b70:	085b      	lsrs	r3, r3, #1
 8008b72:	07e9      	lsls	r1, r5, #31
 8008b74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008b78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008b7c:	bf48      	it	mi
 8008b7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b82:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008b86:	461c      	mov	r4, r3
 8008b88:	e780      	b.n	8008a8c <__ieee754_sqrt+0x30>
 8008b8a:	0aca      	lsrs	r2, r1, #11
 8008b8c:	3815      	subs	r0, #21
 8008b8e:	0549      	lsls	r1, r1, #21
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d0fa      	beq.n	8008b8a <__ieee754_sqrt+0x12e>
 8008b94:	02d6      	lsls	r6, r2, #11
 8008b96:	d50a      	bpl.n	8008bae <__ieee754_sqrt+0x152>
 8008b98:	f1c3 0420 	rsb	r4, r3, #32
 8008b9c:	fa21 f404 	lsr.w	r4, r1, r4
 8008ba0:	1e5d      	subs	r5, r3, #1
 8008ba2:	4099      	lsls	r1, r3
 8008ba4:	4322      	orrs	r2, r4
 8008ba6:	1b43      	subs	r3, r0, r5
 8008ba8:	e78b      	b.n	8008ac2 <__ieee754_sqrt+0x66>
 8008baa:	4618      	mov	r0, r3
 8008bac:	e7f0      	b.n	8008b90 <__ieee754_sqrt+0x134>
 8008bae:	0052      	lsls	r2, r2, #1
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	e7ef      	b.n	8008b94 <__ieee754_sqrt+0x138>
 8008bb4:	46a0      	mov	r8, r4
 8008bb6:	e7bf      	b.n	8008b38 <__ieee754_sqrt+0xdc>
 8008bb8:	7ff00000 	.word	0x7ff00000

08008bbc <fabs>:
 8008bbc:	ec51 0b10 	vmov	r0, r1, d0
 8008bc0:	ee10 2a10 	vmov	r2, s0
 8008bc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008bc8:	ec43 2b10 	vmov	d0, r2, r3
 8008bcc:	4770      	bx	lr

08008bce <finite>:
 8008bce:	ee10 3a90 	vmov	r3, s1
 8008bd2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008bd6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008bda:	0fc0      	lsrs	r0, r0, #31
 8008bdc:	4770      	bx	lr

08008bde <matherr>:
 8008bde:	2000      	movs	r0, #0
 8008be0:	4770      	bx	lr
 8008be2:	0000      	movs	r0, r0
 8008be4:	0000      	movs	r0, r0
	...

08008be8 <nan>:
 8008be8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008bf0 <nan+0x8>
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	00000000 	.word	0x00000000
 8008bf4:	7ff80000 	.word	0x7ff80000

08008bf8 <rint>:
 8008bf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bfa:	ec51 0b10 	vmov	r0, r1, d0
 8008bfe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008c06:	2e13      	cmp	r6, #19
 8008c08:	460b      	mov	r3, r1
 8008c0a:	ee10 4a10 	vmov	r4, s0
 8008c0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008c12:	dc56      	bgt.n	8008cc2 <rint+0xca>
 8008c14:	2e00      	cmp	r6, #0
 8008c16:	da2b      	bge.n	8008c70 <rint+0x78>
 8008c18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008c1c:	4302      	orrs	r2, r0
 8008c1e:	d023      	beq.n	8008c68 <rint+0x70>
 8008c20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008c24:	4302      	orrs	r2, r0
 8008c26:	4254      	negs	r4, r2
 8008c28:	4314      	orrs	r4, r2
 8008c2a:	0c4b      	lsrs	r3, r1, #17
 8008c2c:	0b24      	lsrs	r4, r4, #12
 8008c2e:	045b      	lsls	r3, r3, #17
 8008c30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008c34:	ea44 0103 	orr.w	r1, r4, r3
 8008c38:	460b      	mov	r3, r1
 8008c3a:	492f      	ldr	r1, [pc, #188]	; (8008cf8 <rint+0x100>)
 8008c3c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008c40:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008c44:	4602      	mov	r2, r0
 8008c46:	4639      	mov	r1, r7
 8008c48:	4630      	mov	r0, r6
 8008c4a:	f7f7 fad3 	bl	80001f4 <__adddf3>
 8008c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c52:	463b      	mov	r3, r7
 8008c54:	4632      	mov	r2, r6
 8008c56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c5a:	f7f7 fac9 	bl	80001f0 <__aeabi_dsub>
 8008c5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008c66:	4639      	mov	r1, r7
 8008c68:	ec41 0b10 	vmov	d0, r0, r1
 8008c6c:	b003      	add	sp, #12
 8008c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c70:	4a22      	ldr	r2, [pc, #136]	; (8008cfc <rint+0x104>)
 8008c72:	4132      	asrs	r2, r6
 8008c74:	ea01 0702 	and.w	r7, r1, r2
 8008c78:	4307      	orrs	r7, r0
 8008c7a:	d0f5      	beq.n	8008c68 <rint+0x70>
 8008c7c:	0852      	lsrs	r2, r2, #1
 8008c7e:	4011      	ands	r1, r2
 8008c80:	430c      	orrs	r4, r1
 8008c82:	d00b      	beq.n	8008c9c <rint+0xa4>
 8008c84:	ea23 0202 	bic.w	r2, r3, r2
 8008c88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008c8c:	2e13      	cmp	r6, #19
 8008c8e:	fa43 f306 	asr.w	r3, r3, r6
 8008c92:	bf0c      	ite	eq
 8008c94:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008c98:	2400      	movne	r4, #0
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	4916      	ldr	r1, [pc, #88]	; (8008cf8 <rint+0x100>)
 8008c9e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008ca2:	4622      	mov	r2, r4
 8008ca4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 faa2 	bl	80001f4 <__adddf3>
 8008cb0:	e9cd 0100 	strd	r0, r1, [sp]
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	462b      	mov	r3, r5
 8008cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cbc:	f7f7 fa98 	bl	80001f0 <__aeabi_dsub>
 8008cc0:	e7d2      	b.n	8008c68 <rint+0x70>
 8008cc2:	2e33      	cmp	r6, #51	; 0x33
 8008cc4:	dd07      	ble.n	8008cd6 <rint+0xde>
 8008cc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008cca:	d1cd      	bne.n	8008c68 <rint+0x70>
 8008ccc:	ee10 2a10 	vmov	r2, s0
 8008cd0:	f7f7 fa90 	bl	80001f4 <__adddf3>
 8008cd4:	e7c8      	b.n	8008c68 <rint+0x70>
 8008cd6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008cda:	f04f 32ff 	mov.w	r2, #4294967295
 8008cde:	40f2      	lsrs	r2, r6
 8008ce0:	4210      	tst	r0, r2
 8008ce2:	d0c1      	beq.n	8008c68 <rint+0x70>
 8008ce4:	0852      	lsrs	r2, r2, #1
 8008ce6:	4210      	tst	r0, r2
 8008ce8:	bf1f      	itttt	ne
 8008cea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008cee:	ea20 0202 	bicne.w	r2, r0, r2
 8008cf2:	4134      	asrne	r4, r6
 8008cf4:	4314      	orrne	r4, r2
 8008cf6:	e7d1      	b.n	8008c9c <rint+0xa4>
 8008cf8:	08009cf8 	.word	0x08009cf8
 8008cfc:	000fffff 	.word	0x000fffff

08008d00 <scalbn>:
 8008d00:	b570      	push	{r4, r5, r6, lr}
 8008d02:	ec55 4b10 	vmov	r4, r5, d0
 8008d06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008d0a:	4606      	mov	r6, r0
 8008d0c:	462b      	mov	r3, r5
 8008d0e:	b9aa      	cbnz	r2, 8008d3c <scalbn+0x3c>
 8008d10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008d14:	4323      	orrs	r3, r4
 8008d16:	d03b      	beq.n	8008d90 <scalbn+0x90>
 8008d18:	4b31      	ldr	r3, [pc, #196]	; (8008de0 <scalbn+0xe0>)
 8008d1a:	4629      	mov	r1, r5
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	ee10 0a10 	vmov	r0, s0
 8008d22:	f7f7 fc1d 	bl	8000560 <__aeabi_dmul>
 8008d26:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <scalbn+0xe4>)
 8008d28:	429e      	cmp	r6, r3
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	460d      	mov	r5, r1
 8008d2e:	da12      	bge.n	8008d56 <scalbn+0x56>
 8008d30:	a327      	add	r3, pc, #156	; (adr r3, 8008dd0 <scalbn+0xd0>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	f7f7 fc13 	bl	8000560 <__aeabi_dmul>
 8008d3a:	e009      	b.n	8008d50 <scalbn+0x50>
 8008d3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008d40:	428a      	cmp	r2, r1
 8008d42:	d10c      	bne.n	8008d5e <scalbn+0x5e>
 8008d44:	ee10 2a10 	vmov	r2, s0
 8008d48:	4620      	mov	r0, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	f7f7 fa52 	bl	80001f4 <__adddf3>
 8008d50:	4604      	mov	r4, r0
 8008d52:	460d      	mov	r5, r1
 8008d54:	e01c      	b.n	8008d90 <scalbn+0x90>
 8008d56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	3a36      	subs	r2, #54	; 0x36
 8008d5e:	4432      	add	r2, r6
 8008d60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008d64:	428a      	cmp	r2, r1
 8008d66:	dd0b      	ble.n	8008d80 <scalbn+0x80>
 8008d68:	ec45 4b11 	vmov	d1, r4, r5
 8008d6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008dd8 <scalbn+0xd8>
 8008d70:	f000 f83c 	bl	8008dec <copysign>
 8008d74:	a318      	add	r3, pc, #96	; (adr r3, 8008dd8 <scalbn+0xd8>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	ec51 0b10 	vmov	r0, r1, d0
 8008d7e:	e7da      	b.n	8008d36 <scalbn+0x36>
 8008d80:	2a00      	cmp	r2, #0
 8008d82:	dd08      	ble.n	8008d96 <scalbn+0x96>
 8008d84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d90:	ec45 4b10 	vmov	d0, r4, r5
 8008d94:	bd70      	pop	{r4, r5, r6, pc}
 8008d96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008d9a:	da0d      	bge.n	8008db8 <scalbn+0xb8>
 8008d9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008da0:	429e      	cmp	r6, r3
 8008da2:	ec45 4b11 	vmov	d1, r4, r5
 8008da6:	dce1      	bgt.n	8008d6c <scalbn+0x6c>
 8008da8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008dd0 <scalbn+0xd0>
 8008dac:	f000 f81e 	bl	8008dec <copysign>
 8008db0:	a307      	add	r3, pc, #28	; (adr r3, 8008dd0 <scalbn+0xd0>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	e7e0      	b.n	8008d7a <scalbn+0x7a>
 8008db8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dbc:	3236      	adds	r2, #54	; 0x36
 8008dbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008dc6:	4620      	mov	r0, r4
 8008dc8:	4629      	mov	r1, r5
 8008dca:	2200      	movs	r2, #0
 8008dcc:	4b06      	ldr	r3, [pc, #24]	; (8008de8 <scalbn+0xe8>)
 8008dce:	e7b2      	b.n	8008d36 <scalbn+0x36>
 8008dd0:	c2f8f359 	.word	0xc2f8f359
 8008dd4:	01a56e1f 	.word	0x01a56e1f
 8008dd8:	8800759c 	.word	0x8800759c
 8008ddc:	7e37e43c 	.word	0x7e37e43c
 8008de0:	43500000 	.word	0x43500000
 8008de4:	ffff3cb0 	.word	0xffff3cb0
 8008de8:	3c900000 	.word	0x3c900000

08008dec <copysign>:
 8008dec:	ec51 0b10 	vmov	r0, r1, d0
 8008df0:	ee11 0a90 	vmov	r0, s3
 8008df4:	ee10 2a10 	vmov	r2, s0
 8008df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008e00:	ea41 0300 	orr.w	r3, r1, r0
 8008e04:	ec43 2b10 	vmov	d0, r2, r3
 8008e08:	4770      	bx	lr
	...

08008e0c <_init>:
 8008e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0e:	bf00      	nop
 8008e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e12:	bc08      	pop	{r3}
 8008e14:	469e      	mov	lr, r3
 8008e16:	4770      	bx	lr

08008e18 <_fini>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	bf00      	nop
 8008e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e1e:	bc08      	pop	{r3}
 8008e20:	469e      	mov	lr, r3
 8008e22:	4770      	bx	lr
